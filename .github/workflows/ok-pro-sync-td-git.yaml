name: OK APK Sync from ThunderDrive

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 1200
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          python3-pip
        pip install requests pycryptodome
        
    - name: Run Thunder Drive Sync
      env:
        THUNDER_USER: ${{ secrets.THUNDER_USER }}
        THUNDER_PASSWORD: ${{ secrets.THUNDER_PASSWORD }}
        SHARE_URL: https://pan.xunlei.com/s/VOOlHjZarK69yZ7BxcLd1WrsA1
        SHARE_PASSWORD: ckit  # 分享密码
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TARGET_REPO: ${{ github.repository }}
      run: |
        python - << "EOF"
        import os
        import json
        import re
        import time
        import requests
        import hashlib
        import logging
        import subprocess
        import sys
        import random
        from Crypto.Cipher import AES
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s][%(levelname)-8s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = logging.getLogger("thunder_sync")
        log.setLevel(logging.INFO)
        
        # 配置参数
        WORK_DIR = "temp_apks"
        APK_DIR = "apk"
        
        # 文件匹配规则 - 按需修改
        FILE_PATTERNS = {
            "leanback": r"leanback.*\.apk",
            "mobile": r"mobile.*\.apk",
            "pro_leanback": r"leanback-pro.*\.apk",
            "pro_mobile": r"mobile-pro.*\.apk"
        }
        
        # 目标文件名
        TARGET_FILES = {
            "leanback": "leanback.apk",
            "mobile": "mobile.apk",
            "pro_leanback": "leanback-pro.apk",
            "pro_mobile": "mobile-pro.apk"
        }
        
        def setup_git():
            try:
                log.info(">>> 配置Git环境")
                actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
                email = f"{actor}@users.noreply.github.com"
                
                subprocess.run(["git", "config", "user.name", actor], check=True)
                subprocess.run(["git", "config", "user.email", email], check=True)
                
                # 拉取最新更改防止冲突
                subprocess.run(["git", "pull", "origin", "main", "--rebase"], check=True)
                
                log.info("Git配置完成")
                return True
            except Exception as e:
                log.error(f"Git设置失败: {str(e)}")
                return False
        
        def commit_and_push(message):
            try:
                log.info(f">>> 准备提交更新: {message}")
                subprocess.run(["git", "add", APK_DIR, "version.txt"], check=True)
                
                # 检查是否有更改
                status = subprocess.run(
                    ["git", "status", "--porcelain"], 
                    capture_output=True, 
                    text=True,
                    check=True
                )
                
                if not status.stdout.strip():
                    log.info("没有更改需要提交")
                    return True
                
                subprocess.run(["git", "commit", "-m", message], check=True)
                
                token = os.environ['GITHUB_TOKEN']
                actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
                repo = os.environ['TARGET_REPO']
                repo_url = f"https://{actor}:{token}@github.com/{repo}.git"
                
                subprocess.run(["git", "pull", "origin", "main", "--rebase"], check=True)
                subprocess.run(["git", "push", repo_url, "HEAD:main"], check=True)
                log.info("✅ 推送成功")
                return True
            except Exception as e:
                log.error(f"Git提交失败: {str(e)}")
                return False
        
        def load_version_file():
            version_path = "version.txt"
            if os.path.exists(version_path):
                try:
                    with open(version_path, "r") as f:
                        return json.load(f)
                except:
                    return {}
            return {}
        
        def save_version_file(versions):
            with open("version.txt", "w") as f:
                json.dump(versions, f, indent=2)
        
        def thunder_login(username, password):
            """模拟迅雷账号登录，获取Cookie"""
            try:
                log.info("🔐 正在登录迅雷账号...")
                
                # 获取登录加密密钥
                key_url = "https://login.xunlei.com/risk"
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
                    "Referer": "https://pan.xunlei.com/"
                }
                key_res = requests.get(key_url, headers=headers)
                key_data = key_res.json()
                public_key = key_data["publickey"]
                seq = key_data["seq"]
                
                # 加密密码
                cipher = AES.new(public_key.encode('utf-8'), AES.MODE_ECB)
                padded_password = password + (16 - len(password) % 16) * '\0'
                encrypted_pwd = cipher.encrypt(padded_password.encode('utf-8'))
                encrypted_pwd = encrypted_pwd.hex().upper()
                
                # 构造登录请求
                login_url = "https://login.xunlei.com/sec2login/"
                login_data = {
                    "userid": username,
                    "pwd": encrypted_pwd,
                    "rsa_pwd": "",  # 留空使用AES加密结果
                    "login_enable": "0",
                    "business_type": "113",
                    "vcode": "",
                    "seq": seq,
                    "session_type": "simple",
                    "captcha_code": ""
                }
                
                # 发送登录请求
                session = requests.Session()
                response = session.post(login_url, data=login_data, headers=headers)
                
                if response.status_code != 200:
                    log.error(f"登录失败: HTTP {response.status_code}")
                    return None
                
                # 检查登录结果
                login_result = response.json()
                if login_result.get("message") != "success":
                    log.error(f"登录失败: {login_result.get('message')}")
                    return None
                
                # 提取Cookies
                cookies = "; ".join([f"{name}={value}" for name, value in session.cookies.items()])
                log.info("✅ 登录成功，获取到Cookie")
                return cookies
                
            except Exception as e:
                log.error(f"登录过程中出错: {str(e)}")
                return None
        
        def decrypt_download_link(encrypted_url):
            """解密迅雷下载链接（如果需要）"""
            # 通常迅雷的下载链接不需要解密，但如果加密可以在这里处理
            return encrypted_url
        
        def get_share_file_list(share_url, share_password, cookies):
            """获取分享链接下的文件列表"""
            log.info(f"获取分享文件列表: {share_url}")
            
            # 解析分享ID
            share_id = ""
            if "/s/" in share_url:
                share_id = share_url.split("/s/")[-1].split("/")[0]
                share_id = share_id.split("?")[0]
            
            if not share_id:
                log.error("分享链接格式错误")
                return []
            
            # 准备请求头
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
                "Cookie": cookies,
                "Referer": "https://pan.xunlei.com/"
            }
            
            # 构造API参数
            params = {
                "s": share_id,
                "pwd": share_password,
                "t": str(int(time.time() * 1000)),
                "sign": hashlib.md5(f"{share_id}{share_password}".encode()).hexdigest()[:16]
            }
            
            api_url = "https://pan.xunlei.com/api/share/download"
            
            try:
                response = requests.post(api_url, headers=headers, data=params, timeout=30)
                response.raise_for_status()
                data = response.json()
                
                if data.get("status") != "success":
                    log.error(f"获取文件列表失败: {data.get('msg')}")
                    return []
                
                # 提取文件信息
                files = []
                for file in data["data"]:
                    download_url = decrypt_download_link(file["download_url"])
                    if not download_url:
                        log.warning(f"无法解析下载链接: {file['name']}")
                        continue
                        
                    files.append({
                        "name": file["name"],
                        "size": file["size"],
                        "download_url": download_url,
                        "sha1": file["hash"]
                    })
                
                log.info(f"获取到 {len(files)} 个文件")
                return files
            except Exception as e:
                log.error(f"获取文件列表失败: {str(e)}")
                return []
        
        def download_file(file_info, save_path, cookies):
            """下载文件"""
            file_name = file_info["name"]
            file_url = file_info["download_url"]
            file_size = file_info["size"]
            
            log.info(f"开始下载: {file_name} ({file_size/1024/1024:.2f} MB)")
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
                "Cookie": cookies,
                "Referer": "https://pan.xunlei.com/"
            }
            
            try:
                # 下载文件
                response = requests.get(file_url, headers=headers, stream=True, timeout=300)
                response.raise_for_status()
                
                # 创建保存目录
                os.makedirs(os.path.dirname(save_path), exist_ok=True)
                
                # 写入文件
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                
                # 验证文件大小
                downloaded_size = os.path.getsize(save_path)
                if file_size > 0 and downloaded_size != file_size:
                    log.error(f"文件大小不匹配: {downloaded_size} vs {file_size}")
                    return False
                
                log.info(f"✅ 下载完成: {file_name}")
                return True
            except Exception as e:
                log.error(f"下载失败: {file_name} - {str(e)}")
                return False
        
        def find_matching_files(files):
            """匹配所需文件"""
            matched = {}
            
            for key, pattern in FILE_PATTERNS.items():
                regex = re.compile(pattern, re.IGNORECASE)
                for file_info in files:
                    if regex.search(file_info["name"]):
                        # 获取文件SHA1作为版本标识
                        file_version = file_info["sha1"]
                        
                        # 记录文件信息
                        if key not in matched:
                            matched[key] = {
                                "file_info": file_info,
                                "version": file_version
                            }
                        break
            
            return matched
        
        def main():
            log.info("🚀 启动迅雷网盘APK同步")
            
            # 设置Git
            if not setup_git():
                return 1
                
            # 创建目录
            os.makedirs(WORK_DIR, exist_ok=True)
            os.makedirs(APK_DIR, exist_ok=True)
            
            # 加载版本文件
            current_versions = load_version_file()
            
            # 获取环境变量
            username = os.environ.get("THUNDER_USER")
            password = os.environ.get("THUNDER_PASSWORD")
            share_url = os.environ.get("SHARE_URL")
            share_password = os.environ.get("SHARE_PASSWORD", "")
            
            if not username or not password:
                log.error("缺少迅雷账号或密码")
                return 2
                
            # 登录获取Cookie
            cookies = thunder_login(username, password)
            if not cookies:
                log.error("无法获取迅雷Cookie")
                return 3
                
            # 获取文件列表
            files = get_share_file_list(share_url, share_password, cookies)
            
            if not files:
                log.error("无法获取文件列表")
                return 4
                
            # 匹配所需文件
            matched_files = find_matching_files(files)
            
            # 处理更新
            needs_update = False
            update_log = []
            
            for key, match in matched_files.items():
                target_name = TARGET_FILES[key]
                target_path = os.path.join(APK_DIR, target_name)
                
                # 检查是否需要更新
                if key in current_versions:
                    if current_versions[key]["version"] == match["version"]:
                        log.info(f"↪️ 跳过 {target_name} (版本相同)")
                        continue
                
                # 下载文件
                temp_path = os.path.join(WORK_DIR, match["file_info"]["name"])
                if download_file(match["file_info"], temp_path, cookies):
                    # 移动文件
                    if os.path.exists(target_path):
                        os.remove(target_path)
                    os.rename(temp_path, target_path)
                    
                    # 更新版本记录
                    current_versions[key] = {
                        "version": match["version"],
                        "timestamp": int(time.time())
                    }
                    update_log.append(target_name)
                    needs_update = True
            
            # 如果有更新，提交更改
            if needs_update:
                log.info("💾 保存版本文件")
                save_version_file(current_versions)
                
                if commit_and_push("更新APK: " + ", ".join(update_log)):
                    log.info("✅ 同步成功!")
                    return 0
                else:
                    log.error("❌ 提交失败")
                    return 5
            else:
                log.info("✅ 所有文件均为最新版本")
                return 0
        
        if __name__ == "__main__":
            try:
                exit_code = main()
                log.info(f"🏁 工作流结束 (代码: {exit_code})")
                sys.exit(exit_code)
            except Exception as e:
                log.error(f"未捕获的异常: {str(e)}")
                sys.exit(99)
        EOF
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-logs
        path: thunder_sync.log

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    steps:
      - name: Clean up workspace
        run: |
          # 删除临时工作目录
          rm -rf temp_apks
          # 清除未跟踪文件
          git clean -f -d
          # 保留日志文件
          rm -f thunder_sync.log
