name: BV APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */24 * * *'
  workflow_dispatch:

# 使用原生并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于缓存的锁机制
    - name: Acquire Repository Lock
      id: lock
      run: |
        LOCK_DIR="$GITHUB_WORKSPACE/.lock"
        LOCK_FILE="$LOCK_DIR/repo-lock"
        mkdir -p "$LOCK_DIR"
        
        for i in {1..10}; do
          if [ -f "$LOCK_FILE" ]; then
            echo "锁已被占用，等待重试 ($i/10)..."
            sleep 30
          else
            touch "$LOCK_FILE"
            echo "lock-acquired=true" >> $GITHUB_OUTPUT
            echo "成功获取锁"
            exit 0
          fi
        done
        
        echo "::error::无法在5分钟内获取锁"
        exit 1

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        sparse-checkout: |
          apk/
          .github/workflows/

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase true
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
    - name: Run APK sync
      env:
        SOURCE_REPO: "aaa1115910/bv"
        TARGET_REPO: "${{ github.repository }}"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        STABLE_APK_PATTERN: "release_default_universal.apk"
        PRE_RELEASE_APK_PATTERN: "alpha_default_universal.apk"
        STABLE_KEY_NAME: "bv.apk"
        PRE_RELEASE_KEY_NAME: "bv-beta.apk"
      run: |
        set -euo pipefail
        WORK_DIR=$(mktemp -d)
        trap 'rm -rf "$WORK_DIR"' EXIT
        
        # 验证令牌权限
        if ! curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$TARGET_REPO" | grep -q '"id"'; then
          echo "::error::无效的GITHUB_TOKEN，请检查权限"
          exit 1
        fi
        
        # 获取源仓库发布信息
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ -z "$RELEASES_JSON" ]; then
          echo "::error::无法获取源仓库发布信息"
          exit 1
        fi
        
        # 改进的版本信息提取函数 - 优先从标题提取，然后从标签提取
        extract_main_version() {
          local release_json="$1"
          local tag_name=$(jq -r '.tag_name' <<< "$release_json")
          local name=$(jq -r '.name' <<< "$release_json")
          local published_at=$(jq -r '.published_at' <<< "$release_json")
          date_utc8=$(TZ=UTC date -d "$published_at" +'%Y-%m-%d')
          
          # 优先从标题中提取主版本号
          if [[ "$name" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            # 标题中找到版本号 (如0.3.0)
            version="${BASH_REMATCH[1]}"
          elif [[ "$tag_name" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            # 标题中没有，从标签中提取
            version="${BASH_REMATCH[1]}"
          else
            # 无法提取，使用原始标签
            version="$tag_name"
          fi
          
          # 统一添加v前缀
          echo "v$version $date_utc8"
        }
        
        # 核心APK处理函数
        process_apk() {
          local release_json="$1"
          local pattern="$2"
          local key="$3"
          local current_version="$4"
          
          # 检查目标APK是否存在 - 使用GitHub API
          local status_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/apk/$key")
          
          # 获取最新版本号
          local latest_tag=$(jq -r '.tag_name' <<< "$release_json")
          
          # 调试信息
          echo "文件状态码: $status_code"
          echo "当前版本: $current_version, 最新版本: $latest_tag"
          
          # 确定是否需要更新
          if [ "$status_code" != "200" ] || [ "$latest_tag" != "$current_version" ]; then
            # 获取精确匹配的APK
            local url=$(jq -r --arg pattern "$pattern" '
              .assets[] | 
              select(.name | contains($pattern)) |
              .browser_download_url' <<< "$release_json" | head -1)
            
            [ -z "$url" ] && { 
              echo "::warning::未找到匹配的APK文件 (pattern: $pattern)";
              return 1; 
            }
            
            # 直接下载到临时目录
            if ! curl -fL "$url" -o "$WORK_DIR/$key"; then
              echo "::error::无法下载APK文件: $key"
              return 1
            fi
            
            # 验证文件非空
            if [ ! -s "$WORK_DIR/$key" ]; then
              echo "::error::下载文件为空: $key"
              return 1
            fi
            
            echo "成功下载: $key (版本: $latest_tag)"
            return 0  # 表示需要更新
          fi
          echo "无需更新: $key (当前版本: $current_version)"
          return 1  # 表示不需要更新
        }
        
        # 获取并解析版本文件
        VERSION_FILE_RESP=$(curl -s -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        if [ "$(jq -r '.message? // ""' <<< "$VERSION_FILE_RESP")" == "Not Found" ]; then
          echo "未找到版本文件，将创建新文件"
          CURRENT_VERSION_JSON="{}"
          SHA_VERSION=""
        else
          CONTENT=$(jq -r '.content' <<< "$VERSION_FILE_RESP" | base64 -d)
          SHA_VERSION=$(jq -r '.sha' <<< "$VERSION_FILE_RESP")
          
          # 验证JSON格式
          if ! echo "$CONTENT" | jq -e . >/dev/null 2>&1; then
            echo "::warning::版本文件格式无效，重置为空JSON"
            CURRENT_VERSION_JSON="{}"
          else
            CURRENT_VERSION_JSON="$CONTENT"
          fi
        fi
        
        # 提取当前版本
        STABLE_NEED_UPDATE=false
        PRE_RELEASE_NEED_UPDATE=false
        
        CURRENT_STABLE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$STABLE_KEY_NAME\"? // \"\"" | cut -d, -f1)
        CURRENT_STABLE_DATE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$STABLE_KEY_NAME\"? // \"\"" | cut -d, -f2)
        CURRENT_PRE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$PRE_RELEASE_KEY_NAME\"? // \"\"" | cut -d, -f1)
        CURRENT_PRE_DATE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$PRE_RELEASE_KEY_NAME\"? // \"\"" | cut -d, -f2)
        
        echo "目标稳定版: ${CURRENT_STABLE:-无} (${CURRENT_STABLE_DATE:-无日期})"
        echo "目标预发行版: ${CURRENT_PRE:-无} (${CURRENT_PRE_DATE:-无日期})"
        
        # 处理稳定版
        LATEST_STABLE=$(jq -r '[.[] | select(.prerelease == false)] | max_by(.published_at)' <<< "$RELEASES_JSON")
        if [ -n "$LATEST_STABLE" ] && [ "$LATEST_STABLE" != "null" ]; then
          read NEW_STABLE_VERSION NEW_STABLE_DATE <<< $(extract_main_version "$LATEST_STABLE")
          echo "源稳定版: $NEW_STABLE_VERSION ($NEW_STABLE_DATE)"
          
          if process_apk "$LATEST_STABLE" "$STABLE_APK_PATTERN" "$STABLE_KEY_NAME" "$CURRENT_STABLE" == 0; then
            STABLE_NEED_UPDATE=true
          else
            # 保留当前版本信息
            NEW_STABLE_VERSION="$CURRENT_STABLE"
            NEW_STABLE_DATE="$CURRENT_STABLE_DATE"
          fi
        else
          echo "::warning::未找到稳定版发布"
          NEW_STABLE_VERSION="$CURRENT_STABLE"
          NEW_STABLE_DATE="$CURRENT_STABLE_DATE"
        fi
        
        # 处理预发布版
        LATEST_PRE_RELEASE=$(jq -r '[.[] | select(.prerelease == true)] | max_by(.published_at)' <<< "$RELEASES_JSON")
        if [ -n "$LATEST_PRE_RELEASE" ] && [ "$LATEST_PRE_RELEASE" != "null" ]; then
          read NEW_PRE_RELEASE_VERSION NEW_PRE_RELEASE_DATE <<< $(extract_main_version "$LATEST_PRE_RELEASE")
          echo "源预发布版: $NEW_PRE_RELEASE_VERSION ($NEW_PRE_RELEASE_DATE)"
          
          if process_apk "$LATEST_PRE_RELEASE" "$PRE_RELEASE_APK_PATTERN" "$PRE_RELEASE_KEY_NAME" "$CURRENT_PRE" == 0; then
            PRE_RELEASE_NEED_UPDATE=true
          else
            # 保留当前版本信息
            NEW_PRE_RELEASE_VERSION="$CURRENT_PRE"
            NEW_PRE_RELEASE_DATE="$CURRENT_PRE_DATE"
          fi
        else
          echo "::warning::未找到预发布版"
          NEW_PRE_RELEASE_VERSION="$CURRENT_PRE"
          NEW_PRE_RELEASE_DATE="$CURRENT_PRE_DATE"
        fi
        
        # 更新版本文件
        UPDATE_VERSION_FILE=false
        UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq .)
        
        # 稳定版更新检查
        if [ -n "$NEW_STABLE_VERSION" ] && 
           { [ "$NEW_STABLE_VERSION" != "$CURRENT_STABLE" ] || 
             [ "$NEW_STABLE_DATE" != "$CURRENT_STABLE_DATE" ]; }; then
          UPDATED_VERSION_JSON=$(jq --arg k "$STABLE_KEY_NAME" \
            --arg v "$NEW_STABLE_VERSION,$NEW_STABLE_DATE" \
            '.[$k] = $v' <<< "$UPDATED_VERSION_JSON")
          UPDATE_VERSION_FILE=true
          echo "更新稳定版: $NEW_STABLE_VERSION ($NEW_STABLE_DATE)"
        fi
        
        # 预发布版更新检查
        if [ -n "$NEW_PRE_RELEASE_VERSION" ] && 
           { [ "$NEW_PRE_RELEASE_VERSION" != "$CURRENT_PRE" ] || 
             [ "$NEW_PRE_RELEASE_DATE" != "$CURRENT_PRE_DATE" ]; }; then
          UPDATED_VERSION_JSON=$(jq --arg k "$PRE_RELEASE_KEY_NAME" \
            --arg v "$NEW_PRE_RELEASE_VERSION,$NEW_PRE_RELEASE_DATE" \
            '.[$k] = $v' <<< "$UPDATED_VERSION_JSON")
          UPDATE_VERSION_FILE=true
          echo "更新预发布版: $NEW_PRE_RELEASE_VERSION ($NEW_PRE_RELEASE_DATE)"
        fi
        
        # 上传版本文件（如果有更新）
        if $UPDATE_VERSION_FILE; then
          ENCODED_CONTENT=$(echo -n "$UPDATED_VERSION_JSON" | base64 -w0)
          curl -s -X PUT \
            -H "Authorization: token $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg msg "更新版本号" \
              --arg content "$ENCODED_CONTENT" \
              --arg sha "$SHA_VERSION" \
              '{message: $msg, content: $content, sha: $sha}')" \
            "https://api.github.com/repos/$TARGET_REPO/contents/version.txt" > /dev/null
        else
          echo "版本文件无需更新"
        fi
        
        # 修复APK上传逻辑
        # 创建必要的目录结构
        mkdir -p apk
        
        # 移动下载的APK文件到正确位置
        if $STABLE_NEED_UPDATE; then
          echo "移动稳定版APK到apk目录"
          mv "$WORK_DIR/$STABLE_KEY_NAME" "apk/$STABLE_KEY_NAME"
        fi
        
        if $PRE_RELEASE_NEED_UPDATE; then
          echo "移动预发布版APK到apk目录"
          mv "$WORK_DIR/$PRE_RELEASE_KEY_NAME" "apk/$PRE_RELEASE_KEY_NAME"
        fi
        
        # 提交更改到Git
        git add apk/* version.txt
        
        # 检查是否有更改
        if [ -n "$(git status --porcelain)" ]; then
          echo "检测到更改，提交到Git"
          git commit -m "更新APK: 稳定版=$NEW_STABLE_VERSION, 预发布版=$NEW_PRE_RELEASE_VERSION"
          
          # 推送更改
          MAX_RETRIES=3
          RETRY_DELAY=10
          for i in $(seq 1 $MAX_RETRIES); do
            if git push origin HEAD:${GITHUB_REF#refs/heads/}; then
              echo "推送成功"
              break
            else
              echo "推送失败，等待重试 ($i/$MAX_RETRIES)..."
              sleep $RETRY_DELAY
            fi
          done
        else
          echo "没有检测到更改，跳过提交"
        fi
        
        echo "同步完成!"
        echo "稳定版: ${NEW_STABLE_VERSION:-无} (${NEW_STABLE_DATE:-无日期})"
        echo "预发布版: ${NEW_PRE_RELEASE_VERSION:-无} (${NEW_PRE_RELEASE_DATE:-无日期})"
        exit 0

    - name: Release Repository Lock
      if: always()
      run: |
        # 释放锁
        LOCK_FILE="$GITHUB_WORKSPACE/.lock/repo-lock"
        if [ -f "$LOCK_FILE" ]; then
          rm -f "$LOCK_FILE"
          echo "锁已释放"
        else
          echo "锁文件不存在，无需释放"
        fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "BV APK Sync from Source Repository"
          repository: ${{ github.repository }}