name: Passwall Packages Sync from Source Repository

on:
  schedule:
    - cron: '0 */24 * * *'  # 每24小时运行一次
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl zip
        
    - name: Run package sync script
      env:
        SOURCE_REPO: "xiaorouji/openwrt-passwall"
        TARGET_REPO: "${{ github.repository }}"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        V19_ZIP_TARGET: "19.07_luci-passwall.zip"
        V24_ZIP_TARGET: "24.10_luci-passwall.zip"
        V19_ZIP_PATH: "apk/19.07_luci-passwall.zip"
        V24_ZIP_PATH: "apk/24.10_luci-passwall.zip"
      run: |
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        mkdir -p "$WORK_DIR/v19" "$WORK_DIR/v24"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 验证令牌访问权限
        echo "验证GitHub令牌权限..."
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
                  "https://api.github.com/repos/$TARGET_REPO")
        if [ "$RESPONSE" != "200" ]; then
          echo "错误: 令牌无效 (HTTP $RESPONSE)"
          exit 1
        fi

        # 获取最新稳定版发布信息
        echo "获取最新稳定版发布信息..."
        RELEASE_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases/latest")
        if [ $? -ne 0 ] || [ "$(echo "$RELEASE_JSON" | jq -r '.message')" = "Not Found" ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取版本信息
        TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
        PUBLISHED_AT=$(echo "$RELEASE_JSON" | jq -r '.published_at')
        RELEASE_DATE=$(TZ=UTC date -d "$PUBLISHED_AT" +'%Y-%m-%d')
        echo "最新稳定版: $TAG_NAME (发布于: $RELEASE_DATE)"

        # 获取目标仓库当前版本文件
        echo "获取目标仓库当前版本文件..."
        TARGET_VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        # 解析当前版本数据
        if [ "$(echo "$TARGET_VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          VERSION_CONTENT=$(echo "$TARGET_VERSION_JSON" | jq -r '.content' | base64 -d)
          echo "当前版本文件内容:"
          echo "$VERSION_CONTENT"
          CURRENT_VERSION_DATA=$(echo "$VERSION_CONTENT" | jq . || echo "{}")
        else
          CURRENT_VERSION_DATA="{}"
          echo "目标仓库无版本文件"
        fi

        # 初始化更新标志
        V19_NEED_UPDATE=false
        V24_NEED_UPDATE=false

        # 函数：检查是否需要更新
        check_update() {
          local target_path="$1"
          local key_name="$2"
          local current_version_data="$3"
          local source_version="$4"
          
          # 1. 检查目标文件是否存在
          echo "检查目标文件是否存在: $target_path..."
          FILE_EXIST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          if [ "$FILE_EXIST_RESPONSE" != "200" ]; then
            echo "目标文件不存在 (HTTP $FILE_EXIST_RESPONSE)，需要更新"
            return 0
          fi
          
          # 2. 检查版本文件中是否有对应键值
          local key_value=$(echo "$current_version_data" | jq -r ".\"$key_name\"")
          if [ "$key_value" = "null" ] || [ -z "$key_value" ]; then
            echo "版本文件中无对应键值，需要更新"
            return 0
          fi
          
          # 3. 检查版本是否匹配
          local current_version=$(echo "$key_value" | cut -d, -f1)
          if [ "$current_version" != "$source_version" ]; then
            echo "版本不匹配 (源版本: $source_version, 目标版本: $current_version)，需要更新"
            return 0
          fi
          
          echo "目标文件存在且版本匹配，无需更新"
          return 1
        }

        # 处理19.07版本
        echo "===== 处理19.07版本 ====="
        if check_update "$V19_ZIP_PATH" "$V19_ZIP_TARGET" "$CURRENT_VERSION_DATA" "$TAG_NAME"; then
          V19_NEED_UPDATE=true
          
          # 获取19.07版本文件URL
          V19_APP_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("luci-19.07_luci-app-passwall")) | .browser_download_url' | head -1)
          V19_I18N_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("luci-19.07_luci-i18n-passwall-zh-cn")) | .browser_download_url' | head -1)
          
          if [ -z "$V19_APP_URL" ] || [ -z "$V19_I18N_URL" ]; then
            echo "错误: 未找到19.07版本文件"
            V19_NEED_UPDATE=false
          else
            echo "下载19.07应用文件: $V19_APP_URL"
            curl -sL "$V19_APP_URL" -o "$WORK_DIR/v19/19.07_luci-app-passwall.ipk"
            
            echo "下载19.07语言文件: $V19_I18N_URL"
            curl -sL "$V19_I18N_URL" -o "$WORK_DIR/v19/19.07_luci-i18n-passwall.ipk"
            
            # 创建ZIP包
            cd "$WORK_DIR/v19"
            zip -j "$WORK_DIR/$V19_ZIP_TARGET" ./*
            cd -
            
            echo "19.07版本文件打包完成"
          fi
        fi

        # 处理24.10版本
        echo "===== 处理24.10版本 ====="
        if check_update "$V24_ZIP_PATH" "$V24_ZIP_TARGET" "$CURRENT_VERSION_DATA" "$TAG_NAME"; then
          V24_NEED_UPDATE=true
          
          # 获取24.10版本文件URL
          V24_APP_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("luci-24.10_luci-app-passwall")) | .browser_download_url' | head -1)
          V24_I18N_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | contains("luci-24.10_luci-i18n-passwall-zh-cn")) | .browser_download_url' | head -1)
          
          if [ -z "$V24_APP_URL" ] || [ -z "$V24_I18N_URL" ]; then
            echo "错误: 未找到24.10版本文件"
            V24_NEED_UPDATE=false
          else
            echo "下载24.10应用文件: $V24_APP_URL"
            curl -sL "$V24_APP_URL" -o "$WORK_DIR/v24/24.10_luci-app-passwall.ipk"
            
            echo "下载24.10语言文件: $V24_I18N_URL"
            curl -sL "$V24_I18N_URL" -o "$WORK_DIR/v24/24.10_luci-i18n-passwall.ipk"
            
            # 创建ZIP包
            cd "$WORK_DIR/v24"
            zip -j "$WORK_DIR/$V24_ZIP_TARGET" ./*
            cd -
            
            echo "24.10版本文件打包完成"
          fi
        fi

        # 更新版本数据
        echo "更新版本数据..."
        echo "$CURRENT_VERSION_DATA" > "$WORK_DIR/current_version.json"
        
        # 创建jq更新脚本
        cat > "$WORK_DIR/update_version.jq" << 'EOF'
        . as $current |
        if $update_v19 then $current | .[$v19_key] = $v19_value else $current end |
        if $update_v24 then . | .[$v24_key] = $v24_value else . end
EOF
        
        # 执行jq更新
        NEW_VERSION_DATA=$(jq -f "$WORK_DIR/update_version.jq" \
            --arg v19_key "$V19_ZIP_TARGET" \
            --arg v19_value "${TAG_NAME},${RELEASE_DATE}" \
            --arg v24_key "$V24_ZIP_TARGET" \
            --arg v24_value "${TAG_NAME},${RELEASE_DATE}" \
            --argjson update_v19 "$V19_NEED_UPDATE" \
            --argjson update_v24 "$V24_NEED_UPDATE" \
            "$WORK_DIR/current_version.json")
        
        NEW_VERSION_CONTENT=$(echo "$NEW_VERSION_DATA" | jq -r .)
        echo "更新后的版本文件内容:"
        echo "$NEW_VERSION_CONTENT"

        # 上传版本文件
        echo "更新版本文件..."
        VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                        "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        SHA_VERSION=""
        if [ "$(echo "$VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          SHA_VERSION=$(echo "$VERSION_JSON" | jq -r '.sha')
        fi

        VERSION_BASE64=$(echo -n "$NEW_VERSION_CONTENT" | base64 -w0)
        JSON_VERSION=$(jq -n \
            --arg msg "更新Passwall版本: $TAG_NAME" \
            --arg content "$VERSION_BASE64" \
            --arg sha "$SHA_VERSION" \
            '{message: $msg, content: $content, sha: $sha}')
        
        VERSION_RESPONSE=$(curl -s \
                  -X PUT \
                  -H "Authorization: token $TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_VERSION" \
                  "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        # 上传ZIP文件到apk目录
        upload_file() {
          local file_path="$1"
          local target_path="$2"
          
          echo "上传文件到apk目录: $target_path..."
          CONTENT_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                          "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          local sha=""
          if [ "$(echo "$CONTENT_JSON" | jq -r '.message')" != "Not Found" ]; then
            sha=$(echo "$CONTENT_JSON" | jq -r '.sha')
          fi
          
          # 使用文件方式处理
          local json_file="$WORK_DIR/upload_$(basename "$target_path").json"
          local content_base64=$(base64 -w0 "$file_path")
          local commit_msg="更新Passwall包: $target_path"
          
          # 创建JSON文件
          jq -n \
            --arg msg "$commit_msg" \
            --arg content "$content_base64" \
            --arg sha "$sha" \
            '{message: $msg, content: $content, sha: $sha}' > "$json_file"
          
          RESPONSE=$(curl -s \
                -X PUT \
                -H "Authorization: token $TOKEN" \
                -H "Content-Type: application/json" \
                --data-binary "@$json_file" \
                "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          local error_message=$(echo "$RESPONSE" | jq -r '.message')
          if [ "$error_message" != "null" ]; then
            echo "错误: $error_message"
            return 1
          fi
          return 0
        }

        if [ "$V19_NEED_UPDATE" = true ]; then
          if upload_file "$WORK_DIR/$V19_ZIP_TARGET" "$V19_ZIP_PATH"; then
            echo "19.07包上传成功到apk目录"
          else
            echo "上传19.07包失败"
          fi
        fi

        if [ "$V24_NEED_UPDATE" = true ]; then
          if upload_file "$WORK_DIR/$V24_ZIP_TARGET" "$V24_ZIP_PATH"; then
            echo "24.10包上传成功到apk目录"
          else
            echo "上传24.10包失败"
          fi
        fi

        echo "同步完成! 最新版本: $TAG_NAME"
        echo "19.07更新状态: $V19_NEED_UPDATE"
        echo "24.10更新状态: $V24_NEED_UPDATE"

