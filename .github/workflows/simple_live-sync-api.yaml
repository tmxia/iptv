name: Simple_live APK Sync from Source Repository

# 使用原生并发控制
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于缓存的锁机制
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Run APK sync script
      env:
        SOURCE_REPO: "xiaoyaocz/dart_simple_live"
        TARGET_REPO: "${{ github.repository }}"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        STABLE_APK_PATTERN: "app-arm64-v8a-release"
        PRE_RELEASE_APK_PATTERN: "app-armeabi-v7a-release"
        STABLE_KEY_NAME: "simple_live.apk"
        PRE_RELEASE_KEY_NAME: "simple_live-tv.apk"
      run: |
        #!/bin/bash
        set -euo pipefail
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT
        
        # 1. 目标文件存在性检测
        echo "检查目标文件存在性..."
        STABLE_TARGET_PATH="apk/$STABLE_KEY_NAME"
        PRE_TARGET_PATH="apk/$PRE_RELEASE_KEY_NAME"
        
        # 检查稳定版文件
        if curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/contents/$STABLE_TARGET_PATH" | grep -q 200; then
          echo "稳定版目标文件存在: $STABLE_TARGET_PATH"
          STABLE_EXISTS=1
        else
          echo "稳定版目标文件不存在: $STABLE_TARGET_PATH"
          STABLE_EXISTS=0
        fi
        
        # 检查预发行版文件
        if curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/contents/$PRE_TARGET_PATH" | grep -q 200; then
          echo "预发行版目标文件存在: $PRE_TARGET_PATH"
          PRE_EXISTS=1
        else
          echo "预发行版目标文件不存在: $PRE_TARGET_PATH"
          PRE_EXISTS=0
        fi
        
        # 2. 获取源仓库发布信息
        echo "获取源仓库发布信息..."
        releases=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        
        # 修复jq错误：确保处理的是数组
        if ! jq -e 'type == "array"' <<< "$releases" &>/dev/null; then
          echo "错误: 无法获取有效的发布信息"
          echo "API响应: $releases"
          exit 1
        fi
        
        # 提取最新稳定版
        stable_release=$(echo "$releases" | jq -r '[.[] | select(.prerelease == false)] | sort_by(.published_at) | reverse | .[0]')
        if [ "$stable_release" = "null" ]; then
          echo "错误: 无法提取稳定版发布信息"
          exit 1
        fi
        stable_version=$(echo "$stable_release" | jq -r '.tag_name')
        stable_date=$(echo "$stable_release" | jq -r '.published_at' | TZ=UTC date -f - +'%Y-%m-%d')
        echo "稳定版: $stable_version ($stable_date)"
        
        # 提取最新预发行版
        pre_release=$(echo "$releases" | jq -r '[.[] | select(.prerelease == true)] | sort_by(.published_at) | reverse | .[0]')
        if [ "$pre_release" = "null" ]; then
          echo "无预发行版可用"
          sync_pre_release=false
        else
          pre_version=$(echo "$pre_release" | jq -r '.tag_name' | sed 's/^tv_//')
          pre_date=$(echo "$pre_release" | jq -r '.published_at' | TZ=UTC date -f - +'%Y-%m-%d')
          echo "预发行版: $pre_version ($pre_date)"
          sync_pre_release=true
        fi
        
        # 3. 获取目标仓库版本文件
        echo "获取目标仓库版本信息..."
        version_response=$(curl -s -H "Authorization: token $TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        # 初始化版本数据
        if [ "$(echo "$version_response" | jq -r '.message')" != "Not Found" ]; then
          current_versions=$(echo "$version_response" | jq -r '.content' | base64 -d | jq -c .)
          echo "当前关心的版本信息:"
          # 只显示关心的键值
          echo "$current_versions" | jq -r ".\"$STABLE_KEY_NAME\" // \"(未设置)\"" | awk -v key="$STABLE_KEY_NAME" '{print key ": " $0}'
          if [ "$sync_pre_release" = true ]; then
            echo "$current_versions" | jq -r ".\"$PRE_RELEASE_KEY_NAME\" // \"(未设置)\"" | awk -v key="$PRE_RELEASE_KEY_NAME" '{print key ": " $0}'
          fi
        else
          current_versions="{}"
          echo "无版本文件"
          echo "$STABLE_KEY_NAME: (未设置)"
          if [ "$sync_pre_release" = true ]; then
            echo "$PRE_RELEASE_KEY_NAME: (未设置)"
          fi
        fi
        
        # 4. 更新版本数据函数
        update_version_data() {
          local key=$1
          local version=$2
          local date=$3
          
          # 仅更新指定键值
          current_versions=$(echo "$current_versions" | jq \
            --arg key "$key" \
            --arg value "$version,$date" \
            '.[$key] = $value')
        }
        
        # 5. 检查并下载APK
        check_and_download() {
          local release_json=$1
          local key_name=$2
          local apk_pattern=$3
          
          # 获取目标文件名
          local target_filename="apk/$key_name"
          
          # 检查当前版本
          local current_value=$(echo "$current_versions" | jq -r ".\"$key_name\"")
          
          # 获取最新版本和日期
          local latest_version=$(echo "$release_json" | jq -r '.tag_name')
          local latest_date=$(echo "$release_json" | jq -r '.published_at' | TZ=UTC date -f - +'%Y-%m-%d')
          
          # 如果是预发行版，处理版本号
          if [ "$key_name" = "$PRE_RELEASE_KEY_NAME" ]; then
            latest_version=$(echo "$latest_version" | sed 's/^tv_//')
          fi
          
          # 触发更新条件
          local need_update=0
          
          # 条件1: 目标文件不存在
          if [[ "$key_name" = "$STABLE_KEY_NAME" && "$STABLE_EXISTS" -eq 0 ]] || 
             [[ "$key_name" = "$PRE_RELEASE_KEY_NAME" && "$PRE_EXISTS" -eq 0 ]]; then
            echo "目标文件缺失，需要更新: $key_name"
            need_update=1
          # 条件2: 版本键值不存在
          elif ! echo "$current_versions" | jq -e ".\"$key_name\"" >/dev/null; then
            echo "版本键值缺失，需要更新: $key_name"
            need_update=1
          # 条件3: 版本或日期变化
          elif [[ "$current_value" != "$latest_version,$latest_date" ]]; then
            echo "版本变化: $key_name ($current_value → $latest_version,$latest_date)"
            need_update=1
          else
            echo "无需更新: $key_name ($current_value)"
            return 1
          fi
          
          if [ "$need_update" -eq 1 ]; then
            # 下载APK
            download_url=$(echo "$release_json" | jq -r \
              ".assets[] | select(.name | contains(\"$apk_pattern\")) | .browser_download_url" | head -1)
            
            if [ -z "$download_url" ]; then
              echo "错误: 未找到匹配的APK文件 (模式: $apk_pattern)"
              return 2
            fi
            
            echo "下载: $download_url"
            curl -sL "$download_url" -o "$WORK_DIR/$key_name"
            
            # 验证下载成功
            if [ ! -f "$WORK_DIR/$key_name" ]; then
              echo "错误: APK下载失败"
              return 3
            fi
            
            # 更新版本数据
            update_version_data "$key_name" "$latest_version" "$latest_date"
            return 0
          fi
          
          return 1
        }
        
        # 6. 上传文件函数
        upload_file() {
          local file_path=$1
          local target_path=$2
          
          # 获取SHA（如果存在）
          sha=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/$target_path" | jq -r '.sha // empty')
          
          # 准备上传数据
          content_base64=$(base64 -w0 "$file_path")
          json_data=$(jq -n \
            --arg msg "更新: $target_path" \
            --arg content "$content_base64" \
            --arg sha "$sha" \
            '{message: $msg, content: $content, sha: $sha}')
          
          # 上传文件
          echo "上传: $target_path"
          response=$(curl -s -X PUT \
            -H "Authorization: token $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$json_data" \
            "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          # 验证上传成功
          if ! echo "$response" | jq -e '.content' >/dev/null; then
            echo "错误: 文件上传失败"
            echo "响应: $response"
            return 1
          fi
          
          return 0
        }
        
        # 7. 处理稳定版
        echo "处理稳定版..."
        if check_and_download "$stable_release" "$STABLE_KEY_NAME" "$STABLE_APK_PATTERN"; then
          upload_file "$WORK_DIR/$STABLE_KEY_NAME" "apk/$STABLE_KEY_NAME" || exit 1
          echo "稳定版同步成功"
        fi
        
        # 8. 处理预发行版
        if [ "$sync_pre_release" = true ]; then
          echo "处理预发行版..."
          if check_and_download "$pre_release" "$PRE_RELEASE_KEY_NAME" "$PRE_RELEASE_APK_PATTERN"; then
            upload_file "$WORK_DIR/$PRE_RELEASE_KEY_NAME" "apk/$PRE_RELEASE_KEY_NAME" || exit 1
            echo "预发行版同步成功"
          fi
        fi
        
        # 9. 更新版本文件
        echo "更新版本文件..."
        version_sha=$(echo "$version_response" | jq -r '.sha // empty')
        version_content=$(echo "$current_versions" | jq -c .)
        version_base64=$(echo -n "$version_content" | base64 -w0)
        
        version_json=$(jq -n \
          --arg msg "更新版本信息" \
          --arg content "$version_base64" \
          --arg sha "$version_sha" \
          '{message: $msg, content: $content, sha: $sha}')
        
        # 上传版本文件
        version_response=$(curl -s -X PUT \
          -H "Authorization: token $TOKEN" \
          -H "Content-Type: application/json" \
          -d "$version_json" \
          "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        # 验证版本文件更新
        if ! echo "$version_response" | jq -e '.content' >/dev/null; then
          echo "错误: 版本文件更新失败"
          echo "响应: $version_response"
          exit 1
        fi
        
        # 10. 最终验证
        echo "验证同步结果..."
        # 验证稳定版文件
        if [ "$STABLE_EXISTS" -eq 0 ] || check_and_download "$stable_release" "$STABLE_KEY_NAME" "$STABLE_APK_PATTERN"; then
          if ! curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/apk/$STABLE_KEY_NAME" | grep -q 200; then
            echo "错误: 稳定版文件同步验证失败"
            exit 1
          else
            echo "稳定版文件验证成功"
          fi
        fi
        
        # 验证预发行版文件
        if [ "$sync_pre_release" = true ] && { [ "$PRE_EXISTS" -eq 0 ] || 
           check_and_download "$pre_release" "$PRE_RELEASE_KEY_NAME" "$PRE_RELEASE_APK_PATTERN"; }; then
          if ! curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/apk/$PRE_RELEASE_KEY_NAME" | grep -q 200; then
            echo "错误: 预发行版文件同步验证失败"
            exit 1
          else
            echo "预发行版文件验证成功"
          fi
        fi
        
        # 11. 显示最终关心的版本信息
        echo "同步完成! 关心的版本信息:"
        # 只显示关心的键值
        echo "$current_versions" | jq -r ".\"$STABLE_KEY_NAME\" // \"(未设置)\"" | awk -v key="$STABLE_KEY_NAME" '{print key ": " $0}'
        if [ "$sync_pre_release" = true ]; then
          echo "$current_versions" | jq -r ".\"$PRE_RELEASE_KEY_NAME\" // \"(未设置)\"" | awk -v key="$PRE_RELEASE_KEY_NAME" '{print key ": " $0}'
        fi

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Simple_live APK Sync from Source Repository"
          repository: ${{ github.repository }}