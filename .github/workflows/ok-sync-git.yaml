name: OK APK Sync from Source Repository

# 使用原生并发控制
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于缓存的锁机制
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v3
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout target repository
      uses: actions/checkout@v5
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: target-repo
        fetch-depth: 1

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip
        
    - name: Install Android SDK for aapt2
      run: |
        SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip"
        curl -sL "$SDK_TOOLS_URL" -o sdk-tools.zip
        unzip -q sdk-tools.zip -d android-sdk
        
        echo "ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
        echo "$GITHUB_WORKSPACE/android-sdk/cmdline-tools/bin" >> $GITHUB_PATH
        
        yes | android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$GITHUB_WORKSPACE/android-sdk "build-tools;34.0.0"
        echo "aapt2路径: $GITHUB_WORKSPACE/android-sdk/build-tools/34.0.0/aapt2"
        
    - name: Run APK sync script
      env:
        SOURCE_REPO: "lystv/fmapp"
        SOURCE_BRANCH: "ok"
        APK_DIR: "apk/release"
        TARGET_REPO: "${{ github.repository }}"
        STABLE_APK_NAME: "leanback-armeabi_v7a.apk"
        PRE_RELEASE_APK_NAME: "mobile-arm64_v8a.apk"
        STABLE_TARGET_NAME: "leanback.apk"
        PRE_RELEASE_TARGET_NAME: "mobile.apk"
      run: |
        # 目标文件路径
        STABLE_TARGET_PATH="apk/$STABLE_TARGET_NAME"
        PRE_RELEASE_TARGET_PATH="apk/$PRE_RELEASE_TARGET_NAME"
        
        # 工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 目标仓库目录
        TARGET_DIR="$GITHUB_WORKSPACE/target-repo"
        VERSION_FILE="$TARGET_DIR/version.txt"
        
        # 1. 检查当前版本文件状态
        echo "检查当前版本文件状态..."
        if [ -f "$VERSION_FILE" ]; then
          echo "版本文件存在: $VERSION_FILE"
          CURRENT_VERSION_DATA=$(cat "$VERSION_FILE")
          echo "当前版本数据: $CURRENT_VERSION_DATA"
        else
          echo "版本文件不存在，创建空版本文件"
          echo "{}" > "$VERSION_FILE"
          CURRENT_VERSION_DATA="{}"
        fi
        
        # 2. 提取版本信息函数
        extract_apk_version() {
          local apk_path="$1"
          local apk_type="$2"
          echo "从$apk_type APK提取版本号: $apk_path" >&2
          
          # 首先尝试使用aapt2提取版本
          VERSION_INFO=$("$GITHUB_WORKSPACE/android-sdk/build-tools/34.0.0/aapt2" dump badging "$apk_path" 2>/dev/null | grep "versionName" || true)
          VERSION=$(echo "$VERSION_INFO" | sed -n "s/.*versionName='\([^']*\)'.*/\1/p")
          
          if [ -z "$VERSION" ]; then
            echo "警告: 无法使用aapt2提取$apk_type版本号, 尝试使用提交信息" >&2
            # 使用提交信息中的版本号
            COMMIT_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/commits?path=$APK_DIR/$apk_type&sha=$SOURCE_BRANCH&per_page=1")
            VERSION=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.message' | grep -oP 'v\d+\.\d+\.\d+' | head -1)
            if [ -z "$VERSION" ]; then
              VERSION="unknown-$(date +%Y%m%d)"
            fi
          fi
          
          # 确保版本号以v开头
          if [[ ! "$VERSION" =~ ^v ]] && [[ "$VERSION" != "unknown"* ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "$apk_type版本号: $VERSION" >&2
          echo "$VERSION"
        }

        # 获取文件提交日期和哈希
        get_file_commit_info() {
          local file_name="$1"
          local apk_type="$2"
          
          echo "获取$apk_type提交信息..." >&2
          COMMIT_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/commits?path=$APK_DIR/$file_name&sha=$SOURCE_BRANCH&per_page=1")
          if [ $? -ne 0 ] || [ -z "$COMMIT_JSON" ] || [ "$COMMIT_JSON" = "[]" ]; then
            echo "错误: 无法获取$apk_type文件提交历史" >&2
            return 1
          fi
          
          COMMIT_DATE=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.committer.date')
          COMMIT_SHA=$(echo "$COMMIT_JSON" | jq -r '.[0].sha')
          COMMIT_DATE_UTC8=$(TZ=Asia/Shanghai date -d "$COMMIT_DATE" +'%Y-%m-%d %H:%M:%S')
          
          echo "$apk_type提交日期: $COMMIT_DATE_UTC8, 提交哈希: ${COMMIT_SHA:0:8}" >&2
          echo "$COMMIT_DATE_UTC8|${COMMIT_SHA:0:8}"
        }
        
        # 3. 下载源APK文件并提取信息
        echo "开始下载源APK文件..."
        
        # 电视版APK
        STABLE_DOWNLOAD_URL="https://raw.githubusercontent.com/$SOURCE_REPO/$SOURCE_BRANCH/$APK_DIR/$STABLE_APK_NAME"
        echo "下载电视版APK: $STABLE_DOWNLOAD_URL"
        curl -sL "$STABLE_DOWNLOAD_URL" -o "$WORK_DIR/$STABLE_APK_NAME"
        if [ ! -f "$WORK_DIR/$STABLE_APK_NAME" ]; then
          echo "错误: 电视版APK下载失败"
          exit 1
        fi
        
        # 手机版APK
        PRE_RELEASE_DOWNLOAD_URL="https://raw.githubusercontent.com/$SOURCE_REPO/$SOURCE_BRANCH/$APK_DIR/$PRE_RELEASE_APK_NAME"
        echo "下载手机版APK: $PRE_RELEASE_DOWNLOAD_URL"
        curl -sL "$PRE_RELEASE_DOWNLOAD_URL" -o "$WORK_DIR/$PRE_RELEASE_APK_NAME"
        if [ ! -f "$WORK_DIR/$PRE_RELEASE_APK_NAME" ]; then
          echo "错误: 手机版APK下载失败"
          exit 1
        fi
        
        # 提取版本和提交信息
        STABLE_VERSION=$(extract_apk_version "$WORK_DIR/$STABLE_APK_NAME" "电视版")
        PRE_RELEASE_VERSION=$(extract_apk_version "$WORK_DIR/$PRE_RELEASE_APK_NAME" "手机版")
        
        STABLE_COMMIT_INFO=$(get_file_commit_info "$STABLE_APK_NAME" "电视版")
        PRE_RELEASE_COMMIT_INFO=$(get_file_commit_info "$PRE_RELEASE_APK_NAME" "手机版")
        
        echo "=== 源APK信息 ==="
        echo "电视版: 版本=$STABLE_VERSION, 提交信息=$STABLE_COMMIT_INFO"
        echo "手机版: 版本=$PRE_RELEASE_VERSION, 提交信息=$PRE_RELEASE_COMMIT_INFO"
        
        # 4. 构建新的版本数据
        NEW_STABLE_VALUE="$STABLE_VERSION|$STABLE_COMMIT_INFO"
        NEW_PRE_VALUE="$PRE_RELEASE_VERSION|$PRE_RELEASE_COMMIT_INFO"
        
        # 5. 对比版本数据，决定是否需要更新
        NEED_UPDATE_STABLE=0
        NEED_UPDATE_PRE=0
        
        CURRENT_STABLE=$(echo "$CURRENT_VERSION_DATA" | jq -r ".$STABLE_TARGET_NAME // \"\"")
        CURRENT_PRE=$(echo "$CURRENT_VERSION_DATA" | jq -r ".$PRE_RELEASE_TARGET_NAME // \"\"")
        
        echo "=== 当前版本数据 ==="
        echo "电视版: $CURRENT_STABLE"
        echo "手机版: $CURRENT_PRE"
        
        # 电视版更新检测
        if [ -z "$CURRENT_STABLE" ]; then
          echo "电视版: 无当前版本记录，需要首次同步"
          NEED_UPDATE_STABLE=1
        elif [ "$CURRENT_STABLE" != "$NEW_STABLE_VALUE" ]; then
          echo "电视版: 版本变化，需要更新"
          echo "  旧: $CURRENT_STABLE"
          echo "  新: $NEW_STABLE_VALUE"
          NEED_UPDATE_STABLE=1
        else
          echo "电视版: 版本无变化，跳过更新"
        fi
        
        # 手机版更新检测
        if [ -z "$CURRENT_PRE" ]; then
          echo "手机版: 无当前版本记录，需要首次同步"
          NEED_UPDATE_PRE=1
        elif [ "$CURRENT_PRE" != "$NEW_PRE_VALUE" ]; then
          echo "手机版: 版本变化，需要更新"
          echo "  旧: $CURRENT_PRE"
          echo "  新: $NEW_PRE_VALUE"
          NEED_UPDATE_PRE=1
        else
          echo "手机版: 版本无变化，跳过更新"
        fi
        
        # 检查是否需要更新
        if [ "$NEED_UPDATE_STABLE" -eq 0 ] && [ "$NEED_UPDATE_PRE" -eq 0 ]; then
          echo "所有APK文件均为最新版本，无需更新"
          exit 0
        fi
        
        # 6. 更新版本文件
        echo "更新版本文件..."
        NEW_VERSION_DATA=$(echo "$CURRENT_VERSION_DATA" | jq \
            --arg stable_key "$STABLE_TARGET_NAME" \
            --arg stable_value "$NEW_STABLE_VALUE" \
            --arg pre_key "$PRE_RELEASE_TARGET_NAME" \
            --arg pre_value "$NEW_PRE_VALUE" \
            '.[$stable_key] = $stable_value | .[$pre_key] = $pre_value')
            
        echo "$NEW_VERSION_DATA" | jq -r . > "$VERSION_FILE"
        echo "版本文件已更新: $VERSION_FILE"
        
        # 7. 复制APK文件到目标仓库
        mkdir -p "$TARGET_DIR/apk"
        
        if [ "$NEED_UPDATE_STABLE" -eq 1 ]; then
          cp "$WORK_DIR/$STABLE_APK_NAME" "$TARGET_DIR/$STABLE_TARGET_PATH"
          echo "电视版APK已复制到: $TARGET_DIR/$STABLE_TARGET_PATH"
        fi
        
        if [ "$NEED_UPDATE_PRE" -eq 1 ]; then
          cp "$WORK_DIR/$PRE_RELEASE_APK_NAME" "$TARGET_DIR/$PRE_RELEASE_TARGET_PATH"
          echo "手机版APK已复制到: $TARGET_DIR/$PRE_RELEASE_TARGET_PATH"
        fi
        
        # 8. 提交和推送更改
        cd "$TARGET_DIR"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        # 添加更改的文件
        git add "$VERSION_FILE"
        if [ "$NEED_UPDATE_STABLE" -eq 1 ]; then
          git add "$STABLE_TARGET_PATH"
        fi
        if [ "$NEED_UPDATE_PRE" -eq 1 ]; then
          git add "$PRE_RELEASE_TARGET_PATH"
        fi
        
        # 检查是否有更改需要提交
        if git diff-index --quiet HEAD --; then
          echo "没有检测到文件更改，跳过提交"
          exit 0
        fi

        # 构建提交信息
        COMMIT_MESSAGE="🔄 APK同步更新"
        if [ "$NEED_UPDATE_STABLE" -eq 1 ]; then
          COMMIT_MESSAGE+=" | 电视版:$STABLE_VERSION"
        fi
        if [ "$NEED_UPDATE_PRE" -eq 1 ]; then
          COMMIT_MESSAGE+=" | 手机版:$PRE_RELEASE_VERSION"
        fi
        COMMIT_MESSAGE+=" [自动同步]"
        
        echo "提交信息: $COMMIT_MESSAGE"
        git commit -m "$COMMIT_MESSAGE"
        
        # 推送更改（带重试机制）
        echo "推送更改到仓库..."
        for i in {1..3}; do
          echo "尝试 $i/3: 拉取远程最新更改..."
          if git pull --rebase origin main; then
            echo "拉取成功，尝试推送..."
            if git push origin main; then
              echo "推送成功!"
              break
            else
              echo "推送失败，等待10秒后重试..."
              sleep 10
            fi
          else
            echo "拉取失败，等待10秒后重试..."
            sleep 10
          fi
        done
        
        if [ $? -ne 0 ]; then
          echo "错误: 经过3次尝试后仍无法推送更改"
          exit 1
        fi

        # 9. 最终验证
        echo "=== 同步完成验证 ==="
        if [ "$NEED_UPDATE_STABLE" -eq 1 ]; then
          if [ -f "$TARGET_DIR/$STABLE_TARGET_PATH" ]; then
            echo "✅ 电视版APK同步成功"
          else
            echo "❌ 电视版APK同步后验证失败"
            exit 1
          fi
        fi
        
        if [ "$NEED_UPDATE_PRE" -eq 1 ]; then
          if [ -f "$TARGET_DIR/$PRE_RELEASE_TARGET_PATH" ]; then
            echo "✅ 手机版APK同步成功"
          else
            echo "❌ 手机版APK同步后验证失败"
            exit 1
          fi
        fi
        
        echo "🎉 APK同步任务完成"

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v3
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          try {
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🚨 APK同步失败！工作流运行: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            } else {
              const issueTitle = "APK同步失败通知";
              const issueBody = `### 🚨 APK同步失败\n\n` +
                               `**工作流**: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n` +
                               `**失败时间**: ${new Date().toISOString()}\n\n` +
                               `请检查工作流日志以获取详细信息。`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody
              });
            }
          } catch (error) {
            console.error('通知失败:', error);
            core.warning('无法发送通知，请手动检查工作流失败情况');
          }

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "OK APK Sync from Source Repository"
          repository: ${{ github.repository }}