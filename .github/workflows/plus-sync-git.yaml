name: Plus APK Download and Sync

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository with LFS
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Setup Git LFS
      run: |
        git lfs install
        git lfs track "apk/*.apk"
        git add .gitattributes
        if [ -n "$(git status --porcelain .gitattributes)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"
          git commit -m "Add LFS tracking for APK files"
          git push origin main
        fi

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@users.noreply.github.com"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget python3-pip
        
        # 安装最新版 cloudscraper 和依赖
        pip install --upgrade pip
        pip install cloudscraper requests

    - name: Download and process APK
      env:
        APK_NAME: "plus_mod.apk"
        DOWNLOAD_URL: "https://leeapk.com/plus-messenger-mod-apk/download/"
      run: |
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 使用cloudscraper绕过Cloudflare获取页面
        echo "使用cloudscraper绕过Cloudflare获取页面..."
        cat > "$WORK_DIR/get_page.py" <<EOL
        import cloudscraper
        import sys
        
        scraper = cloudscraper.create_scraper()
        try:
            response = scraper.get(sys.argv[1])
            if response.status_code == 200:
                print(response.text)
            else:
                print(f"错误: 状态码 {response.status_code}", file=sys.stderr)
                sys.exit(1)
        except Exception as e:
            print(f"错误: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOL
        
        # 运行Python脚本获取页面
        DOWNLOAD_PAGE=$(python3 "$WORK_DIR/get_page.py" "$DOWNLOAD_URL")
        
        # 检查页面是否有效
        if [ -z "$DOWNLOAD_PAGE" ]; then
          echo "错误: 无法获取下载页面"
          exit 1
        fi
        
        # 保存页面用于调试
        echo "$DOWNLOAD_PAGE" > "$WORK_DIR/download_page.html"
        echo "成功获取页面内容 (长度: ${#DOWNLOAD_PAGE} 字符)"
        
        # 提取APK链接
        echo "尝试提取APK链接..."
        APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'href="[^"]*id="download_button"[^"]*"' | cut -d'"' -f2)
        
        if [ -z "$APK_LINK" ]; then
          APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'https://dl\.leeapk\.com[^"]*\.apk' | head -1)
        fi
        
        if [ -z "$APK_LINK" ]; then
          APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'https://[^"]*Plus_Messenger[^"]*\.apk' | head -1)
        fi
        
        if [ -z "$APK_LINK" ]; then
          echo "错误: 无法提取APK链接"
          echo "页面内容前200字节:"
          head -c 200 "$WORK_DIR/download_page.html"
          exit 1
        fi
        
        echo "提取到APK链接: $APK_LINK"

        # 从链接提取主版本号
        FILENAME=$(basename "$APK_LINK")
        VERSION=$(echo "$FILENAME" | sed -n 's/.*Plus_Messenger_v\{0,1\}\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        
        if [ -z "$VERSION" ]; then
          # 如果无法从URL提取版本，使用当前日期时间作为版本号
          VERSION=$(date +%Y%m%d%H%M)
          echo "警告: 无法提取版本号，使用日期替代: $VERSION"
        fi
        
        echo "主版本号: $VERSION"
        
        # 获取当前日期（北京时间）
        CURRENT_DATE=$(TZ=Asia/Shanghai date +"%Y-%m-%d")
        echo "当前日期: $CURRENT_DATE"

        # 读取版本文件
        VERSION_FILE="version.txt"
        if [ -f "$VERSION_FILE" ]; then
          CURRENT_VERSION_JSON=$(cat "$VERSION_FILE")
        else
          CURRENT_VERSION_JSON="{}"
        fi

        # 获取当前版本值
        CURRENT_VALUE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$APK_NAME\"")
        CURRENT_VERSION=""
        if [ "$CURRENT_VALUE" != "null" ] && [ -n "$CURRENT_VALUE" ]; then
          IFS=',' read -ra parts <<< "$CURRENT_VALUE"
          CURRENT_VERSION="${parts[0]}"
        fi

        # 移除当前版本号中的v前缀
        CURRENT_VERSION_NO_V=${CURRENT_VERSION#v}

        echo "当前版本: $CURRENT_VERSION_NO_V"
        echo "新版本: $VERSION"

        # 检查是否需要更新
        NEED_UPDATE=false

        if [ "$CURRENT_VALUE" == "null" ] || [ -z "$CURRENT_VALUE" ]; then
          echo "版本文件中不存在该APK记录，需要更新"
          NEED_UPDATE=true
        
        elif [ "$VERSION" != "$CURRENT_VERSION_NO_V" ]; then
          echo "发现新版本，需要更新"
          NEED_UPDATE=true
        
        elif [ ! -f "apk/$APK_NAME" ]; then
          echo "APK文件不存在，需要重新上传"
          NEED_UPDATE=true
        else
          # 检查文件大小是否合理
          if [ -f "apk/$APK_NAME" ]; then
            FILE_SIZE=$(stat -c%s "apk/$APK_NAME")
            if [ "$FILE_SIZE" -lt 50000000 ]; then  # 小于50MB视为无效
              echo "现有文件大小($FILE_SIZE)过小，需要重新下载"
              NEED_UPDATE=true
            else
              echo "版本相同且文件存在，无需更新"
            fi
          else
            echo "版本相同且文件存在，无需更新"
          fi
        fi

        if [ "$NEED_UPDATE" = false ]; then
          echo "无需更新，退出"
          exit 0
        fi

        # 使用cloudscraper下载文件
        echo "正在使用cloudscraper下载APK文件..."
        cat > "$WORK_DIR/download_file.py" <<EOL
        import cloudscraper
        import sys
        import os
        
        scraper = cloudscraper.create_scraper()
        try:
            response = scraper.get(sys.argv[1], stream=True)
            if response.status_code != 200:
                print(f"错误: 下载失败，状态码 {response.status_code}", file=sys.stderr)
                sys.exit(1)
                
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(sys.argv[2], 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        # 每下载5MB打印一次进度
                        if total_size > 0 and downloaded % (5 * 1024 * 1024) == 0:
                            percent = (downloaded / total_size) * 100
                            print(f"下载进度: {percent:.1f}% ({downloaded}/{total_size} 字节)")
            
            print(f"下载完成: {downloaded} 字节")
            
        except Exception as e:
            print(f"下载错误: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOL
        
        # 运行下载脚本
        python3 "$WORK_DIR/download_file.py" "$APK_LINK" "$WORK_DIR/temp.apk"
        
        # 检查文件大小是否合理
        if [ ! -f "$WORK_DIR/temp.apk" ]; then
          echo "错误: APK下载失败 - 文件不存在"
          exit 1
        fi
        
        FILE_SIZE=$(wc -c < "$WORK_DIR/temp.apk")
        if [ "$FILE_SIZE" -lt 50000000 ]; then  # 小于50MB视为无效
          echo "错误: 下载的文件大小($FILE_SIZE 字节)过小，可能是无效文件"
          echo "文件内容类型:"
          file "$WORK_DIR/temp.apk"
          echo "文件内容前100字节:"
          head -c 100 "$WORK_DIR/temp.apk" | hexdump -C
          exit 1
        fi

        # 创建apk目录
        mkdir -p apk

        # 保存当前版本
        cp "$WORK_DIR/temp.apk" "apk/$APK_NAME"
        echo "已保存当前版本: apk/$APK_NAME (大小: $FILE_SIZE 字节)"

        # 更新版本文件
        NEW_VALUE="v$VERSION,$CURRENT_DATE"
        NEW_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq --arg key "$APK_NAME" --arg value "$NEW_VALUE" '.[$key] = $value')
        echo "$NEW_VERSION_JSON" > "$VERSION_FILE"
        echo "更新版本文件: $VERSION_FILE"

        # 添加文件到Git
        git add apk/ "$VERSION_FILE" .gitattributes

        # 提交前先拉取最新更改
        echo "拉取远程最新更改..."
        git config pull.rebase true
        git pull origin main
        
        # 提交更改
        git commit -m "更新Plus Messenger: v$VERSION ($CURRENT_DATE)"
        
        # 推送更改
        echo "推送更改到远程仓库..."
        git push origin main

        echo "同步完成! 新版本: v$VERSION, 日期: $CURRENT_DATE"

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Plus APK Download and Sync"
          repository: ${{ github.repository }}