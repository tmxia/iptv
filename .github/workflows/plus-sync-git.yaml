name: Plus APK Download and Sync

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于缓存的锁机制
    - name: Acquire Repository Lock 🔒
      id: lock
      run: |
        # 创建锁文件路径
        LOCK_DIR="$GITHUB_WORKSPACE/.lock"
        mkdir -p "$LOCK_DIR"
        LOCK_FILE="$LOCK_DIR/repo-lock"
        
        # 尝试获取锁
        for i in {1..10}; do
          if [ -f "$LOCK_FILE" ]; then
            echo "锁已被占用，等待重试 ($i/10)..."
            sleep 30
          else
            # 创建锁文件
            touch "$LOCK_FILE"
            echo "lock-acquired=true" >> $GITHUB_OUTPUT
            echo "成功获取锁"
            exit 0
          fi
        done
        
        echo "错误: 无法在5分钟内获取锁"
        exit 1

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@users.noreply.github.com"
        git config pull.rebase true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget python3-pip
        pip install --upgrade pip
        pip install cloudscraper requests beautifulsoup4

    - name: Download and process APK
      env:
        APK_NAME: "plus_mod.apk"
        DOWNLOAD_URL: "https://leeapk.com/plus-messenger-mod-apk/download/"
      run: |
        # 1. 确保获取最新代码
        echo "拉取远程最新更改..."
        git pull origin main
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 使用cloudscraper绕过Cloudflare获取页面
        echo "获取下载页面并提取信息..."
        cat > "$WORK_DIR/extract_info.py" <<EOL
        import cloudscraper
        import re
        import sys
        from bs4 import BeautifulSoup
        from datetime import datetime
        
        def extract_info(url):
            scraper = cloudscraper.create_scraper()
            try:
                response = scraper.get(url)
                if response.status_code != 200:
                    print(f"错误: 获取页面失败，状态码 {response.status_code}", file=sys.stderr)
                    sys.exit(1)
                
                content = response.text
                
                # 提取APK链接
                apk_link = None
                soup = BeautifulSoup(content, 'html.parser')
                download_button = soup.find('a', id='download_button')
                if download_button and download_button.has_attr('href'):
                    apk_link = download_button['href']
                
                # 如果没有找到下载按钮，尝试备用方法
                if not apk_link:
                    apk_link_match = re.search(r'href="(https://dl\.leeapk\.com[^"]+\.apk)"', content)
                    if apk_link_match:
                        apk_link = apk_link_match.group(1)
                
                # 提取发布日期
                release_date = None
                date_pattern = r"Download Plus Messenger For Android\s*([A-Za-z]+\s\d{1,2},\s\d{4})"
                date_match = re.search(date_pattern, content)
                if date_match:
                    raw_date = date_match.group(1)
                    try:
                        # 转换日期格式
                        date_obj = datetime.strptime(raw_date, "%B %d, %Y")
                        release_date = date_obj.strftime("%Y-%m-%d")
                    except Exception as e:
                        print(f"日期转换错误: {str(e)}")
                
                return {
                    "apk_link": apk_link,
                    "release_date": release_date
                }
                
            except Exception as e:
                print(f"错误: {str(e)}", file=sys.stderr)
                sys.exit(1)
        
        if __name__ == "__main__":
            if len(sys.argv) != 2:
                print("用法: python extract_info.py <url>", file=sys.stderr)
                sys.exit(1)
            
            info = extract_info(sys.argv[1])
            print(f"APK_LINK={info['apk_link']}")
            print(f"RELEASE_DATE={info['release_date']}")
        EOL
        
        # 运行Python脚本提取信息
        EXTRACTED_INFO=$(python3 "$WORK_DIR/extract_info.py" "$DOWNLOAD_URL")
        if [ $? -ne 0 ]; then
          echo "提取信息失败"
          exit 1
        fi
        
        # 解析提取的信息
        APK_LINK=$(echo "$EXTRACTED_INFO" | grep 'APK_LINK=' | cut -d'=' -f2)
        RELEASE_DATE=$(echo "$EXTRACTED_INFO" | grep 'RELEASE_DATE=' | cut -d'=' -f2)
        
        if [ -z "$APK_LINK" ]; then
          echo "错误: 无法提取APK链接"
          exit 1
        fi
        
        echo "提取到APK链接: $APK_LINK"
        echo "提取到发布日期: ${RELEASE_DATE:-未找到}"
        
        # 如果未提取到发布日期，使用当前日期（北京时间）
        if [ -z "$RELEASE_DATE" ]; then
          RELEASE_DATE=$(TZ=Asia/Shanghai date +"%Y-%m-%d")
          echo "警告: 使用当前日期作为发布日期: $RELEASE_DATE"
        fi

        # 从链接提取主版本号
        FILENAME=$(basename "$APK_LINK")
        VERSION=$(echo "$FILENAME" | sed -n 's/.*Plus_Messenger_v\{0,1\}\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        
        if [ -z "$VERSION" ]; then
          VERSION=$(date +%Y%m%d%H%M)
          echo "警告: 使用日期作为版本号: $VERSION"
        fi
        
        echo "版本号: $VERSION"
        
        # 读取版本文件
        VERSION_FILE="version.txt"
        if [ -f "$VERSION_FILE" ]; then
          CURRENT_VERSION_JSON=$(cat "$VERSION_FILE")
        else
          CURRENT_VERSION_JSON="{}"
        fi

        # 获取当前版本值
        CURRENT_VALUE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$APK_NAME\"")
        CURRENT_VERSION=""
        if [ "$CURRENT_VALUE" != "null" ] && [ -n "$CURRENT_VALUE" ]; then
          IFS=',' read -ra parts <<< "$CURRENT_VALUE"
          CURRENT_VERSION="${parts[0]}"
        fi

        # 移除当前版本号中的v前缀
        CURRENT_VERSION_NO_V=${CURRENT_VERSION#v}

        echo "当前版本: $CURRENT_VERSION_NO_V"
        echo "新版本: $VERSION"

        # 检查是否需要更新
        NEED_UPDATE=false

        if [ "$CURRENT_VALUE" == "null" ] || [ -z "$CURRENT_VALUE" ]; then
          echo "需要更新: 版本记录不存在"
          NEED_UPDATE=true
        
        elif [ "$VERSION" != "$CURRENT_VERSION_NO_V" ]; then
          echo "需要更新: 发现新版本 ($CURRENT_VERSION_NO_V → $VERSION)"
          NEED_UPDATE=true
        
        elif [ ! -f "apk/$APK_NAME" ]; then
          echo "需要更新: APK文件不存在"
          NEED_UPDATE=true
        else
          echo "无需更新: 版本相同且文件存在"
        fi

        if [ "$NEED_UPDATE" = false ]; then
          echo "无需更新，退出"
          exit 0
        fi

        # 使用cloudscraper下载文件
        echo "正在下载APK文件..."
        cat > "$WORK_DIR/download_file.py" <<EOL
        import cloudscraper
        import sys
        
        scraper = cloudscraper.create_scraper()
        try:
            response = scraper.get(sys.argv[1], stream=True)
            if response.status_code != 200:
                print(f"错误: 下载失败，状态码 {response.status_code}", file=sys.stderr)
                sys.exit(1)
                
            with open(sys.argv[2], 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            print(f"下载完成")
            
        except Exception as e:
            print(f"下载错误: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOL
        
        # 运行下载脚本
        python3 "$WORK_DIR/download_file.py" "$APK_LINK" "$WORK_DIR/temp.apk"
        if [ $? -ne 0 ]; then
          echo "下载APK失败"
          exit 1
        fi
        
        # 检查文件大小是否合理
        if [ ! -f "$WORK_DIR/temp.apk" ]; then
          echo "错误: APK下载失败 - 文件不存在"
          exit 1
        fi
        
        FILE_SIZE=$(wc -c < "$WORK_DIR/temp.apk")
        if [ "$FILE_SIZE" -lt 50000000 ]; then
          echo "错误: 下载的文件大小($FILE_SIZE 字节)过小"
          exit 1
        fi

        # 创建apk目录
        mkdir -p apk

        # 保存当前版本
        cp "$WORK_DIR/temp.apk" "apk/$APK_NAME"
        echo "已保存APK文件 (大小: $FILE_SIZE 字节)"

        # 更新版本文件
        NEW_VALUE="v$VERSION,$RELEASE_DATE"
        NEW_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq --arg key "$APK_NAME" --arg value "$NEW_VALUE" '.[$key] = $value')
        echo "$NEW_VERSION_JSON" > "$VERSION_FILE"
        echo "更新版本文件"

        # 添加文件到Git
        git add apk/ "$VERSION_FILE"

        # 检查是否有变更
        if [ -z "$(git status --porcelain)" ]; then
          echo "没有需要提交的变更"
          exit 0
        fi

        # 提交更改
        git commit -m "更新Plus Messenger: v$VERSION ($RELEASE_DATE)"
        
        # 推送更改
        echo "推送更改到远程仓库..."
        git push origin main

        echo "同步完成! 版本: v$VERSION, 日期: $RELEASE_DATE"

    - name: Release Repository Lock 🔓
      if: always()
      run: |
        # 释放锁
        LOCK_FILE="$GITHUB_WORKSPACE/.lock/repo-lock"
        if [ -f "$LOCK_FILE" ]; then
          rm -f "$LOCK_FILE"
          echo "锁已释放"
        else
          echo "锁文件不存在，无需释放"
        fi

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Plus APK Download and Sync"
          repository: ${{ github.repository }}