name: Plus APK Download and Sync

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository with LFS
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Setup Git LFS
      run: |
        git lfs install
        git lfs track "apk/*.apk"
        git add .gitattributes
        if [ -n "$(git status --porcelain .gitattributes)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"
          git commit -m "Add LFS tracking for APK files"
          git push origin main
        fi

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@users.noreply.github.com"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget

    - name: Download and process APK
      env:
        APK_NAME: "plus_mod.apk"
        DOWNLOAD_URL: "https://leeapk.com/plus-messenger-mod-apk/download/"
      run: |
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 获取下载页内容
        echo "正在解析下载页..."
        DOWNLOAD_PAGE=$(wget -qO- --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36" "$DOWNLOAD_URL")
        
        # 尝试多种方法提取APK链接
        echo "尝试提取APK链接..."
        APK_LINK=""
        
        # 方法1: 使用data-src属性
        APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'data-src="[^"]*' | cut -d'"' -f2 | grep -i 'plus_messenger.*\.apk' | head -1)
        
        # 方法2: 使用直接下载链接模式
        if [ -z "$APK_LINK" ]; then
          APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'https\?://[^"]*Plus_Messenger[^"]*\.apk' | head -1)
        fi
        
        # 方法3: 使用备用域名匹配
        if [ -z "$APK_LINK" ]; then
          APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'https\?://dl\.leeapk\.com[^"]*' | head -1)
        fi
        
        # 方法4: 使用类名匹配
        if [ -z "$APK_LINK" ]; then
          APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -o 'href="[^"]*download-button[^"]*"' | cut -d'"' -f2 | head -1)
        fi
        
        # 如果所有方法都失败，使用硬编码URL模式
        if [ -z "$APK_LINK" ]; then
          echo "警告: 无法从页面提取链接，使用硬编码模式"
          APK_LINK="https://dl.leeapk.com/uploads/Plus_Messenger_latest.apk"
        fi
        
        echo "提取到APK链接: $APK_LINK"

        # 从链接提取主版本号
        FILENAME=$(basename "$APK_LINK")
        VERSION=$(echo "$FILENAME" | sed -n 's/.*Plus_Messenger_v\{0,1\}\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        
        if [ -z "$VERSION" ]; then
          echo "警告: 无法提取版本号，使用日期替代"
          VERSION=$(date +%Y%m%d%H%M)
        fi
        
        echo "主版本号: $VERSION"
        
        # 获取当前日期（北京时间）
        CURRENT_DATE=$(TZ=Asia/Shanghai date +"%Y-%m-%d")
        echo "当前日期: $CURRENT_DATE"

        # 读取版本文件
        VERSION_FILE="version.txt"
        if [ -f "$VERSION_FILE" ]; then
          CURRENT_VERSION_JSON=$(cat "$VERSION_FILE")
        else
          CURRENT_VERSION_JSON="{}"
        fi

        # 获取当前版本值
        CURRENT_VALUE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$APK_NAME\"")
        CURRENT_VERSION=""
        if [ "$CURRENT_VALUE" != "null" ] && [ -n "$CURRENT_VALUE" ]; then
          IFS=',' read -ra parts <<< "$CURRENT_VALUE"
          CURRENT_VERSION="${parts[0]}"
        fi

        # 移除当前版本号中的v前缀
        CURRENT_VERSION_NO_V=${CURRENT_VERSION#v}

        echo "当前版本: $CURRENT_VERSION_NO_V"
        echo "新版本: $VERSION"

        # 检查是否需要更新
        NEED_UPDATE=false

        if [ "$CURRENT_VALUE" == "null" ] || [ -z "$CURRENT_VALUE" ]; then
          echo "版本文件中不存在该APK记录，需要更新"
          NEED_UPDATE=true
        
        elif [ "$VERSION" != "$CURRENT_VERSION_NO_V" ]; then
          echo "发现新版本，需要更新"
          NEED_UPDATE=true
        
        elif [ ! -f "apk/$APK_NAME" ]; then
          echo "APK文件不存在，需要重新上传"
          NEED_UPDATE=true
        else
          echo "版本相同且文件存在，无需更新"
        fi

        if [ "$NEED_UPDATE" = false ]; then
          echo "无需更新，退出"
          exit 0
        fi

        # 使用更复杂的下载方法绕过403错误
        echo "正在下载APK文件(绕过403限制)..."
        
        # 方法1: 使用curl并添加完整的浏览器头信息
        if ! curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36" \
          -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
          -H "Accept-Language: en-US,en;q=0.5" \
          -H "Connection: keep-alive" \
          -H "Referer: $DOWNLOAD_URL" \
          -H "Upgrade-Insecure-Requests: 1" \
          -o "$WORK_DIR/temp.apk" \
          "$APK_LINK"; then
          
          # 方法2: 如果curl失败，使用wget并添加完整头信息
          echo "使用curl下载失败，尝试wget..."
          wget -U "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36" \
            --header="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
            --header="Accept-Language: en-US,en;q=0.5" \
            --header="Connection: keep-alive" \
            --header="Referer: $DOWNLOAD_URL" \
            --header="Upgrade-Insecure-Requests: 1" \
            -O "$WORK_DIR/temp.apk" \
            "$APK_LINK"
        fi
        
        if [ ! -f "$WORK_DIR/temp.apk" ]; then
          echo "错误: APK下载失败"
          exit 1
        fi

        # 创建apk目录
        mkdir -p apk

        # 保存当前版本
        cp "$WORK_DIR/temp.apk" "apk/$APK_NAME"
        echo "已保存当前版本: apk/$APK_NAME"

        # 更新版本文件
        NEW_VALUE="v$VERSION,$CURRENT_DATE"
        NEW_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq --arg key "$APK_NAME" --arg value "$NEW_VALUE" '.[$key] = $value')
        echo "$NEW_VERSION_JSON" > "$VERSION_FILE"
        echo "更新版本文件: $VERSION_FILE"

        # 添加文件到Git
        git add apk/ "$VERSION_FILE" .gitattributes

        # 提交并推送
        git commit -m "更新Plus Messenger: v$VERSION ($CURRENT_DATE)"
        git push origin main

        echo "同步完成! 新版本: v$VERSION, 日期: $CURRENT_DATE"

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Plus APK Download and Sync"
          repository: ${{ github.repository }}