name: Plus APK Download and Sync

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository with LFS
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Setup Git LFS
      run: |
        git lfs install
        git lfs track "apk/*.apk"
        git add .gitattributes
        # 确保.gitattributes被提交（如果之前没有）
        if [ -n "$(git status --porcelain .gitattributes)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"
          git commit -m "Add LFS tracking for APK files"
          git push origin main
        fi

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@users.noreply.github.com"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Download and process APK
      env:
        APK_NAME: "plus_mod.apk"
        DOWNLOAD_URL: "https://leeapk.com/plus-messenger-mod-apk/download/"
      run: |
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 获取下载页内容
        echo "正在解析下载页..."
        DOWNLOAD_PAGE=$(curl -sL "$DOWNLOAD_URL")

        # 提取最新版本APK链接
        APK_LINK=$(echo "$DOWNLOAD_PAGE" | grep -oP 'https?://[^"]+?Plus_Messenger[^"]+?\.apk(?=")' | head -1)
        if [ -z "$APK_LINK" ]; then
          echo "错误: 无法提取APK下载链接"
          exit 1
        fi
        echo "提取到APK链接: $APK_LINK"

        # 从URL提取原始文件名
        ORIG_FILENAME=$(basename "$APK_LINK")
        echo "原始文件名: $ORIG_FILENAME"

        # 从文件名提取主版本号（忽略后缀）
        if [[ "$ORIG_FILENAME" =~ Plus_Messenger_([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+) ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "提取的主版本号: $VERSION"
        else
          echo "警告: 无法从文件名提取主版本号 ($ORIG_FILENAME)"
          VERSION=$(date +%Y%m%d%H%M)
          echo "使用时间戳作为版本号: $VERSION"
        fi
        
        # 获取当前日期（北京时间）
        CURRENT_DATE=$(TZ=Asia/Shanghai date +"%Y-%m-%d")
        echo "当前日期: $CURRENT_DATE"

        # 读取版本文件
        VERSION_FILE="version.txt"
        if [ -f "$VERSION_FILE" ]; then
          CURRENT_VERSION_JSON=$(cat "$VERSION_FILE")
        else
          CURRENT_VERSION_JSON="{}"
        fi

        # 获取当前版本值
        CURRENT_VALUE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$APK_NAME\"")
        CURRENT_VERSION=""
        if [ "$CURRENT_VALUE" != "null" ] && [ -n "$CURRENT_VALUE" ]; then
          # 解析当前值（格式为：v<版本号>,<日期>）
          IFS=',' read -ra parts <<< "$CURRENT_VALUE"
          CURRENT_VERSION="${parts[0]}"   # 包含v前缀
        fi

        # 移除当前版本号中的v前缀（用于比较）
        CURRENT_VERSION_NO_V=${CURRENT_VERSION#v}

        echo "当前版本: $CURRENT_VERSION_NO_V"
        echo "新版本: $VERSION"

        # 检查是否需要更新
        NEED_UPDATE=false

        # 情况1: 版本文件中没有该APK的键值
        if [ "$CURRENT_VALUE" == "null" ] || [ -z "$CURRENT_VALUE" ]; then
          echo "版本文件中不存在该APK记录，需要更新"
          NEED_UPDATE=true
        
        # 情况2: 版本不同
        elif [ "$VERSION" != "$CURRENT_VERSION_NO_V" ]; then
          echo "发现新版本，需要更新"
          NEED_UPDATE=true
        
        # 情况3: 版本相同但文件不存在
        elif [ ! -f "apk/$APK_NAME" ]; then
          echo "APK文件不存在，需要重新上传"
          NEED_UPDATE=true
        else
          echo "版本相同且文件存在，无需更新"
        fi

        if [ "$NEED_UPDATE" = false ]; then
          echo "无需更新，退出"
          exit 0
        fi

        # 下载APK文件（如果需要更新）
        if [ ! -f "$WORK_DIR/temp.apk" ]; then
          echo "正在下载APK文件..."
          curl -L -o "$WORK_DIR/temp.apk" "$APK_LINK"
          if [ ! -f "$WORK_DIR/temp.apk" ]; then
            echo "错误: APK下载失败"
            exit 1
          fi
        fi

        # 创建apk目录（如果不存在）
        mkdir -p apk

        # 保存当前版本（固定文件名）
        cp "$WORK_DIR/temp.apk" "apk/$APK_NAME"
        echo "已保存当前版本: apk/$APK_NAME"

        # 更新版本文件
        NEW_VALUE="v$VERSION,$CURRENT_DATE"
        NEW_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq --arg key "$APK_NAME" --arg value "$NEW_VALUE" '.[$key] = $value')
        echo "$NEW_VERSION_JSON" > "$VERSION_FILE"
        echo "更新版本文件: $VERSION_FILE"

        # 添加文件到Git
        git add apk/ "$VERSION_FILE" .gitattributes

        # 提交并推送
        git commit -m "更新Plus Messenger: v$VERSION ($CURRENT_DATE)"
        git push origin main

        echo "同步完成! 新版本: v$VERSION, 日期: $CURRENT_DATE"

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Plus APK Download and Sync"
          repository: ${{ github.repository }}