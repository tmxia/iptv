name: TAuxiliary APK Sync

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */24 * * *'  # 每24小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install telethon pytz > /dev/null

    - name: Sync TAuxiliary APK
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - << "EOF"
        import os
        import re
        import json
        import sys
        import subprocess
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        CHANNEL = "TAuxiliary/3763"
        APK_FILE = "TAuxiliary.apk"
        VERSION_FILE = "version.txt"
        VERSION_KEY = "TAuxiliary.apk"
        
        def log(msg):
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}")
        
        def git_setup():
            """静默配置Git"""
            actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
            email = f"{actor}@users.noreply.github.com"
            subprocess.run(["git", "config", "user.name", actor], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(["git", "config", "user.email", email], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(["git", "pull", "origin", "main", "--rebase"], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        def git_commit_push():
            """静默提交更改"""
            subprocess.run(["git", "add", APK_FILE, VERSION_FILE], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # 检查是否有更改
            status = subprocess.run(["git", "status", "--porcelain"], 
                                   capture_output=True, text=True)
            if not status.stdout.strip():
                return False
            
            token = os.environ['GITHUB_TOKEN']
            repo_url = f"https://x-access-token:{token}@github.com/{os.environ['GITHUB_REPOSITORY']}.git"
            
            subprocess.run(["git", "commit", "-m", "Update TAuxiliary APK"], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(["git", "push", repo_url, "HEAD:main"], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return True
        
        def get_current_version():
            """获取当前版本信息"""
            if not os.path.exists(VERSION_FILE):
                return {}
            
            try:
                with open(VERSION_FILE, "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                return {}
        
        def extract_version(filename):
            """从文件名提取版本号"""
            match = re.search(r'TAuxiliary-([\d.]+)_[a-f0-9]+\.apk', filename)
            return f"v{match.group(1)}" if match else None
        
        async def main():
            """主同步逻辑"""
            # 初始化
            log("Starting TAuxiliary APK sync")
            git_setup()
            
            # 获取当前版本
            versions = get_current_version()
            current = versions.get(VERSION_KEY, "")
            if current:
                log(f"Current version: {current.split(',')[0]}")
            
            # 连接Telegram
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH']
            )
            
            try:
                await client.start()
                entity = await client.get_entity(CHANNEL)
                
                # 查找最新APK
                async for msg in client.iter_messages(entity, limit=10):
                    if msg.media and hasattr(msg.media, "document"):
                        for attr in msg.media.document.attributes:
                            if isinstance(attr, DocumentAttributeFilename):
                                filename = attr.file_name
                                if "TAuxiliary-" in filename and filename.endswith(".apk"):
                                    # 提取版本信息
                                    version = extract_version(filename) or f"v{datetime.now().strftime('%Y%m%d')}"
                                    date = msg.date.astimezone(pytz.timezone('Asia/Shanghai')).strftime("%Y-%m-%d")
                                    new_value = f"{version},{date}"
                                    
                                    # 检查是否需要更新
                                    if new_value != current:
                                        # 下载APK
                                        log(f"Downloading new version: {version}")
                                        await client.download_media(msg, file=APK_FILE)
                                        
                                        # 更新版本文件
                                        versions[VERSION_KEY] = new_value
                                        with open(VERSION_FILE, "w") as f:
                                            json.dump(versions, f)
                                        
                                        # 提交更改
                                        if git_commit_push():
                                            log(f"Successfully updated to {version}")
                                        else:
                                            log("No changes to commit")
                                    else:
                                        log("Already on latest version")
                                    
                                    await client.disconnect()
                                    return 0
                
                log("No APK found in channel")
                return 0
            except Exception as e:
                log(f"Error: {str(e)}")
                return 1
        
        if __name__ == "__main__":
            import asyncio
            sys.exit(asyncio.run(main()))
        EOF

    - name: Release Repository Lock
      if: always()
      uses: softprops/turnstyle@v1
      with:
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚨 TAuxiliary同步失败！[查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })