name: TAuxiliary Sync from TELEGRAM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */24 * * *'  # ÊØè24Â∞èÊó∂ËøêË°å‰∏ÄÊ¨°
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 1200
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install telethon pytz

    - name: Run TAuxiliary Version Sync
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - << "EOF"
        import os
        import re
        import json
        import sys
        import subprocess
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # ÈÖçÁΩÆÂèÇÊï∞
        TELEGRAM_CHANNEL = "TAuxiliary"
        VERSION_FILE = "TAuxiliary.apk"
        MESSAGE_LIMIT = 15
        
        # ÈÖçÁΩÆÊó•Âøó
        def log(message):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{timestamp}] {message}")
        
        log("="*50 + "\nTAuxiliary ÁâàÊú¨ÂêåÊ≠•Â∑•ÂÖ∑ÂêØÂä®\n" + "="*50)
        
        def git_setup():
            """ÈÖçÁΩÆGitÁéØÂ¢É"""
            try:
                actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
                email = f"{actor}@users.noreply.github.com"
                
                subprocess.run(["git", "config", "user.name", actor], check=True)
                subprocess.run(["git", "config", "user.email", email], check=True)
                
                # ÊãâÂèñÊúÄÊñ∞Êõ¥Êîπ
                subprocess.run(["git", "pull", "origin", "main", "--rebase"], check=True)
                log("GitÈÖçÁΩÆÂÆåÊàê")
                return True
            except Exception as e:
                log(f"GitËÆæÁΩÆÂ§±Ë¥•: {str(e)}")
                return False
        
        def git_commit_push(message):
            """Êèê‰∫§Âπ∂Êé®ÈÄÅÊõ¥Êîπ"""
            try:
                # Ê∑ªÂä†Êõ¥Êîπ
                subprocess.run(["git", "add", VERSION_FILE], check=True)
                
                # Ê£ÄÊü•ÊòØÂê¶ÊúâÊõ¥Êîπ
                status = subprocess.run(["git", "status", "--porcelain"], 
                                       capture_output=True, text=True)
                if not status.stdout.strip():
                    log("Ê≤°ÊúâÊõ¥ÊîπÈúÄË¶ÅÊèê‰∫§")
                    return True
                
                # Êèê‰∫§
                subprocess.run(["git", "commit", "-m", message], check=True)
                
                # Êé®ÈÄÅ
                token = os.environ['GITHUB_TOKEN']
                repo_url = f"https://x-access-token:{token}@github.com/{os.environ['GITHUB_REPOSITORY']}.git"
                subprocess.run(["git", "push", repo_url, "HEAD:main"], check=True)
                log("Êé®ÈÄÅÊàêÂäü")
                return True
            except Exception as e:
                log(f"GitÊìç‰ΩúÂ§±Ë¥•: {str(e)}")
                return False
        
        def get_current_version():
            """Ëé∑ÂèñÂΩìÂâçÁâàÊú¨‰ø°ÊÅØ"""
            if not os.path.exists(VERSION_FILE):
                return {}
            
            try:
                with open(VERSION_FILE, "r") as f:
                    return json.load(f)
            except Exception:
                return {}
        
        def extract_version_info(filename):
            """‰ªéÊñá‰ª∂ÂêçÊèêÂèñÁâàÊú¨‰ø°ÊÅØ"""
            pattern = r"TAuxiliary-([\d.]+)_([a-f0-9]+)\.apk"
            match = re.match(pattern, filename)
            if match:
                return {
                    "version": match.group(1),
                    "commit_hash": match.group(2)
                }
            return None
        
        async def find_latest_release(client, entity):
            """Êü•ÊâæÊúÄÊñ∞ÁöÑÂèëÂ∏ÉÊ∂àÊÅØ"""
            async for msg in client.iter_messages(entity, limit=MESSAGE_LIMIT):
                if not (msg.media and hasattr(msg.media, "document")):
                    continue
                
                # Ê£ÄÊü•Êñá‰ª∂ÂêçÂ±ûÊÄß
                for attr in msg.media.document.attributes:
                    if not isinstance(attr, DocumentAttributeFilename):
                        continue
                    
                    filename = attr.file_name
                    version_info = extract_version_info(filename)
                    
                    if version_info:
                        return {
                            "filename": filename,
                            "version": version_info["version"],
                            "commit_hash": version_info["commit_hash"],
                            "date": msg.date.astimezone(pytz.timezone('Asia/Shanghai')).strftime("%Y-%m-%d")
                        }
            return None
        
        async def main_async():
            """ÂºÇÊ≠•‰∏ªÂáΩÊï∞"""
            # È™åËØÅÁéØÂ¢ÉÂèòÈáè
            required = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION']
            if missing := [var for var in required if not os.environ.get(var)]:
                log(f"ÈîôËØØ: Áº∫Â∞ëÁéØÂ¢ÉÂèòÈáè: {', '.join(missing)}")
                return 1
            
            # ËÆæÁΩÆGit
            if not git_setup():
                return 2
            
            # Ëé∑ÂèñÂΩìÂâçÁâàÊú¨
            current_version = get_current_version()
            if current_version:
                log(f"ÂΩìÂâçÁâàÊú¨: {current_version.get('version', 'Êú™Áü•')}")
                log(f"ÂΩìÂâçÊèê‰∫§ÂìàÂ∏å: {current_version.get('commit_hash', 'Êú™Áü•')}")
                log(f"ÊúÄÂêéÊõ¥Êñ∞: {current_version.get('date', 'Êú™Áü•')}")
            else:
                log("ÂΩìÂâçÊó†ÁâàÊú¨‰ø°ÊÅØ")
            
            # ËøûÊé•Telegram
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH']
            )
            
            try:
                await client.start()
                log(f"ËøûÊé•TelegramÈ¢ëÈÅì: {TELEGRAM_CHANNEL}")
                entity = await client.get_entity(TELEGRAM_CHANNEL)
                
                # Êü•ÊâæÊúÄÊñ∞ÂèëÂ∏É
                release = await find_latest_release(client, entity)
                if not release:
                    log("Êú™ÊâæÂà∞TAuxiliaryÂèëÂ∏ÉÊ∂àÊÅØ")
                    return 0
                
                log(f"ÂèëÁé∞Êñ∞ÁâàÊú¨: {release['version']}")
                log(f"Êèê‰∫§ÂìàÂ∏å: {release['commit_hash']}")
                log(f"ÂèëÂ∏ÉÊó•Êúü: {release['date']}")
                
                # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞
                if (current_version.get("version") == release["version"] and 
                    current_version.get("commit_hash") == release["commit_hash"]):
                    log("ÂΩìÂâçÂ∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨ÔºåÊó†ÈúÄÊõ¥Êñ∞")
                    return 0
                
                # Êõ¥Êñ∞ÁâàÊú¨Êñá‰ª∂
                with open(VERSION_FILE, "w") as f:
                    json.dump(release, f, indent=2)
                
                # Êèê‰∫§Êõ¥Êîπ
                commit_message = f"Êõ¥Êñ∞TAuxiliaryÁâàÊú¨: {release['version']} ({release['commit_hash']})"
                if git_commit_push(commit_message):
                    log("ÂêåÊ≠•ÊàêÂäü!")
                else:
                    log("Êèê‰∫§Â§±Ë¥•")
                    return 3
                
                return 0
            except Exception as e:
                log(f"Â§ÑÁêÜÈîôËØØ: {str(e)}")
                return 4
            finally:
                await client.disconnect()
        
        if __name__ == "__main__":
            import asyncio
            sys.exit(asyncio.run(main_async()))
        EOF

    - name: Release Repository Lock
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üö® TAuxiliaryÁâàÊú¨ÂêåÊ≠•Â§±Ë¥•ÔºÅÂ∑•‰ΩúÊµÅËøêË°åËØ¶ÊÉÖ: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "TAuxiliary Sync from TELEGRAM"
          repository: ${{ github.repository }}