name: Hiddify APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */48 * * *'  # 每48小时运行一次
  workflow_dispatch:

concurrency:
  group: sync-apk-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整历史记录

    - name: Setup Git identity
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Run APK sync script
      env:
        SOURCE_REPO: "hiddify/hiddify-app"
        APK_PATTERN: "Android-arm64.apk"
        STABLE_KEY_NAME: "hiddify.apk"
        PRE_RELEASE_KEY_NAME: "hiddify-beta.apk"
      run: |
        # 从环境变量获取配置
        STABLE_TARGET_FILENAME="apk/$STABLE_KEY_NAME"
        PRE_RELEASE_TARGET_FILENAME="apk/$PRE_RELEASE_KEY_NAME"
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 确保apk目录存在
        mkdir -p apk

        # 获取最新发布的APK下载链接
        echo "获取最新发布版本信息..."

        # 获取所有发布（包括预发行版）
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ $? -ne 0 ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取最新稳定版
        LATEST_STABLE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == false)) | sort_by(.published_at) | reverse | .[0]')
        if [ -z "$LATEST_STABLE_RELEASE" ] || [ "$LATEST_STABLE_RELEASE" = "null" ]; then
          echo "错误: 无法提取稳定版发布信息"
          exit 1
        fi
        STABLE_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.tag_name')
        # 提取发布日期并转换为北京时间 (YYYY-MM-DD)
        STABLE_PUBLISHED_AT=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.published_at')
        STABLE_DATE=$(TZ=UTC date -d "$STABLE_PUBLISHED_AT" +'%Y-%m-%d')
        echo "源仓库最新稳定版: $STABLE_VERSION (发布于: $STABLE_DATE)"

        # 提取最新预发行版
        LATEST_PRE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == true)) | sort_by(.published_at) | reverse | .[0]')
        if [ -z "$LATEST_PRE_RELEASE" ] || [ "$LATEST_PRE_RELEASE" = "null" ]; then
          echo "警告: 无法提取预发行版发布信息，跳过预发行版同步"
          SYNC_PRE_RELEASE=false
        else
          PRE_RELEASE_VERSION=$(echo "$LATEST_PRE_RELEASE" | jq -r '.tag_name')
          # 提取发布日期并转换为北京时间 (YYYY-MM-DD)
          PRE_RELEASE_PUBLISHED_AT=$(echo "$LATEST_PRE_RELEASE" | jq -r '.published_at')
          PRE_RELEASE_DATE=$(TZ=UTC date -d "$PRE_RELEASE_PUBLISHED_AT" +'%Y-%m-%d')
          echo "源仓库最新预发行版: $PRE_RELEASE_VERSION (发布于: $PRE_RELEASE_DATE)"
          SYNC_PRE_RELEASE=true
        fi

        # 检查本地版本文件
        VERSION_FILE="version.txt"
        CURRENT_VERSION_DATA="{}"
        if [ -f "$VERSION_FILE" ]; then
          echo "找到本地版本文件"
          CURRENT_VERSION_DATA=$(cat "$VERSION_FILE" | jq . 2>/dev/null || echo "{}")
        else
          echo "创建新的版本文件"
          echo "{}" > "$VERSION_FILE"
        fi

        # 初始化当前版本变量
        CURRENT_STABLE_VERSION=$(echo "$CURRENT_VERSION_DATA" | jq -r ".\"$STABLE_KEY_NAME\" // \"\"" | cut -d, -f1)
        CURRENT_STABLE_DATE=$(echo "$CURRENT_VERSION_DATA" | jq -r ".\"$STABLE_KEY_NAME\" // \"\"" | cut -d, -f2)
        CURRENT_PRE_RELEASE_VERSION=$(echo "$CURRENT_VERSION_DATA" | jq -r ".\"$PRE_RELEASE_KEY_NAME\" // \"\"" | cut -d, -f1)
        CURRENT_PRE_RELEASE_DATE=$(echo "$CURRENT_VERSION_DATA" | jq -r ".\"$PRE_RELEASE_KEY_NAME\" // \"\"" | cut -d, -f2)

        echo "当前稳定版版本: $CURRENT_STABLE_VERSION (日期: $CURRENT_STABLE_DATE)"
        echo "当前预发行版版本: $CURRENT_PRE_RELEASE_VERSION (日期: $CURRENT_PRE_RELEASE_DATE)"

        # 函数：检查并下载APK
        check_and_download_apk() {
          local release_json="$1"
          local target_filename="$2"
          local key_name="$3"
          local current_version="$4"
          
          # 检查是否需要更新
          local latest_version=$(echo "$release_json" | jq -r '.tag_name')
          
          # 检查本地APK文件是否存在
          echo "检查本地APK文件是否存在: $target_filename..."
          local apk_exists=false
          if [ -f "$target_filename" ]; then
            echo "本地存在APK文件: $target_filename"
            apk_exists=true
          else
            echo "本地不存在APK文件: $target_filename"
          fi
          
          # 检查是否需要更新
          local need_update=false
          
          # 情况1: 版本号不匹配
          if [ "$latest_version" != "$current_version" ]; then
            echo "发现新版本: $latest_version (当前: $current_version)"
            need_update=true
          # 情况2: 版本号匹配但文件不存在
          elif [ "$apk_exists" = false ]; then
            echo "版本号匹配但APK文件不存在，需要重新下载"
            need_update=true
          # 情况3: 版本号匹配但版本文件无效
          elif [ -z "$current_version" ]; then
            echo "版本文件无效，需要更新"
            need_update=true
          else
            echo "版本相同 ($latest_version) 且APK文件存在，无需更新"
          fi
          
          # 如果需要更新，下载APK
          if [ "$need_update" = true ]; then
            # 查找匹配的APK文件
            local download_url=$(echo "$release_json" | jq -r '.assets[] | select(.name | contains("'$APK_PATTERN'")) | .browser_download_url' | head -1)
            
            if [ -z "$download_url" ]; then
              echo "错误: 未找到匹配的APK文件"
              return 1
            fi
            
            echo "下载APK: $download_url"
            curl -sL "$download_url" -o "$target_filename"
            if [ ! -f "$target_filename" ]; then
              echo "错误: APK下载失败"
              return 1
            fi
            
            # 返回需要更新的标志
            return 1  # 1表示需要更新
          else
            # 不需要更新 - 返回0表示成功
            return 0
          fi
        }

        # 处理稳定版
        STABLE_NEED_UPDATE=false
        echo "===== 处理稳定版 ====="
        check_and_download_apk "$LATEST_STABLE_RELEASE" "$STABLE_TARGET_FILENAME" "$STABLE_KEY_NAME" "$CURRENT_STABLE_VERSION"
        STABLE_RESULT=$?
        if [ $STABLE_RESULT -eq 1 ]; then
          STABLE_NEED_UPDATE=true
          NEW_STABLE_VERSION="$STABLE_VERSION"
          NEW_STABLE_DATE="$STABLE_DATE"
          echo "稳定版需要更新"
        elif [ $STABLE_RESULT -eq 0 ]; then
          NEW_STABLE_VERSION="$CURRENT_STABLE_VERSION"
          NEW_STABLE_DATE="$CURRENT_STABLE_DATE"
          echo "稳定版无需更新"
        else
          echo "错误: 稳定版处理失败"
          exit 1
        fi

        # 处理预发行版
        PRE_RELEASE_NEED_UPDATE=false
        if [ "$SYNC_PRE_RELEASE" = true ]; then
          echo "===== 处理预发行版 ====="
          check_and_download_apk "$LATEST_PRE_RELEASE" "$PRE_RELEASE_TARGET_FILENAME" "$PRE_RELEASE_KEY_NAME" "$CURRENT_PRE_RELEASE_VERSION"
          PRE_RELEASE_RESULT=$?
          if [ $PRE_RELEASE_RESULT -eq 1 ]; then
            PRE_RELEASE_NEED_UPDATE=true
            NEW_PRE_RELEASE_VERSION="$PRE_RELEASE_VERSION"
            NEW_PRE_RELEASE_DATE="$PRE_RELEASE_DATE"
            echo "预发行版需要更新"
          elif [ $PRE_RELEASE_RESULT -eq 0 ]; then
            NEW_PRE_RELEASE_VERSION="$CURRENT_PRE_RELEASE_VERSION"
            NEW_PRE_RELEASE_DATE="$CURRENT_PRE_RELEASE_DATE"
            echo "预发行版无需更新"
          else
            echo "错误: 预发行版处理失败"
            exit 1
          fi
        else
          NEW_PRE_RELEASE_VERSION="$CURRENT_PRE_RELEASE_VERSION"
          NEW_PRE_RELEASE_DATE="$CURRENT_PRE_RELEASE_DATE"
          echo "跳过预发行版处理"
        fi

        # 更新版本数据（格式：版本号,日期）
        NEW_VERSION_DATA=$(echo "$CURRENT_VERSION_DATA" | jq \
            --arg stable_key "$STABLE_KEY_NAME" \
            --arg stable_value "$NEW_STABLE_VERSION,$NEW_STABLE_DATE" \
            --arg pre_key "$PRE_RELEASE_KEY_NAME" \
            --arg pre_value "$NEW_PRE_RELEASE_VERSION,$NEW_PRE_RELEASE_DATE" \
            '.[$stable_key] = $stable_value | .[$pre_key] = $pre_value')
            
        NEW_VERSION_CONTENT=$(echo "$NEW_VERSION_DATA" | jq -r .)

        echo "更新后的版本文件内容:"
        echo "$NEW_VERSION_CONTENT"
        
        # 检查版本内容是否变化
        echo "$NEW_VERSION_CONTENT" > "$WORK_DIR/new_version.txt"
        VERSION_CHANGED=true
        if [ -f "$VERSION_FILE" ]; then
          if diff -q "$WORK_DIR/new_version.txt" "$VERSION_FILE" >/dev/null; then
            echo "版本文件内容未变化"
            VERSION_CHANGED=false
          fi
        fi
        
        if $VERSION_CHANGED; then
          echo "$NEW_VERSION_CONTENT" > version.txt
        fi

        # 检查是否有需要提交的更改
        CHANGES_DETECTED=false
        if [ "$STABLE_NEED_UPDATE" = true ] || [ "$PRE_RELEASE_NEED_UPDATE" = true ]; then
          CHANGES_DETECTED=true
        fi
        
        if $VERSION_CHANGED; then
          CHANGES_DETECTED=true
        fi

        # 提交并推送更改
        if [ "$CHANGES_DETECTED" = true ]; then
          echo "提交更改到Git仓库..."
          git add apk/* 
          
          if $VERSION_CHANGED; then
            git add version.txt
          fi
          
          git commit -m "更新APK: 稳定版=$NEW_STABLE_VERSION, 预发行版=$NEW_PRE_RELEASE_VERSION"
          
          # 重试推送机制
          MAX_RETRIES=3
          RETRY_DELAY=10
          for i in $(seq 1 $MAX_RETRIES); do
            echo "推送更改 (尝试 $i/$MAX_RETRIES)..."
            git pull --rebase origin $(git rev-parse --abbrev-ref HEAD)
            if git push origin $(git rev-parse --abbrev-ref HEAD); then
              echo "推送成功"
              break
            else
              echo "推送失败，等待重试..."
              sleep $RETRY_DELAY
            fi
            if [ $i -eq $MAX_RETRIES ]; then
              echo "错误: 推送失败，超过最大重试次数"
              exit 1
            fi
          done
        else
          echo "没有检测到更改，跳过提交"
        fi

        echo "同步完成! 状态: 成功"
        echo "稳定版: $STABLE_TARGET_FILENAME ($NEW_STABLE_VERSION, $NEW_STABLE_DATE)"
        if [ "$SYNC_PRE_RELEASE" = true ]; then
          echo "预发行版: $PRE_RELEASE_TARGET_FILENAME ($NEW_PRE_RELEASE_VERSION, $NEW_PRE_RELEASE_DATE)"
        fi
        
        exit 0

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Hiddify APK Sync from Source Repository"
          repository: ${{ github.repository }}
