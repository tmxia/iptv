name: TAuxiliary APK Sync from TELEGRAM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install --upgrade telethon==1.34.0 pytz requests
        
        # 安装修复会话解析问题的必要依赖
        pip install cryptography cffi

    - name: Sync TAuxiliary APK
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        python - << "EOF"
        import os
        import re
        import json
        import sys
        import base64
        import requests
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        GROUP = "TAuxiliary"  # 群组用户名
        TOPIC_ID = 3763       # 话题ID
        APK_PATH = "apk/tauxiliary.apk"
        VERSION_FILE = "version.txt"
        VERSION_KEY = "tauxiliary.apk"
        API_BASE = "https://api.github.com"
        
        def log(msg):
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}")
        
        def github_api_file_exists(path):
            """检查文件是否存在"""
            token = os.environ['GITHUB_TOKEN']
            repo = os.environ['GITHUB_REPOSITORY']
            url = f"{API_BASE}/repos/{repo}/contents/{path}"
            headers = {"Authorization": f"Bearer {token}"}
            res = requests.get(url, headers=headers)
            return res.status_code == 200
        
        def github_api_upload(path, content, message):
            """使用GitHub API上传文件"""
            token = os.environ['GITHUB_TOKEN']
            repo = os.environ['GITHUB_REPOSITORY']
            url = f"{API_BASE}/repos/{repo}/contents/{path}"
            
            # 获取当前文件SHA（如果存在）
            headers = {
                "Authorization": f"Bearer {token}",
                "Accept": "application/vnd.github.v3+json"
            }
            res = requests.get(url, headers=headers)
            sha = res.json().get("sha", "") if res.status_code == 200 else ""
            
            # 准备上传数据 - 统一处理内容编码
            if isinstance(content, str):
                # 文本内容直接编码为base64
                encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")
            elif isinstance(content, bytes):
                # 二进制内容直接编码为base64
                encoded_content = base64.b64encode(content).decode("utf-8")
            else:
                log(f"Unsupported content type: {type(content)}")
                return False
                
            data = {
                "message": message,
                "content": encoded_content,
                "sha": sha
            }
            
            # 上传文件
            res = requests.put(url, headers=headers, json=data)
            if res.status_code in [200, 201]:
                log(f"Successfully uploaded {path}")
                return True
            else:
                log(f"Failed to upload {path}: {res.status_code} - {res.text}")
                return False
        
        async def main():
            """主同步逻辑"""
            log("Starting TAuxiliary APK sync")
            
            # 初始化版本信息
            versions = {}
            current = ""
            
            # 尝试获取当前版本信息
            try:
                token = os.environ['GITHUB_TOKEN']
                repo = os.environ['GITHUB_REPOSITORY']
                url = f"{API_BASE}/repos/{repo}/contents/{VERSION_FILE}"
                headers = {"Authorization": f"Bearer {token}"}
                res = requests.get(url, headers=headers)
                
                if res.status_code == 200:
                    content = base64.b64decode(res.json()["content"]).decode("utf-8")
                    versions = json.loads(content)
                    current = versions.get(VERSION_KEY, "")
                    log(f"Current version: {current.split(',')[0] if current else 'None'}")
                else:
                    log("No existing version file found")
            except Exception as e:
                log(f"Error getting version file: {str(e)}")
            
            # 检查APK文件是否存在
            apk_exists = github_api_file_exists(APK_PATH)
            log(f"APK file exists: {apk_exists}")
            
            # 连接Telegram - 添加详细的连接设置
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH'],
                connection_retries=5,
                request_retries=5,
                auto_reconnect=True,
                use_ipv6=False  # 强制使用IPv4连接
            )
            
            try:
                await client.start()
                log("Connected to Telegram")
                
                # 获取群组实体
                group = await client.get_entity(GROUP)
                
                # 查找话题中的最新APK
                found = False
                async for msg in client.iter_messages(group, reply_to=TOPIC_ID, limit=10):
                    if not msg.media or not hasattr(msg.media, "document"):
                        continue
                    
                    # 查找文件名属性
                    for attr in msg.media.document.attributes:
                        if not isinstance(attr, DocumentAttributeFilename):
                            continue
                        
                        filename = attr.file_name
                        if not filename.endswith(".apk"):
                            continue
                        
                        # 使用精确的正则表达式匹配文件名
                        match = re.search(r'TAuxiliary-([\d.]+)_([a-f0-9]+)\.apk$', filename)
                        if not match:
                            continue
                        
                        version = f"v{match.group(1)}"
                        commit_hash = match.group(2)
                        date = msg.date.astimezone(pytz.timezone('Asia/Shanghai')).strftime("%Y-%m-%d")
                        new_value = f"{version},{date}"
                        
                        # 检查是否需要更新（目标文件不存在或版本不匹配）
                        if not apk_exists or not current or new_value != current:
                            # 下载APK到内存
                            log(f"Downloading new version: {version}")
                            apk_content = await client.download_media(msg, file=bytes)
                            
                            # 上传APK文件
                            if github_api_upload(APK_PATH, apk_content, f"Update TAuxiliary APK to {version}"):
                                # 更新版本信息
                                versions[VERSION_KEY] = new_value
                                version_content = json.dumps(versions, indent=2)
                                
                                # 上传版本文件
                                github_api_upload(
                                    VERSION_FILE, 
                                    version_content,  # 直接传递字符串
                                    f"Update TAuxiliary version to {version}"
                                )
                                log(f"Successfully updated to {version}")
                        else:
                            log("Already on latest version")
                        
                        found = True
                        break
                    if found:
                        break
                
                if not found:
                    log("No valid TAuxiliary APK found in topic")
                return 0
            except Exception as e:
                log(f"Error: {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
            finally:
                await client.disconnect()
        
        if __name__ == "__main__":
            import asyncio
            sys.exit(asyncio.run(main()))
        EOF

    - name: Release Repository Lock
      if: always()
      uses: softprops/turnstyle@v1
      with:
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚨 TAuxiliary同步失败！[查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "TAuxiliary APK Sync from TELEGRAM"
          repository: ${{ github.repository }}