name: TAuxiliary APK Sync from TELEGRAM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install --upgrade telethon==1.34.0 pytz requests
        
        # 安装修复会话解析问题的必要依赖
        pip install cryptography cffi

    - name: Sync TAuxiliary APK
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_ACTOR: ${{ github.actor }}
      run: |
        # 配置Git用户信息
        git config --global user.name "github-actions"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        python - << "EOF"
        import os
        import re
        import json
        import sys
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        GROUP = "TAuxiliary"  # 群组用户名
        TOPIC_ID = 3763       # 话题ID
        APK_PATH = "apk/tauxiliary.apk"
        VERSION_FILE = "version.txt"
        VERSION_KEY = "tauxiliary.apk"
        
        def log(msg):
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}")
        
        async def main():
            """主同步逻辑"""
            log("Starting TAuxiliary APK sync")
            
            # 初始化版本信息
            versions = {}
            current = ""
            
            # 尝试获取当前版本信息
            try:
                if os.path.exists(VERSION_FILE):
                    with open(VERSION_FILE, 'r') as f:
                        versions = json.load(f)
                        current = versions.get(VERSION_KEY, "")
                        log(f"Current version: {current.split(',')[0] if current else 'None'}")
                else:
                    log("No existing version file found")
            except Exception as e:
                log(f"Error reading version file: {str(e)}")
            
            # 检查APK文件是否存在
            apk_exists = os.path.exists(APK_PATH)
            log(f"APK file exists: {apk_exists}")
            
            # 连接Telegram - 添加详细的连接设置
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH'],
                connection_retries=5,
                request_retries=5,
                auto_reconnect=True,
                use_ipv6=False  # 强制使用IPv4连接
            )
            
            try:
                await client.start()
                log("Connected to Telegram")
                
                # 获取群组实体
                group = await client.get_entity(GROUP)
                
                # 查找话题中的最新APK
                found = False
                async for msg in client.iter_messages(group, reply_to=TOPIC_ID, limit=10):
                    if not msg.media or not hasattr(msg.media, "document"):
                        continue
                    
                    # 查找文件名属性
                    for attr in msg.media.document.attributes:
                        if not isinstance(attr, DocumentAttributeFilename):
                            continue
                        
                        filename = attr.file_name
                        if not filename.endswith(".apk"):
                            continue
                        
                        # 使用精确的正则表达式匹配文件名
                        match = re.search(r'TAuxiliary-([\d.]+)_([a-f0-9]+)\.apk$', filename)
                        if not match:
                            continue
                        
                        version = f"v{match.group(1)}"
                        commit_hash = match.group(2)
                        date = msg.date.astimezone(pytz.timezone('Asia/Shanghai')).strftime("%Y-%m-%d")
                        new_value = f"{version},{date}"
                        
                        # 检查是否需要更新（目标文件不存在或版本不匹配）
                        if not apk_exists or not current or new_value != current:
                            # 下载APK到内存
                            log(f"Downloading new version: {version}")
                            apk_content = await client.download_media(msg, file=bytes)
                            
                            # 确保目录存在
                            os.makedirs(os.path.dirname(APK_PATH), exist_ok=True)
                            
                            # 写入APK文件
                            with open(APK_PATH, 'wb') as f:
                                f.write(apk_content)
                            
                            # 更新版本信息
                            versions[VERSION_KEY] = new_value
                            with open(VERSION_FILE, 'w') as f:
                                json.dump(versions, f, indent=2)
                            
                            log(f"Successfully updated to {version}")
                            
                            # 返回成功状态码（用于后续提交）
                            return 100
                        else:
                            log("Already on latest version")
                        
                        found = True
                        break
                    if found:
                        break
                
                if not found:
                    log("No valid TAuxiliary APK found in topic")
                return 0
            except Exception as e:
                log(f"Error: {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
            finally:
                await client.disconnect()
        
        if __name__ == "__main__":
            import asyncio
            exit_code = asyncio.run(main())
            
            # 如果有更新(返回100)，则提交更改
            if exit_code == 100:
                # 添加并提交文件
                os.system("git add apk/tauxiliary.apk version.txt")
                os.system('git commit -m "Update TAuxiliary APK and version"')
                
                # 使用token推送更改
                token = os.environ['GITHUB_TOKEN']
                actor = os.environ['GITHUB_ACTOR']
                repo = os.environ['GITHUB_REPOSITORY']
                os.system(f"git push https://{actor}:{token}@github.com/{repo}.git HEAD:${{GITHUB_REF}}")
            
            sys.exit(0 if exit_code in [0, 100] else 1)
        EOF

    - name: Release Repository Lock
      if: always()
      uses: softprops/turnstyle@v1
      with:
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚨 TAuxiliary同步失败！[查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "TAuxiliary APK Sync from TELEGRAM"
          repository: ${{ github.repository }}