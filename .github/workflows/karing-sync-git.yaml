name: Karing Beta Sync from Source Repository

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时运行一次
  workflow_dispatch:

# 添加并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        sparse-checkout: |
          apk/
          .github/workflows/
        sparse-checkout-cone-mode: false
        lfs: false
        submodules: false

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase true  # 添加rebase配置
        
    - name: Run sync script
      env:
        SOURCE_REPO: "KaringX/karing"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APK_PATTERN: "android_arm64-v8a.apk"
        WIN_PATTERN: "windows_x64.zip"
        ANDROID_TARGET_NAME: "karing.apk"
        WINDOWS_TARGET_NAME: "karing-win.zip"
      run: |
        # 目标文件路径
        ANDROID_TARGET_PATH="apk/$ANDROID_TARGET_NAME"
        WINDOWS_TARGET_PATH="apk/$WINDOWS_TARGET_NAME"
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 确保获取最新代码
        echo "拉取远程最新更改..."
        git pull origin ${{ github.ref_name }} || {
          echo "警告: 拉取远程更改失败，继续执行..."
        }

        # 获取所有发布版
        echo "获取发布版本信息..."
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ $? -ne 0 ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取最新预发布版和最新稳定版
        LATEST_PRE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == true)) | sort_by(.published_at) | reverse | .[0]')
        LATEST_STABLE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == false)) | sort_by(.published_at) | reverse | .[0]')

        # 检查是否找到有效的发布
        if [ -z "$LATEST_PRE_RELEASE" ] || [ "$LATEST_PRE_RELEASE" = "null" ]; then
          LATEST_PRE_RELEASE=""
          PRE_RELEASE_VERSION=""
        else
          PRE_RELEASE_VERSION=$(echo "$LATEST_PRE_RELEASE" | jq -r '.tag_name')
        fi

        if [ -z "$LATEST_STABLE_RELEASE" ] || [ "$LATEST_STABLE_RELEASE" = "null" ]; then
          LATEST_STABLE_RELEASE=""
          STABLE_RELEASE_VERSION=""
        else
          STABLE_RELEASE_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.tag_name')
        fi

        # 选择版本号更高的发布
        SELECTED_RELEASE=""
        SELECTED_VERSION=""
        CHANNEL=""
        
        if [ -n "$PRE_RELEASE_VERSION" ] && [ -n "$STABLE_RELEASE_VERSION" ]; then
          # 比较版本号（去掉前缀v）
          PRE_CLEAN=${PRE_RELEASE_VERSION#v}
          STABLE_CLEAN=${STABLE_RELEASE_VERSION#v}
          
          # 使用sort进行版本比较
          HIGHER_VERSION=$(printf "%s\n%s" "$PRE_CLEAN" "$STABLE_CLEAN" | sort -V | tail -n1)
          
          if [ "$HIGHER_VERSION" == "$PRE_CLEAN" ]; then
            SELECTED_RELEASE=$LATEST_PRE_RELEASE
            SELECTED_VERSION=$PRE_RELEASE_VERSION
            CHANNEL="预发布版"
          else
            SELECTED_RELEASE=$LATEST_STABLE_RELEASE
            SELECTED_VERSION=$STABLE_RELEASE_VERSION
            CHANNEL="稳定版"
          fi
        elif [ -n "$PRE_RELEASE_VERSION" ]; then
          SELECTED_RELEASE=$LATEST_PRE_RELEASE
          SELECTED_VERSION=$PRE_RELEASE_VERSION
          CHANNEL="预发布版"
        elif [ -n "$STABLE_RELEASE_VERSION" ]; then
          SELECTED_RELEASE=$LATEST_STABLE_RELEASE
          SELECTED_VERSION=$STABLE_RELEASE_VERSION
          CHANNEL="稳定版"
        else
          echo "错误: 未找到任何有效的发布版本"
          exit 1
        fi

        # 提取发布日期并转换为北京时间 (YYYY-MM-DD)
        SELECTED_PUBLISHED_AT=$(echo "$SELECTED_RELEASE" | jq -r '.published_at')
        RELEASE_DATE=$(TZ=UTC date -d "$SELECTED_PUBLISHED_AT" +'%Y-%m-%d')
        echo "选择的发布渠道: $CHANNEL, 版本: $SELECTED_VERSION (发布于: $RELEASE_DATE)"

        # 检查本地版本文件
        if [ ! -f "version.txt" ]; then
          echo "{}" > version.txt
        fi
        
        # 读取当前版本信息
        CURRENT_VERSION_JSON=$(cat version.txt)
        
        # 解析当前版本和日期
        CURRENT_ANDROID_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$ANDROID_TARGET_NAME\"")
        CURRENT_WINDOWS_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$WINDOWS_TARGET_NAME\"")
        
        # 分离版本和日期
        CURRENT_ANDROID_VERSION=""
        CURRENT_ANDROID_DATE=""
        if [ "$CURRENT_ANDROID_FULL" != "null" ] && [[ "$CURRENT_ANDROID_FULL" == *,* ]]; then
          CURRENT_ANDROID_VERSION=$(echo "$CURRENT_ANDROID_FULL" | cut -d, -f1)
          CURRENT_ANDROID_DATE=$(echo "$CURRENT_ANDROID_FULL" | cut -d, -f2)
        fi
        
        CURRENT_WINDOWS_VERSION=""
        CURRENT_WINDOWS_DATE=""
        if [ "$CURRENT_WINDOWS_FULL" != "null" ] && [[ "$CURRENT_WINDOWS_FULL" == *,* ]]; then
          CURRENT_WINDOWS_VERSION=$(echo "$CURRENT_WINDOWS_FULL" | cut -d, -f1)
          CURRENT_WINDOWS_DATE=$(echo "$CURRENT_WINDOWS_FULL" | cut -d, -f2)
        fi
        
        echo "当前Android版本: ${CURRENT_ANDROID_VERSION:-无} (日期: ${CURRENT_ANDROID_DATE:-无})"
        echo "当前Windows版本: ${CURRENT_WINDOWS_VERSION:-无} (日期: ${CURRENT_WINDOWS_DATE:-无})"

        # 检查是否需要更新
        need_update=false
        
        # 检查Android版本和文件
        if [ "$SELECTED_VERSION" != "$CURRENT_ANDROID_VERSION" ] || [ ! -f "$ANDROID_TARGET_PATH" ]; then
          echo "Android需要更新: 版本不匹配或文件不存在"
          need_update=true
        fi
        
        # 检查Windows版本和文件
        if [ "$SELECTED_VERSION" != "$CURRENT_WINDOWS_VERSION" ] || [ ! -f "$WINDOWS_TARGET_PATH" ]; then
          echo "Windows需要更新: 版本不匹配或文件不存在"
          need_update=true
        fi
        
        if [ "$need_update" = false ]; then
          echo "版本相同且文件存在，无需更新"
          exit 0
        fi

        # 下载新版本文件
        echo "下载新版本文件..."
        
        # 查找Android APK文件
        apk_download_url=$(echo "$SELECTED_RELEASE" | jq -r '.assets[] | select(.name | contains("'$APK_PATTERN'")) | .browser_download_url' | head -1)
        if [ -z "$apk_download_url" ]; then
          echo "错误: 未找到匹配的Android APK文件"
          exit 1
        fi
        
        # 查找Windows ZIP文件
        win_download_url=$(echo "$SELECTED_RELEASE" | jq -r '.assets[] | select(.name | contains("'$WIN_PATTERN'")) | .browser_download_url' | head -1)
        if [ -z "$win_download_url" ]; then
          echo "错误: 未找到匹配的Windows ZIP文件"
          exit 1
        fi
        
        # 确保apk目录存在
        mkdir -p apk
        
        # 下载Android APK
        apk_source_name=$(basename "$apk_download_url")
        echo "下载Android APK: $apk_source_name"
        curl -sL "$apk_download_url" -o "$WORK_DIR/$apk_source_name"
        if [ ! -f "$WORK_DIR/$apk_source_name" ]; then
          echo "错误: Android APK下载失败"
          exit 1
        fi
        
        # 下载Windows ZIP
        win_source_name=$(basename "$win_download_url")
        echo "下载Windows ZIP: $win_source_name"
        curl -sL "$win_download_url" -o "$WORK_DIR/$win_source_name"
        if [ ! -f "$WORK_DIR/$win_source_name" ]; then
          echo "错误: Windows ZIP下载失败"
          exit 1
        fi
        
        # 重命名并移动到目标位置
        mv "$WORK_DIR/$apk_source_name" "$ANDROID_TARGET_PATH"
        mv "$WORK_DIR/$win_source_name" "$WINDOWS_TARGET_PATH"
        echo "文件已保存到: $ANDROID_TARGET_PATH 和 $WINDOWS_TARGET_PATH"

        # 更新版本文件（保留其他键值，添加日期）
        UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq \
          --arg android_key "$ANDROID_TARGET_NAME" \
          --arg android_value "$SELECTED_VERSION,$RELEASE_DATE" \
          --arg win_key "$WINDOWS_TARGET_NAME" \
          --arg win_value "$SELECTED_VERSION,$RELEASE_DATE" \
          '.[$android_key] = $android_value | .[$win_key] = $win_value')
          
        echo "$UPDATED_VERSION_JSON" > version.txt

        # 添加所有更改
        git add apk/ version.txt
        
        # 检查是否有更改
        if git diff-index --quiet HEAD --; then
          echo "没有需要提交的更改"
          exit 0
        fi

        # 提交更改
        git commit -m "更新$CHANNEL版本: $SELECTED_VERSION (日期: $RELEASE_DATE)"
        
        # 再次拉取远程更改（避免推送冲突）
        echo "再次拉取远程更新..."
        git pull origin ${{ github.ref_name }} --rebase
        
        # 推送到远程仓库
        echo "推送到远程仓库..."
        git remote set-url origin https://x-access-token:$TOKEN@github.com/${{ github.repository }}.git
        git push origin HEAD:${{ github.ref }}
        
        if [ $? -eq 0 ]; then
          echo "推送成功"
        else
          echo "错误: 推送失败"
          # 尝试强制推送作为备选方案
          echo "尝试强制推送..."
          git push -f origin HEAD:${{ github.ref }}
          if [ $? -eq 0 ]; then
            echo "强制推送成功"
          else
            echo "错误: 强制推送失败"
            exit 1
          fi
        fi

        echo "同步完成! 状态: 成功"
        echo "发布渠道: $CHANNEL"
        echo "Android文件: $ANDROID_TARGET_PATH ($SELECTED_VERSION, $RELEASE_DATE)"
        echo "Windows文件: $WINDOWS_TARGET_PATH ($SELECTED_VERSION, $RELEASE_DATE)"
        exit 0

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Karing Beta Sync from Source Repository"
          repository: ${{ github.repository }}