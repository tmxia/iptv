name: Real-time README Updater

on:
  push:
    paths:
      - 'version.txt'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with retry
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          retry-on-timeout: true
          max-retries: 3
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version.txt
        id: validate-version
        run: |
          if [ ! -f version.txt ]; then
            echo "::error::version.txt not found"
            exit 1
          fi
          
          if ! jq empty version.txt 2>/dev/null; then
            echo "::error::Invalid JSON in version.txt"
            exit 1
          fi
          
          if [ $(jq -e 'length == 0' version.txt) = "true" ]; then
            echo "::warning::Empty version.txt"
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate README content
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 设置基础URL
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/apk/"
          
          # 生成新的README内容
          {
            echo "# 应用版本列表"
            echo ""
            echo "最后更新: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "| 文件名称 | 版本号 | 更新日期 |"
            echo "|----------|--------|----------|"
            
            # 按更新日期降序排列
            jq -r --arg base_url "$BASE_URL" '
              to_entries | sort_by(.value | split(",")[1]) | reverse | .[] |
              "| [\(.key)](\($base_url + (.key | @uri))) | \(.value | split(",")[0]) | \(.value | split(",")[1]) |"
            ' version.txt
          } > README_NEW.md
          
          echo "Generated new README content"

      - name: Apply new README
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 检查内容是否有效
          if [ $(grep -c '^\| \[' README_NEW.md) -ne $(jq 'length' version.txt) ]; then
            echo "::error::生成的内容行数不匹配"
            cat README_NEW.md
            exit 1
          fi
          
          # 替换现有README
          mv README_NEW.md README.md
          echo "Applied new README"

      - name: Commit changes with conflict resolution
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 配置Git
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          
          # 重试机制处理并发冲突
          for i in {1..3}; do
            echo "Attempt $i: Updating README..."
            
            # 拉取最新代码
            git pull origin ${{ github.ref_name }} --rebase
            
            # 检查version.txt是否变化
            if git diff --name-only origin/${{ github.ref_name }} | grep -q version.txt; then
              echo "::warning::version.txt changed during update, regenerating README"
              
              # 重新生成README
              "$GITHUB_WORKSPACE/${{ github.workflow }}/generate_readme.sh"
            fi
            
            # 添加并提交
            git add README.md
            
            if git diff --cached --quiet; then
              echo "No changes to commit"
              break
            fi
            
            # 尝试提交
            if git commit -m "📚 自动更新版本表格 [skip ci]" && \
               git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}; then
              echo "Update successful"
              break
            else
              echo "::warning::Push failed, retrying..."
              sleep $((RANDOM % 5 + 1)) # 随机等待减少冲突
            fi
          done

      - name: Final verification
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 简单验证README是否包含关键内容
          if grep -q "应用版本列表" README.md; then
            echo "✅ README更新验证通过"
          else
            echo "::error::README更新失败"
            exit 1
          fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: [update-readme]
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 2
          retain_days: 1
          delete_workflow_pattern: "Real-time README Updater"
          repository: ${{ github.repository }}

  # 生成README的辅助脚本
  generate_readme.sh: |
    #!/bin/bash
    REPO="${{ github.repository }}"
    BRANCH="${{ github.ref_name }}"
    BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/apk/"
    
    {
      echo "# 应用版本列表"
      echo ""
      echo "最后更新: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      echo ""
      echo "| 文件名称 | 版本号 | 更新日期 |"
      echo "|----------|--------|----------|"
      
      jq -r --arg base_url "$BASE_URL" '
        to_entries | sort_by(.value | split(",")[1]) | reverse | .[] |
        "| [\(.key)](\($base_url + (.key | @uri))) | \(.value | split(",")[0]) | \(.value | split(",")[1]) |"
      ' version.txt
    } > README.md