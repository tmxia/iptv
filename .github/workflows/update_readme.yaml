name: Real-time README Updater

on:
  push:
    paths:
      - 'version.txt'
      - 'apk/**'
  workflow_run:
    workflows: ["NagramX Sync from Source Repository", "BV APK Sync from Source Repository", "GitHub XAPK Download and Sync", "Karing Beta Sync from Source Repository", "MYTV APK Sync from Source Repository", "OK PRO APK Sync from TELEGRAM", "OK APK Sync from Source Repository", "Proxypin Sync from Source Repository", "Simple_live APK Sync from Source Repository", "ServerBox Sync from Source Repository", "TV APK Sync from TELEGRAM", "Hiddify APK Sync from Source Repository"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: 获取最新变更
        run: git pull origin ${{ github.ref_name }}

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Validate version.txt
        id: validate-version
        run: |
          if [ ! -f version.txt ]; then
            echo "::error::version.txt not found"
            exit 1
          fi
          
          if ! jq empty version.txt 2>/dev/null; then
            echo "::error::Invalid JSON in version.txt"
            exit 1
          fi
          
          if [ $(jq -e 'length == 0' version.txt) = "true" ]; then
            echo "::warning::Empty version.txt"
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate new README
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 设置基础URL
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/apk/"
          
          # 生成全新的README内容
          {
            echo "# 应用版本列表"
            echo ""
            echo "最后更新: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "| 文件名称 | 文件大小(M) | 版本号 | 更新日期 |"
            echo "|----------|------------|--------|----------|"
            
            # 按更新日期降序排列
            jq -r --arg base_url "$BASE_URL" '
              to_entries | sort_by(.value | split(",")[1]) | reverse | .[] |
              .key as $key |
              $key
            ' version.txt | while read -r key; do
              # 获取版本信息
              value=$(jq -r ".\"$key\"" version.txt)
              version=$(echo "$value" | cut -d, -f1)
              date=$(echo "$value" | cut -d, -f2)
              
              # 获取文件大小（MB）
              file_path="apk/$key"
              if [ -f "$file_path" ]; then
                file_bytes=$(stat -c%s "$file_path")
                file_size=$(echo "scale=2; $file_bytes / (1024*1024)" | bc)
              else
                file_size="N/A"
              fi
              
              # 修复HTML实体编码 - 使用正确的格式
              display_name=$(echo "$key" | sed 's/_/\&#95;/g')
              echo "| [$display_name](${BASE_URL}${key}) | $file_size | $version | $date |"
            done
          } > README.md
          
          echo "Generated new README.md with correct HTML entity encoding"

      - name: 提交更改
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add README.md
          
          # 检查是否有更改
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # 使用 [skip actions] 避免触发其他工作流
            git commit -m "📚 自动更新版本表格 [skip actions]"
            # 使用 PAT 令牌推送
            git push "https://${{ github.actor }}:${{ secrets.REPO_PAT }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}
          fi

      - name: Simple verification
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 简单验证README是否包含关键内容
          if grep -q "应用版本列表" README.md && \
             grep -q "文件大小" README.md && \
             grep -q "github.zip" README.md; then
            echo "✅ README更新成功"
          else
            echo "::error::README更新失败"
            cat README.md
            exit 1
          fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: [update-readme]
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Real-time README Updater"
          repository: ${{ github.repository }}