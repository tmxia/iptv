name: Real-time README Updater

on:
  push:
    paths:
      - 'version.txt'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version.txt
        id: validate-version
        run: |
          if [ ! -f version.txt ]; then
            echo "::error::version.txt not found"
            exit 1
          fi
          
          if ! jq empty version.txt 2>/dev/null; then
            echo "::error::Invalid JSON in version.txt"
            exit 1
          fi
          
          if [ $(jq -e 'length == 0' version.txt) = "true" ]; then
            echo "::warning::Empty version.txt"
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare README
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 创建或修复README结构
          if [ ! -f README.md ]; then
            echo "# 应用版本列表" > README.md
            echo "| 文件名称 | 版本号 | 更新日期 |" >> README.md
            echo "|----------|--------|----------|" >> README.md
            echo "<!-- VERSION_TABLE -->" >> README.md
          fi
          
          # 确保表格结构存在
          if ! grep -q "| 文件名称 | 版本号 | 更新日期 |" README.md; then
            sed -i '1i <!-- VERSION_TABLE -->' README.md
            sed -i '1i |----------|--------|----------|' README.md
            sed -i '1i | 文件名称 | 版本号 | 更新日期 |' README.md
          fi
          
          # 确保标记存在
          if ! grep -q "<!-- VERSION_TABLE -->" README.md; then
            echo "<!-- VERSION_TABLE -->" >> README.md
          fi

      - name: Generate and update table
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 设置基础URL
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/apk/"
          
          # 仅生成数据行（不包括表头）
          table_content=$(jq -r --arg base_url "$BASE_URL" '
            to_entries | sort_by(.value | split(",")[1]) | reverse | .[] |
            "| [\(.key)](\($base_url + (.key | @uri))) | \(.value | split(",")[0]) | \(.value | split(",")[1]) |"
          ' version.txt)
          
          # 替换标记之间的内容
          sed -i '/<!-- VERSION_TABLE -->/{
            n   # 移动到标记的下一行
            :a
            n   # 读取下一行
            /<!-- VERSION_TABLE -->/!ba   # 如果不是结束标记则循环
            d   # 删除结束标记前的所有行
          }' README.md
          
          # 插入新内容和结束标记
          sed -i '/<!-- VERSION_TABLE -->/a \\n'"$table_content" README.md
          sed -i '/<!-- VERSION_TABLE -->/a <!-- VERSION_TABLE -->' README.md
          
          echo "Updated README.md"

      - name: 提交更改
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git pull origin ${{ github.ref_name }}
          git add README.md
          
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📚 自动更新版本表格 [skip ci]"
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}
          fi

      - name: Verify update
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 验证表格行数是否匹配
          expected_lines=$(jq 'length' version.txt)
          actual_lines=$(grep -c '| \[.*\]' README.md)
          
          if [ "$expected_lines" -eq "$actual_lines" ]; then
            echo "README更新成功! 表格行数: $actual_lines"
          else
            echo "::error::表格行数不匹配 (预期: $expected_lines, 实际: $actual_lines)"
            exit 1
          fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: [update-readme]
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 2
          retain_days: 1
          delete_workflow_pattern: "Real-time README Updater"
          repository: ${{ github.repository }}