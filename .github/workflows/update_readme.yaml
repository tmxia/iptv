name: Real-time README Updater

on:
  push:
    paths:
      - "version.txt"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version.txt
        id: validate-version
        run: |
          if [ ! -f version.txt ]; then
            echo "::error::version.txt not found"
            exit 1
          fi
          
          if ! jq empty version.txt 2>/dev/null; then
            echo "::error::Invalid JSON in version.txt"
            exit 1
          fi
          
          if [ $(jq -e 'length == 0' version.txt) = "true" ]; then
            echo "::warning::Empty version.txt, skipping update"
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare README structure
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          # 定义固定标记（确保与 sed 正则完全一致）
          START_MARKER="<!-- VERSION_TABLE_START -->"
          END_MARKER="<!-- VERSION_TABLE_END -->"
          
          # 强制生成 README 基础结构和标记（无论是否存在，确保标记写入）
          touch README.md  # 确保文件存在
          echo "# 应用版本列表" >> README.md
          echo "| 文件名称 | 版本号 | 更新日期 |" >> README.md
          echo "|----------|--------|----------|" >> README.md
          
          # 清除旧标记（避免重复），重新写入新标记
          sed -i "/$START_MARKER/d" README.md
          sed -i "/$END_MARKER/d" README.md
          echo "$START_MARKER" >> README.md
          echo "$END_MARKER" >> README.md

      - name: Generate and update version table
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          BASE_URL="https://raw.githubusercontent.com/${REPO}/${BRANCH}/apk/"
          
          # 生成表格内容（jq 表达式正确引用 $base_url 变量）
          table_content=$(jq -r --arg base_url "$BASE_URL" '
            to_entries | 
            sort_by(.value | split(",")[1] | strptime("%Y-%m-%d") | mktime) | reverse | 
            .[] | 
            "| [\(.key)](\($base_url + (.key | @uri))) | \(.value | split(",")[0]) | \(.value | split(",")[1]) |"
          ' version.txt)
          
          # 转义 sed 敏感字符（|、&、/、换行符）
          escaped_table_content=$(echo "$table_content" | sed 's/[&/|\n]/\\&/g')
          
          # 清除标记间旧内容（确保标记存在，正则地址非空）
          sed -i "/$START_MARKER/,/$END_MARKER/{
            /$START_MARKER/!d;
            /$END_MARKER/!d
          }" README.md
          
          # 插入转义后的表格内容
          sed -i "/$START_MARKER/a $escaped_table_content" README.md
          
          echo "✅ 表格更新完成，共生成 $(echo "$table_content" | wc -l) 行"

      - name: Commit and push changes
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git pull origin ${{ github.ref_name }} --rebase  # 避免分支冲突
          
          if git diff --quiet README.md; then
            echo "No changes to README.md"
          else
            git add README.md
            git commit -m "📚 自动更新版本表格 [skip ci]"
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}
          fi

      - name: Verify table update
        if: ${{ steps.validate-version.outputs.skip_update == 'false' }}
        run: |
          expected_lines=$(jq 'length' version.txt)
          actual_lines=$(grep -c '| \[.*\]' README.md)
          
          if [ "$expected_lines" -eq "$actual_lines" ]; then
            echo "✅ README更新成功！表格行数匹配：$actual_lines"
          else
            echo "::error::表格行数不匹配（预期：$expected_lines，实际：$actual_lines）"
            exit 1
          fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: [update-readme]
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 2  # 保留至少2次成功运行
          retain_days: 7        # 保留7天内的记录
          delete_workflow_pattern: "Real-time README Updater"
          repository: ${{ github.repository }}
