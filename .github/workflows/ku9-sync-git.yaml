name: Ku9 APK Sync from LanZou Cloud

on:
  workflow_dispatch:

concurrency:
  group: sync-apk-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

env:
  LANZOU_PHPSESSID: ${{ secrets.LANZOU_PHPSESSID }}
  LANZOU_YLOGIN: ${{ secrets.LANZOU_YLOGIN }}
  LANZOU_PHPDISK_INFO: ${{ secrets.LANZOU_PHPDISK_INFO }}
  LANZOU_51VCKE: ${{ secrets.LANZOU_51VCKE }}
  LANZOU_51VUFT: ${{ secrets.LANZOU_51VUFT }}
  LANZOU_UAG: ${{ secrets.LANZOU_UAG }}
  LANZOU_TFSTK: ${{ secrets.LANZOU_TFSTK }}
  LANZOU_TINS: ${{ secrets.LANZOU_TINS }}
  LANZOU_VTINS: ${{ secrets.LANZOU_VTINS }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Git identity
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip aapt
        pip3 install requests beautifulsoup4
        
    - name: Create and run APK sync script
      run: |
        # 创建Python脚本
        cat > lanzou_downloader.py << 'EOF'
        import requests
        from bs4 import BeautifulSoup
        import re
        import json
        import os
        import subprocess
        import time
        import logging
        from datetime import datetime, timedelta, timezone
        from urllib.parse import unquote
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()
            ]
        )
        logger = logging.getLogger(__name__)
        
        # 蓝奏云Cookie配置
        LANZOU_COOKIES = {
            "PHPSESSID": os.getenv('LANZOU_PHPSESSID'),
            "ylogin": os.getenv('LANZOU_YLOGIN'),
            "phpdisk_info": os.getenv('LANZOU_PHPDISK_INFO'),
            "__51cke__": "",
            "__51vcke__undefined": os.getenv('LANZOU_51VCKE'),
            "__51vuft__undefined": os.getenv('LANZOU_51VUFT'),
            "uag": os.getenv('LANZOU_UAG'),
            "tfstk": os.getenv('LANZOU_TFSTK'),
            "folder_id_c": "-1",
            "__tins__21412745": os.getenv('LANZOU_TINS'),
            "__51laig__": "10",
            "__vtins__undefined": os.getenv('LANZOU_VTINS'),
        }
        
        # 蓝奏云文件配置
        FILE_CONFIG = {
            "app-release_flow_sign.apk": {
                "share_url": "https://wfy.lanzout.com/b0izqfjwb",
                "target_name": "ku9.apk",
                "password": "123456"
            },
            "app-releaseVLC_flow_sign.apk": {
                "share_url": "https://wfy.lanzout.com/b0izqfjwb",
                "target_name": "ku9-vlc.apk",
                "password": "123456"
            }
        }
        
        def get_beijing_time():
            """获取北京时间"""
            utc_time = datetime.now(timezone.utc)
            beijing_time = utc_time + timedelta(hours=8)
            return beijing_time.strftime('%Y-%m-%d')
        
        def parse_version_info(version_str):
            """
            解析版本字符串，提取版本号和日期
            格式示例: 1.7.2.1_20250604_1828
            返回: (版本号, 日期)
            """
            try:
                # 分割版本字符串
                parts = version_str.split('_')
                if len(parts) >= 3:
                    # 版本号是第一部分
                    version_number = parts[0]
                    
                    # 日期是第二部分 (格式: YYYYMMDD)
                    date_str = parts[1]
                    if len(date_str) == 8 and date_str.isdigit():
                        # 格式化为 YYYY-MM-DD
                        formatted_date = f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:8]}"
                        return version_number, formatted_date
                
                # 如果格式不符，返回原始值和当前日期
                logger.warning(f"版本格式不标准: {version_str}")
                return version_str, get_beijing_time()
                
            except Exception as e:
                logger.error(f"解析版本信息失败: {e}")
                return version_str, get_beijing_time()
        
        def get_apk_version(apk_path):
            """使用aapt获取APK版本信息"""
            try:
                result = subprocess.run(
                    ['aapt', 'dump', 'badging', apk_path],
                    capture_output=True,
                    text=True,
                    check=True
                )
                output = result.stdout
                
                # 提取完整版本字符串
                version_match = re.search(r"versionName='([^']+)'", output)
                if not version_match:
                    logger.error("无法从APK提取版本信息")
                    return None, None
                
                version_str = version_match.group(1)
                logger.info(f"提取到完整版本字符串: {version_str}")
                
                # 解析版本信息
                version_number, version_date = parse_version_info(version_str)
                return version_number, version_date
                
            except subprocess.CalledProcessError as e:
                logger.error(f"aapt命令执行失败: {e.stderr}")
                return None, None
            except FileNotFoundError:
                logger.error("aapt工具未找到，请确保已安装Android SDK工具")
                return None, None
            except Exception as e:
                logger.error(f"获取APK版本信息时出错: {e}")
                return None, None
        
        def get_real_download_url(share_url, file_name, password):
            """获取蓝奏云文件的真实下载链接 - 更新版"""
            session = requests.Session()
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36",
                "Referer": share_url
            }
            
            try:
                # 1. 获取初始页面
                res1 = session.get(share_url, headers=headers, cookies=LANZOU_COOKIES)
                res1.raise_for_status()
                
                # 2. 提取文件ID（新方法）
                soup = BeautifulSoup(res1.text, 'html.parser')
                
                # 查找包含文件信息的元素
                file_element = None
                for element in soup.find_all('div', class_='fileinfo'):
                    if file_name in element.text:
                        file_element = element
                        break
                
                if not file_element:
                    logger.error(f"未找到文件: {file_name}")
                    return None
                
                # 3. 提取文件ID
                file_id_match = re.search(r'data-id="(\d+)"', str(file_element))
                if not file_id_match:
                    logger.error("无法提取文件ID")
                    return None
                
                file_id = file_id_match.group(1)
                logger.info(f"提取到文件ID: {file_id}")
                
                # 4. 获取下载签名
                sign_url = f"https://www.lanzout.com/fileurl.php?type=down&fileid={file_id}"
                res2 = session.get(sign_url, headers=headers, cookies=LANZOU_COOKIES)
                res2.raise_for_status()
                
                # 5. 解析下载链接
                download_data = res2.json()
                if download_data.get("zt") != 1:
                    logger.error(f"下载请求失败: {download_data.get('inf', '未知错误')}")
                    return None
                    
                direct_url = download_data.get('dom', '') + download_data.get('url', '')
                
                if not direct_url:
                    logger.error("未获取到下载链接")
                    return None
                
                return unquote(direct_url)  # 解码URL
                
            except requests.RequestException as e:
                logger.error(f"网络请求失败: {e}")
                return None
            except json.JSONDecodeError:
                logger.error("JSON解析失败")
                return None
            except Exception as e:
                logger.error(f"获取下载链接时出错: {e}")
                return None
        
        def download_file(url, file_path):
            """下载文件"""
            try:
                with requests.get(url, stream=True, timeout=30) as r:
                    r.raise_for_status()
                    with open(file_path, 'wb') as f:
                        for chunk in r.iter_content(chunk_size=8192):
                            if chunk:  # 过滤空chunk
                                f.write(chunk)
                return True
            except requests.RequestException as e:
                logger.error(f"文件下载失败: {e}")
                return False
            except Exception as e:
                logger.error(f"下载文件时出错: {e}")
                return False
        
        def is_valid_apk(file_path):
            """检查文件是否为有效的APK"""
            try:
                # 检查文件大小
                file_size = os.path.getsize(file_path)
                if file_size < 1024 * 100:  # 小于100KB视为无效
                    logger.error(f"文件大小无效: {file_size}字节")
                    return False
                    
                # 检查文件类型
                with open(file_path, 'rb') as f:
                    header = f.read(4)
                    # APK文件以PK开头（ZIP格式）
                    if header != b'PK\x03\x04':
                        logger.error("文件签名无效")
                        return False
                return True
            except Exception as e:
                logger.error(f"验证APK文件时出错: {e}")
                return False
        
        def process_apk_file(source_name, config):
            """处理单个APK文件"""
            target_name = config["target_name"]
            share_url = config["share_url"]
            password = config["password"]
            target_path = f"apk/{target_name}"
            
            logger.info(f"开始处理: {source_name} → {target_name}")
            
            # 获取真实下载链接
            download_url = get_real_download_url(share_url, source_name, password)
            if not download_url:
                logger.error(f"无法获取 {source_name} 的下载链接")
                return None, None
            
            logger.info(f"获取到下载链接: {download_url}")
            
            # 下载文件
            temp_path = f"temp_{target_name}"
            if not download_file(download_url, temp_path):
                return None, None
            
            # 验证文件类型
            if not is_valid_apk(temp_path):
                logger.error(f"下载的文件不是有效的APK: {source_name}")
                os.remove(temp_path)
                return None, None
            
            # 获取版本信息
            version_number, version_date = get_apk_version(temp_path)
            if not version_number or not version_date:
                logger.error(f"无法获取 {source_name} 的版本信息")
                os.remove(temp_path)
                return None, None
            
            logger.info(f"版本信息: {version_number}, 日期: {version_date}")
            
            # 移动文件到目标位置 - 完成重命名
            os.replace(temp_path, target_path)
            
            logger.info(f"成功处理: {source_name} → {target_name}")
            return version_number, version_date
        
        def update_version_file(versions_data):
            """更新版本文件 - 仅更新目标文件"""
            version_file = "version.txt"
            new_data = {}
            
            # 读取现有版本数据
            if os.path.exists(version_file):
                try:
                    with open(version_file, 'r') as f:
                        new_data = json.load(f)
                except json.JSONDecodeError:
                    logger.warning("版本文件格式错误，将创建新文件")
            
            # 仅更新目标文件
            target_files = [config["target_name"] for config in FILE_CONFIG.values()]
            for target_name, (version, date) in versions_data.items():
                if version and date and target_name in target_files:
                    new_data[target_name] = f"{version},{date}"
            
            # 写入文件
            with open(version_file, 'w') as f:
                json.dump(new_data, f, indent=2)
            
            logger.info("版本文件已更新")
            return new_data
        
        def main():
            logger.info("蓝奏云APK同步开始")
            start_time = time.time()
            
            # 确保apk目录存在
            os.makedirs("apk", exist_ok=True)
            
            # 处理所有文件
            versions_data = {}
            for source_name, config in FILE_CONFIG.items():
                target_name = config["target_name"]
                version, date = process_apk_file(source_name, config)
                versions_data[target_name] = (version, date)
            
            # 更新版本文件
            version_info = update_version_file(versions_data)
            
            # 输出结果
            logger.info("同步结果:")
            for file, info in version_info.items():
                if file in [config["target_name"] for config in FILE_CONFIG.values()]:
                    logger.info(f"  {file}: {info}")
            
            # 统计结果
            success_count = sum(1 for v in versions_data.values() if v[0] and v[1])
            elapsed = time.time() - start_time
            status = "成功" if success_count == len(FILE_CONFIG) else "部分成功"
            logger.info(f"同步完成! 状态: {status}, 成功: {success_count}/{len(FILE_CONFIG)}, 耗时: {elapsed:.2f}秒")
            
            # 如果有失败，返回错误状态
            if success_count < len(FILE_CONFIG):
                exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
        # 设置脚本权限并执行
        chmod +x lanzou_downloader.py
        python3 lanzou_downloader.py
        
    - name: Commit and push changes
      if: success()
      run: |
        # 检查是否有更改
        if git diff --quiet -- apk version.txt; then
          echo "没有检测到更改，跳过提交"
        else
          echo "提交更改到Git仓库..."
          git add apk/* version.txt
          git commit -m "自动更新APK文件"
          
          # 重试推送机制
          MAX_RETRIES=3
          RETRY_DELAY=10
          for i in $(seq 1 $MAX_RETRIES); do
            echo "推送更改 (尝试 $i/$MAX_RETRIES)..."
            git pull --rebase origin $(git rev-parse --abbrev-ref HEAD)
            if git push origin $(git rev-parse --abbrev-ref HEAD); then
              echo "推送成功"
              break
            else
              echo "推送失败，等待重试..."
              sleep $RETRY_DELAY
            fi
            if [ $i -eq $MAX_RETRIES ]; then
              echo "错误: 推送失败，超过最大重试次数"
              exit 1
            fi
          done
        fi

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "Ku9 APK Sync from LanZou Cloud"
          repository: ${{ github.repository }}