name: GitHub XAPK Download and Sync

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl pv
        
    - name: Download and process GitHub XAPK
      env:
        TARGET_REPO: "${{ github.repository }}"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        XAPK_NAME: "GitHub.xapk"
        VERSION_KEY: "github.xapk"
        APKPURE_URL: "https://d.apkpure.net/b/XAPK/com.github.android?version=latest"
      run: |
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 下载XAPK文件（带进度条）
        echo "正在下载GitHub XAPK文件..."
        FILENAME=$(curl -sI "$APKPURE_URL" | grep -i 'content-disposition' | grep -o 'filename="[^"]*"' | cut -d'"' -f2)
        
        if [ -z "$FILENAME" ]; then
          # 如果无法从header获取文件名，使用默认文件名
          FILENAME="github_$(date +%Y%m%d).xapk"
          echo "无法从header获取文件名，使用默认文件名: $FILENAME"
          curl -L "$APKPURE_URL" | pv -bpet -s $(curl -sI "$APKPURE_URL" | grep -i 'content-length' | awk '{print $2}' | tr -d '\r') > "$WORK_DIR/$FILENAME"
        else
          echo "原始文件名: $FILENAME"
          curl -L "$APKPURE_URL" | pv -bpet -s $(curl -sI "$APKPURE_URL" | grep -i 'content-length' | awk '{print $2}' | tr -d '\r') > "$WORK_DIR/$FILENAME"
        fi
        
        if [ ! -f "$WORK_DIR/$FILENAME" ]; then
          echo "错误: XAPK下载失败"
          exit 1
        fi

        # 从文件名提取版本号（改进的正则表达式）
        if [[ "$FILENAME" =~ _([0-9]+\.[0-9]+\.[0-9]+)_ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "提取的版本号: $VERSION"
        elif [[ "$FILENAME" =~ _([0-9]+\.[0-9]+)_ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "提取的版本号: $VERSION"
        else
          echo "警告: 无法从文件名提取版本号 ($FILENAME)"
          # 使用更精确的时间戳格式
          VERSION=$(date +%Y.%m.%d-%H%M)
        fi

        # 重命名XAPK文件
        mv "$WORK_DIR/$FILENAME" "$WORK_DIR/$XAPK_NAME"
        echo "已重命名为: $XAPK_NAME"

        # 获取目标仓库当前版本
        echo "获取目标仓库当前版本..."
        TARGET_VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")
        
        CURRENT_VERSION=""
        if [ "$(echo "$TARGET_VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          VERSION_CONTENT=$(echo "$TARGET_VERSION_JSON" | jq -r '.content' | base64 -d)
          CURRENT_VERSION=$(echo "$VERSION_CONTENT" | jq -r ".\"$VERSION_KEY\"")
          if [ "$CURRENT_VERSION" = "null" ]; then
            CURRENT_VERSION=""
          fi
        fi
        
        echo "当前版本: $CURRENT_VERSION"
        echo "新版本: $VERSION"

        # 检查是否需要更新
        NEED_UPDATE=false
        
        # 1. 版本不同时需要更新
        if [ "$VERSION" != "$CURRENT_VERSION" ]; then
          echo "发现新版本，需要更新"
          NEED_UPDATE=true
        else
          # 2. 版本相同但文件不存在时需要更新
          echo "检查XAPK文件是否存在..."
          XAPK_EXIST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$TARGET_REPO/contents/apk/$XAPK_NAME")
          
          if [ "$XAPK_EXIST_RESPONSE" -ne 200 ]; then
            echo "XAPK文件不存在 (HTTP $XAPK_EXIST_RESPONSE)，需要上传"
            NEED_UPDATE=true
          else
            echo "版本相同且XAPK文件存在，无需更新"
          fi
        fi

        if [ "$NEED_UPDATE" = false ]; then
          echo "无需更新，退出"
          exit 0
        fi

        # 更新版本文件
        echo "更新版本文件..."
        NEW_VERSION_CONTENT="{}"
        if [ -n "$CURRENT_VERSION" ]; then
          # 如果已有版本文件，更新特定键值
          NEW_VERSION_CONTENT=$(echo "$VERSION_CONTENT" | jq --arg key "$VERSION_KEY" --arg value "$VERSION" '.[$key] = $value')
        else
          # 如果无版本文件，创建新JSON
          NEW_VERSION_CONTENT=$(jq -n --arg key "$VERSION_KEY" --arg value "$VERSION" '{($key): $value}')
        fi

        echo "新版本文件内容:"
        echo "$NEW_VERSION_CONTENT"

        # 获取版本文件的SHA（用于更新）
        VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                        "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")

        SHA_VERSION=""
        if [ "$(echo "$VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          SHA_VERSION=$(echo "$VERSION_JSON" | jq -r '.sha')
        fi

        # Base64编码版本文件
        VERSION_BASE64=$(echo -n "$NEW_VERSION_CONTENT" | base64 -w0)

        # 创建JSON请求
        JSON_VERSION=$(jq -n \
            --arg msg "更新GitHub版本: $VERSION" \
            --arg content "$VERSION_BASE64" \
            --arg sha "$SHA_VERSION" \
            '{message: $msg, content: $content, sha: $sha}')

        # 上传版本文件
        echo "上传版本文件..."
        VERSION_RESPONSE=$(curl -s \
                  -X PUT \
                  -H "Authorization: token $TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_VERSION" \
                  "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")

        # 检查错误
        ERROR_MESSAGE_VERSION=$(echo "$VERSION_RESPONSE" | jq -r '.message')
        if [ "$ERROR_MESSAGE_VERSION" != "null" ]; then
          echo "错误: 版本文件上传失败 - $ERROR_MESSAGE_VERSION"
          exit 1
        fi

        # 上传XAPK文件
        echo "上传XAPK文件..."
        XAPK_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                    "https://api.github.com/repos/$TARGET_REPO/contents/apk/$XAPK_NAME")
        
        SHA_XAPK=""
        if [ "$(echo "$XAPK_JSON" | jq -r '.message')" != "Not Found" ]; then
          SHA_XAPK=$(echo "$XAPK_JSON" | jq -r '.sha')
        fi

        # 创建JSON请求文件（处理大文件）
        JSON_FILE="$WORK_DIR/request.json"
        {
          echo '{'
          echo "  \"message\": \"更新GitHub XAPK: $VERSION\","
          echo -n '  "content": "'
          base64 -w0 "$WORK_DIR/$XAPK_NAME" | tr -d '\n'
          echo '",'
          echo "  \"sha\": \"$SHA_XAPK\""
          echo '}'
        } > "$JSON_FILE"

        # 上传XAPK文件
        XAPK_RESPONSE=$(curl -s \
                  -X PUT \
                  -H "Authorization: token $TOKEN" \
                  -H "Content-Type: application/json" \
                  --data-binary "@$JSON_FILE" \
                  "https://api.github.com/repos/$TARGET_REPO/contents/apk/$XAPK_NAME")

        # 检查错误
        ERROR_MESSAGE_XAPK=$(echo "$XAPK_RESPONSE" | jq -r '.message')
        if [ "$ERROR_MESSAGE_XAPK" != "null" ]; then
          echo "错误: XAPK文件上传失败 - $ERROR_MESSAGE_XAPK"
          exit 1
        fi

        echo "同步完成! 新版本: $VERSION"

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "GitHub XAPK Download and Sync"
          repository: ${{ github.repository }}