name: NagramX Sync from Source Repository

# 使用原生并发控制
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */24 * * *'  # 每24小时运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于缓存的锁机制
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v3
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 1200  # 20分钟超时
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout current repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase false  # 使用 merge 而不是 rebase
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Run sync script
      env:
        SOURCE_REPO: "risin42/NagramX"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APK_PATTERN: "arm64-v8a.apk"
        STABLE_TARGET_NAME: "nagramx.apk"
      run: |
        # 目标文件路径
        STABLE_TARGET_PATH="apk/$STABLE_TARGET_NAME"
        VERSION_FILE="version.txt"
        
        # 1. 目标文件存在性检测
        echo "检查目标文件存在性..."
        if [ -f "$STABLE_TARGET_PATH" ]; then
          echo "目标文件存在: $STABLE_TARGET_PATH"
          FILE_EXISTS=1
        else
          echo "目标文件不存在: $STABLE_TARGET_PATH"
          FILE_EXISTS=0
        fi
        
        # 2. 版本文件键值存在性检测
        echo "检查版本文件键值存在性..."
        if [ ! -f "$VERSION_FILE" ]; then
          echo "版本文件不存在，创建空文件"
          echo "{}" > "$VERSION_FILE"
          CURRENT_VERSION_JSON="{}"
        else
          CURRENT_VERSION_JSON=$(cat "$VERSION_FILE")
        fi
        
        # 检查键值是否存在
        if jq -e ".\"$STABLE_TARGET_NAME\"" <<< "$CURRENT_VERSION_JSON" >/dev/null; then
          echo "版本文件键值存在: $STABLE_TARGET_NAME"
          KEY_EXISTS=1
        else
          echo "版本文件键值不存在: $STABLE_TARGET_NAME"
          KEY_EXISTS=0
        fi
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 获取所有发布版
        echo "获取稳定版本信息..."
        RELEASES_JSON=$(curl -sL -H "Authorization: Bearer $TOKEN" "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ $? -ne 0 ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取最新稳定版
        LATEST_STABLE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == false)) | sort_by(.published_at) | reverse | .[0]')
        if [ -z "$LATEST_STABLE_RELEASE" ] || [ "$LATEST_STABLE_RELEASE" = "null" ]; then
          echo "错误: 未找到稳定版本"
          exit 1
        fi
        
        # 提取发布日期
        STABLE_PUBLISHED_AT=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.published_at')
        RELEASE_DATE=$(TZ=UTC date -d "$STABLE_PUBLISHED_AT" +'%Y-%m-%d')
        
        # 提取版本号
        RAW_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.name' | grep -oP '(\d+\.)+\d+' | head -1)
        if [ -z "$RAW_VERSION" ]; then
          RAW_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.tag_name')
        fi
        
        # 添加 'v' 前缀
        if [[ ! "$RAW_VERSION" =~ ^v ]]; then
          STABLE_VERSION="v$RAW_VERSION"
        else
          STABLE_VERSION="$RAW_VERSION"
        fi
        
        echo "源仓库最新稳定版: $STABLE_VERSION (发布于: $RELEASE_DATE)"

        # 3. 对比更新逻辑
        CURRENT_STABLE_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$STABLE_TARGET_NAME\"")
        CURRENT_STABLE_VERSION=$(echo "$CURRENT_STABLE_FULL" | cut -d, -f1)
        CURRENT_STABLE_DATE=$(echo "$CURRENT_STABLE_FULL" | cut -d, -f2)
        
        echo "当前记录版本: ${CURRENT_STABLE_VERSION:-无} (日期: ${CURRENT_STABLE_DATE:-无})"
        
        # 触发更新条件
        NEED_UPDATE=0
        if [ "$FILE_EXISTS" -eq 0 ]; then
          echo "目标文件缺失，需要更新"
          NEED_UPDATE=1
        elif [ "$KEY_EXISTS" -eq 0 ]; then
          echo "版本键值缺失，需要更新"
          NEED_UPDATE=1
        elif [ "$STABLE_VERSION" != "$CURRENT_STABLE_VERSION" ]; then
          echo "版本变化: $CURRENT_STABLE_VERSION -> $STABLE_VERSION"
          NEED_UPDATE=1
        elif [ "$RELEASE_DATE" != "$CURRENT_STABLE_DATE" ]; then
          echo "发布日期变化: $CURRENT_STABLE_DATE -> $RELEASE_DATE"
          NEED_UPDATE=1
        else
          echo "版本和日期一致，无需更新"
        fi
        
        if [ "$NEED_UPDATE" -eq 0 ]; then
          echo "跳过稳定版更新"
          exit 0
        fi
        
        # 4. 下载新版本
        echo "下载新版本文件..."
        apk_download_url=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.assets[] | select(.name | contains("'$APK_PATTERN'")) | .browser_download_url' | head -1)
        if [ -z "$apk_download_url" ]; then
          echo "错误: 未找到匹配的稳定版APK文件"
          exit 1
        fi
        
        # 下载APK
        apk_source_name=$(basename "$apk_download_url")
        curl -sL "$apk_download_url" -o "$WORK_DIR/$apk_source_name"
        if [ ! -f "$WORK_DIR/$apk_source_name" ]; then
          echo "错误: 稳定版APK下载失败"
          exit 1
        fi
        
        # 5. 同步到目标位置
        echo "同步文件到目标位置..."
        mkdir -p apk
        mv "$WORK_DIR/$apk_source_name" "$STABLE_TARGET_PATH"
        
        # 验证文件同步
        if [ ! -f "$STABLE_TARGET_PATH" ]; then
          echo "错误: 文件同步失败"
          exit 1
        fi
        
        # 6. 更新版本文件
        echo "更新版本文件..."
        UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq \
          --arg stable_key "$STABLE_TARGET_NAME" \
          --arg stable_value "$STABLE_VERSION,$RELEASE_DATE" \
          '.[$stable_key] = $stable_value')
          
        echo "$UPDATED_VERSION_JSON" > "$VERSION_FILE"
        
        # 验证版本文件更新
        if ! jq -e ".\"$STABLE_TARGET_NAME\"" "$VERSION_FILE" >/dev/null; then
          echo "错误: 版本文件更新失败"
          exit 1
        fi
        
        echo "稳定版同步完成"

    - name: Set up Python for Beta Sync
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies for Beta Sync
      run: |
        pip install telethon pytz

    - name: Sync Beta from Telegram
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: "NagramX"
        BETA_TARGET_NAME: "nagramx-beta.apk"
      run: |
        python - << "EOF"
        import os
        import json
        import sys
        import re
        import time
        import logging
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        BETA_TARGET_NAME = os.environ.get("BETA_TARGET_NAME", "nagramx-beta.apk")
        APK_DIR = "apk"
        VERSION_FILE = "version.txt"
        WORK_DIR = os.path.join(os.getcwd(), "temp_beta_apk")
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = logging.getLogger()
        
        def parse_beta_version(filename):
            """从文件名解析测试版版本号"""
            pattern = r'NagramX-v(\d+\.\d+\.\d+)'
            match = re.search(pattern, filename)
            if match:
                return f"v{match.group(1)}"
            return None
        
        async def get_latest_beta_apk(client, channel_name):
            """获取最新的测试版APK文件"""
            try:
                log.info(f"连接Telegram频道: {channel_name}")
                entity = await client.get_entity(channel_name)
                
                latest_apk = None
                
                # 获取最新的20条消息
                async for message in client.iter_messages(entity, limit=20):
                    if message.media and hasattr(message.media, "document"):
                        for attr in message.media.document.attributes:
                            if isinstance(attr, DocumentAttributeFilename):
                                filename = attr.file_name
                                if filename.endswith("-arm64-v8a.apk") and "NagramX-v" in filename:
                                    version = parse_beta_version(filename)
                                    if not version:
                                        continue
                                    if not latest_apk or message.date > latest_apk['message'].date:
                                        latest_apk = {
                                            "message": message,
                                            "filename": filename,
                                            "version": version
                                        }
                return latest_apk
            except Exception as e:
                log.error(f"获取消息失败: {str(e)}")
                return None
        
        async def download_apk(client, message, filename):
            """下载APK文件到临时目录"""
            download_path = os.path.join(WORK_DIR, filename)
            log.info(f"下载APK: {filename}")
            await client.download_media(message, file=download_path)
            return download_path
        
        def get_current_versions():
            """获取当前版本信息"""
            version_path = os.path.join(os.getcwd(), VERSION_FILE)
            if os.path.exists(version_path):
                try:
                    with open(version_path, "r") as f:
                        return json.load(f)
                except:
                    return {}
            return {}
        
        def check_need_update(current_versions, new_version, new_date, target_path):
            """检查是否需要更新"""
            # 1. 检查目标文件是否存在
            if not os.path.exists(target_path):
                log.info(f"目标文件不存在: {target_path}")
                return True
                
            # 2. 检查版本键值是否存在
            if BETA_TARGET_NAME not in current_versions:
                log.info(f"版本键值不存在: {BETA_TARGET_NAME}")
                return True
                
            # 3. 对比版本和日期
            current_value = current_versions[BETA_TARGET_NAME]
            current_version, current_date = current_value.split(",", 1) if "," in current_value else (current_value, "")
            
            if new_version != current_version:
                log.info(f"版本变化: {current_version} -> {new_version}")
                return True
                
            if new_date != current_date:
                log.info(f"日期变化: {current_date} -> {new_date}")
                return True
                
            return False
        
        async def main():
            # 验证环境变量
            required_env = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION']
            missing = [var for var in required_env if not os.environ.get(var)]
            if missing:
                log.error(f"缺少环境变量: {', '.join(missing)}")
                return 1
            
            # 准备目录
            os.makedirs(WORK_DIR, exist_ok=True)
            os.makedirs(APK_DIR, exist_ok=True)
            
            # 连接Telegram
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH']
            )
            
            try:
                await client.start()
                channel_name = os.environ.get('TELEGRAM_CHANNEL', 'NagramX')
                
                # 获取最新的测试版APK
                beta_apk = await get_latest_beta_apk(client, channel_name)
                if not beta_apk:
                    log.info("未找到测试版APK")
                    return 0
                
                log.info(f"找到测试版: {beta_apk['filename']}, 版本: {beta_apk['version']}")
                
                # 转换日期为北京时间
                utc8 = pytz.timezone('Asia/Shanghai')
                release_date = beta_apk['message'].date.astimezone(utc8)
                date_str = release_date.strftime('%Y-%m-%d')
                
                # 目标路径
                target_path = os.path.join(APK_DIR, BETA_TARGET_NAME)
                current_versions = get_current_versions()
                
                # 检查是否需要更新
                if not check_need_update(current_versions, beta_apk['version'], date_str, target_path):
                    log.info(f"测试版已是最新版本: {beta_apk['version']}")
                    return 0
                
                # 下载APK
                apk_path = await download_apk(client, beta_apk['message'], beta_apk['filename'])
                if not os.path.exists(apk_path):
                    log.error("下载失败")
                    return 1
                
                # 移动文件
                os.rename(apk_path, target_path)
                log.info(f"文件保存到: {target_path}")
                
                # 验证文件同步
                if not os.path.exists(target_path):
                    log.error("文件同步失败")
                    return 1
                
                # 更新版本文件
                current_versions[BETA_TARGET_NAME] = f"{beta_apk['version']},{date_str}"
                with open(VERSION_FILE, "w") as f:
                    json.dump(current_versions, f, indent=2)
                
                # 验证版本文件更新
                if not os.path.exists(VERSION_FILE) or BETA_TARGET_NAME not in current_versions:
                    log.error("版本文件更新失败")
                    return 1
                    
                log.info("版本文件已更新")
                return 0
                
            except Exception as e:
                log.error(f"处理出错: {str(e)}")
                return 1
            finally:
                await client.disconnect()
        
        if __name__ == "__main__":
            import asyncio
            sys.exit(asyncio.run(main()))
        EOF

    - name: Validate sync results
      run: |
        echo "验证同步结果..."
        
        # 验证稳定版文件
        if [ -f "apk/nagramx.apk" ]; then
          echo "稳定版文件存在"
        else
          echo "错误: 稳定版文件缺失"
          exit 1
        fi
        
        # 验证测试版文件
        if [ -f "apk/nagramx-beta.apk" ]; then
          echo "测试版文件存在"
        else
          echo "测试版文件缺失 (可能未更新)"
        fi
        
        # 验证版本文件
        if [ -f "version.txt" ]; then
          echo "版本文件存在"
          echo "版本文件内容:"
          cat version.txt
        else
          echo "错误: 版本文件缺失"
          exit 1
        fi
        
        echo "同步验证完成"

    - name: Sync with remote repository
      run: |
        echo "同步远程仓库更改..."
        
        # 拉取远程更改，使用 merge 策略
        git pull origin main --no-rebase --allow-unrelated-histories
        
        # 如果有冲突，使用远程版本
        if git status | grep -q "both modified"; then
          echo "检测到冲突，使用远程版本..."
          git checkout --theirs -- .
          git add .
        fi
        
        echo "远程同步完成"

    - name: Commit and Push Changes
      run: |
        # 检查是否有文件变更
        echo "检查文件变更..."
        git status
        
        if git diff-index --quiet HEAD --; then
          echo "没有需要提交的更改"
          exit 0
        fi

        # 添加变更
        echo "添加变更文件..."
        git add apk/ version.txt
        
        # 提交更改
        echo "提交更改..."
        git commit -m "同步NagramX更新 [${{ github.run_id }}]"
        
        # 推送更改
        echo "推送更改..."
        git push origin main
        
        echo "推送成功"
        
    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "NagramX Sync from Source Repository"
          repository: ${{ github.repository }}