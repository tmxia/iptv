name: NagramX Sync from Source Repository

on:
  schedule:
    - cron: '0 */24 * * *'  # 每24小时运行一次
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Run sync script
      env:
        SOURCE_REPO: "risin42/NagramX"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APK_PATTERN: "arm64-v8a.apk"
        ANDROID_TARGET_NAME: "nagramx.apk"
      run: |
        # 目标文件路径
        ANDROID_TARGET_PATH="apk/$ANDROID_TARGET_NAME"
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 获取所有发布版（只取稳定版）
        echo "获取稳定版本信息..."
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ $? -ne 0 ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取最新稳定版（过滤掉预发布版）
        LATEST_STABLE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == false)) | sort_by(.published_at) | reverse | .[0]')
        if [ -z "$LATEST_STABLE_RELEASE" ] || [ "$LATEST_STABLE_RELEASE" = "null" ]; then
          echo "错误: 未找到稳定版本"
          exit 1
        fi
        
        # 提取发布日期并转换为北京时间 (YYYY-MM-DD)
        STABLE_PUBLISHED_AT=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.published_at')
        RELEASE_DATE=$(TZ=UTC date -d "$STABLE_PUBLISHED_AT" +'%Y-%m-%d')
        
        # 关键修复：从发布标题中提取完整版本号并添加 'v' 前缀
        RAW_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.name' | grep -oP '(\d+\.)+\d+' | head -1)
        if [ -z "$RAW_VERSION" ]; then
          # 如果无法从标题提取，则使用标签名作为备选
          RAW_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.tag_name')
        fi
        
        # 确保版本号以 'v' 开头
        if [[ ! "$RAW_VERSION" =~ ^v ]]; then
          STABLE_VERSION="v$RAW_VERSION"
        else
          STABLE_VERSION="$RAW_VERSION"
        fi
        
        echo "源仓库最新稳定版: $STABLE_VERSION (发布于: $RELEASE_DATE)"

        # 检查本地版本文件
        if [ ! -f "version.txt" ]; then
          echo "{}" > version.txt
        fi
        
        # 读取当前版本信息
        CURRENT_VERSION_JSON=$(cat version.txt)
        
        # 解析当前版本和日期
        CURRENT_ANDROID_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$ANDROID_TARGET_NAME\"")
        
        # 分离版本和日期
        CURRENT_ANDROID_VERSION=""
        CURRENT_ANDROID_DATE=""
        if [ "$CURRENT_ANDROID_FULL" != "null" ] && [[ "$CURRENT_ANDROID_FULL" == *,* ]]; then
          CURRENT_ANDROID_VERSION=$(echo "$CURRENT_ANDROID_FULL" | cut -d, -f1)
          CURRENT_ANDROID_DATE=$(echo "$CURRENT_ANDROID_FULL" | cut -d, -f2)
        fi
        
        echo "当前Android版本: ${CURRENT_ANDROID_VERSION:-无} (日期: ${CURRENT_ANDROID_DATE:-无})"

        # 检查是否需要更新
        need_update=false
        
        # 检查Android版本和文件
        if [ "$STABLE_VERSION" != "$CURRENT_ANDROID_VERSION" ] || [ ! -f "$ANDROID_TARGET_PATH" ]; then
          echo "Android需要更新: 版本不匹配或文件不存在"
          need_update=true
        fi
        
        if [ "$need_update" = false ]; then
          echo "版本相同且文件存在，无需更新"
          # 继续执行后续步骤（测试版同步）
        else
          # 下载新版本文件
          echo "下载新版本文件..."
          
          # 查找Android APK文件
          apk_download_url=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.assets[] | select(.name | contains("'$APK_PATTERN'")) | .browser_download_url' | head -1)
          if [ -z "$apk_download_url" ]; then
            echo "错误: 未找到匹配的Android APK文件"
            exit 1
          fi
          
          # 确保apk目录存在
          mkdir -p apk
          
          # 下载Android APK
          apk_source_name=$(basename "$apk_download_url")
          echo "下载Android APK: $apk_source_name"
          curl -sL "$apk_download_url" -o "$WORK_DIR/$apk_source_name"
          if [ ! -f "$WORK_DIR/$apk_source_name" ]; then
            echo "错误: Android APK下载失败"
            exit 1
          fi
          
          # 重命名并移动到目标位置
          mv "$WORK_DIR/$apk_source_name" "$ANDROID_TARGET_PATH"
          echo "文件已保存到: $ANDROID_TARGET_PATH"

          # 更新版本文件（保留其他键值，添加日期）
          UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq \
            --arg android_key "$ANDROID_TARGET_NAME" \
            --arg android_value "$STABLE_VERSION,$RELEASE_DATE" \
            '.[$android_key] = $android_value')
            
          echo "$UPDATED_VERSION_JSON" > version.txt
        fi

    - name: Set up Python for Beta Sync
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies for Beta Sync
      run: |
        pip install telethon requests pytz

    - name: Sync Beta from Telegram
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL || 'NagramX' }}
        BETA_APK_PATTERN: "arm64-v8a.apk"
        BETA_TARGET_NAME: "nagramx-beta.apk"
      run: |
        python - << "EOF"
        import os
        import json
        import sys
        import re
        import time
        import logging
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        BETA_APK_PATTERN = os.environ.get("BETA_APK_PATTERN", "arm64-v8a.apk")
        BETA_TARGET_NAME = os.environ.get("BETA_TARGET_NAME", "nagramx-beta.apk")
        APK_DIR = "apk"
        WORK_DIR = os.path.join(os.getcwd(), "temp_beta_apk")
        os.makedirs(WORK_DIR, exist_ok=True)
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = logging.getLogger()
        
        def parse_beta_version(filename):
            """从文件名解析测试版版本号"""
            # 示例文件名: NagramX-v11.12.0-19b801a(1211)-arm64-v8a.apk
            pattern = r'NagramX-v(\d+\.\d+\.\d+)-([a-f0-9]+)\(\d+\)-arm64-v8a\.apk'
            match = re.search(pattern, filename)
            if match:
                main_ver = match.group(1)
                commit_ver = match.group(2)
                return f"v{main_ver}-{commit_ver}"
            return None
        
        async def get_latest_beta_apk(client, channel_name):
            """获取最新的测试版APK文件"""
            try:
                log.info(f"连接Telegram频道: {channel_name}")
                entity = await client.get_entity(channel_name)
                
                latest_apk = None
                latest_date = None
                
                # 获取最新的100条消息
                async for message in client.iter_messages(entity, limit=100):
                    if message.media:
                        for attr in message.media.document.attributes:
                            if isinstance(attr, DocumentAttributeFilename):
                                filename = attr.file_name
                                if BETA_APK_PATTERN in filename:
                                    # 解析版本号
                                    beta_version = parse_beta_version(filename)
                                    if not beta_version:
                                        log.warning(f"无法解析版本号: {filename}, 跳过")
                                        continue
                                    
                                    # 记录最新文件
                                    if not latest_apk or message.date > latest_date:
                                        latest_apk = {
                                            "message": message,
                                            "filename": filename,
                                            "version": beta_version
                                        }
                                        latest_date = message.date
                return latest_apk
            except Exception as e:
                log.error(f"获取Telegram消息失败: {str(e)}")
                return None
        
        async def download_apk(client, message, filename):
            """下载APK文件到临时目录"""
            download_path = os.path.join(WORK_DIR, filename)
            log.info(f"开始下载: {filename}")
            start_time = time.time()
            await client.download_media(message, file=download_path)
            elapsed = time.time() - start_time
            log.info(f"下载完成, 耗时: {elapsed:.2f}秒")
            return download_path
        
        def get_current_versions():
            """获取当前版本信息"""
            version_path = os.path.join(os.getcwd(), "version.txt")
            if os.path.exists(version_path):
                try:
                    with open(version_path, "r") as f:
                        return json.load(f)
                except:
                    log.warning("版本文件格式错误，将重置")
            return {}
        
        def update_version_file(apk_key, version, date_str):
            """更新版本文件"""
            version_path = os.path.join(os.getcwd(), "version.txt")
            current_versions = get_current_versions()
            current_versions[apk_key] = f"{version},{date_str}"
            
            with open(version_path, "w") as f:
                json.dump(current_versions, f, indent=2)
            log.info(f"更新版本文件: {apk_key} = {version},{date_str}")
        
        async def main():
            # 验证环境变量
            required_env = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION']
            missing = [var for var in required_env if not os.environ.get(var)]
            if missing:
                log.error(f"缺少环境变量: {', '.join(missing)}")
                return 1
            
            # 连接Telegram
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH']
            )
            
            try:
                await client.start()
                
                # 获取频道名称
                channel_name = os.environ.get('TELEGRAM_CHANNEL', 'NagramX')
                
                # 获取最新的测试版APK
                beta_apk = await get_latest_beta_apk(client, channel_name)
                if not beta_apk:
                    log.info("未找到测试版APK文件")
                    return 0
                
                log.info(f"找到测试版APK: {beta_apk['filename']}, 版本: {beta_apk['version']}")
                
                # 获取当前版本
                current_versions = get_current_versions()
                current_beta = current_versions.get(BETA_TARGET_NAME, "")
                current_beta_ver = current_beta.split(',')[0] if current_beta else ""
                
                # 转换日期为北京时间 (YYYY-MM-DD)
                utc8 = pytz.timezone('Asia/Shanghai')
                release_date = beta_apk['message'].date.astimezone(utc8)
                date_str = release_date.strftime('%Y-%m-%d')
                
                # 检查是否需要更新
                if current_beta_ver == beta_apk['version']:
                    log.info(f"测试版已是最新版本: {beta_apk['version']}")
                    return 0
                
                # 下载APK
                apk_path = await download_apk(client, beta_apk['message'], beta_apk['filename'])
                if not os.path.exists(apk_path):
                    log.error("APK下载失败")
                    return 1
                
                # 确保目录存在
                os.makedirs(APK_DIR, exist_ok=True)
                target_path = os.path.join(APK_DIR, BETA_TARGET_NAME)
                
                # 移动并重命名文件
                os.rename(apk_path, target_path)
                log.info(f"测试版APK已保存到: {target_path}")
                
                # 更新版本文件
                update_version_file(BETA_TARGET_NAME, beta_apk['version'], date_str)
                return 0
                
            except Exception as e:
                log.error(f"处理过程中出错: {str(e)}")
                return 1
            finally:
                await client.disconnect()
        
        if __name__ == "__main__":
            import asyncio
            sys.exit(asyncio.run(main()))
        EOF

    - name: Commit changes
      run: |
        # 检查是否有更改
        if git diff-index --quiet HEAD --; then
          echo "没有需要提交的更改"
          exit 0
        fi

        # 提交更改
        git add apk/ version.txt
        git commit -m "同步NagramX更新"
        
        # 推送到远程仓库
        echo "推送到远程仓库..."
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin HEAD:${{ github.ref }}
        
        if [ $? -eq 0 ]; then
          echo "推送成功"
        else
          echo "错误: 推送失败"
          exit 1
        fi

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "NagramX Sync from Source Repository"
          repository: ${{ github.repository }}