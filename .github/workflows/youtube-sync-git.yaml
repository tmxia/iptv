name: YouTube APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时运行一次
  workflow_dispatch:

# 添加并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1
        lfs: true  # 启用LFS支持

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase false  # 改为merge方式避免冲突
        
    - name: Setup Git LFS
      run: |
        git lfs install
        # 确保LFS跟踪配置
        git lfs track "apk/youtube.apk"
        git lfs track "apk/youtube-music.apk"
        
    - name: Run sync script
      env:
        SOURCE_REPO: "NoName-exe/revanced"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        YOUTUBE_PATTERN: "youtube-revanced-v"
        YOUTUBE_MUSIC_PATTERN: "youtube-music-revanced-v"
        YOUTUBE_TARGET_NAME: "youtube.apk"
        YOUTUBE_MUSIC_TARGET_NAME: "youtube-music.apk"
      run: |
        # 目标文件路径
        YOUTUBE_TARGET_PATH="apk/$YOUTUBE_TARGET_NAME"
        YOUTUBE_MUSIC_TARGET_PATH="apk/$YOUTUBE_MUSIC_TARGET_NAME"
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 首先确保工作区干净并同步到最新
        echo "同步到远程最新版本..."
        git fetch origin
        git reset --hard origin/${{ github.ref_name }}
        
        # 确保apk目录存在
        mkdir -p apk

        # 获取所有发布版
        echo "获取发布版本信息..."
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ $? -ne 0 ]; then
          echo "错误: 无法获取发布信息"
          exit 1
        fi

        # 提取最新稳定版（只考虑非预发布版本）
        LATEST_STABLE_RELEASE=$(echo "$RELEASES_JSON" | jq -r 'map(select(.prerelease == false)) | sort_by(.published_at) | reverse | .[0]')

        # 检查是否找到有效的发布
        if [ -z "$LATEST_STABLE_RELEASE" ] || [ "$LATEST_STABLE_RELEASE" = "null" ]; then
          echo "错误: 未找到任何有效的稳定发布版本"
          exit 1
        fi

        SELECTED_VERSION=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.tag_name')
        SELECTED_PUBLISHED_AT=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.published_at')
        RELEASE_DATE=$(TZ=UTC date -d "$SELECTED_PUBLISHED_AT" +'%Y-%m-%d')
        
        echo "选择的发布版本: $SELECTED_VERSION (发布于: $RELEASE_DATE)"

        # 检查本地版本文件
        if [ ! -f "version.txt" ]; then
          echo "{}" > version.txt
        fi
        
        # 读取当前版本信息
        CURRENT_VERSION_JSON=$(cat version.txt)
        
        # 解析当前版本和日期
        CURRENT_YOUTUBE_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$YOUTUBE_TARGET_NAME\"")
        CURRENT_YOUTUBE_MUSIC_FULL=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$YOUTUBE_MUSIC_TARGET_NAME\"")
        
        # 分离版本和日期
        CURRENT_YOUTUBE_VERSION=""
        CURRENT_YOUTUBE_DATE=""
        if [ "$CURRENT_YOUTUBE_FULL" != "null" ] && [[ "$CURRENT_YOUTUBE_FULL" == *,* ]]; then
          CURRENT_YOUTUBE_VERSION=$(echo "$CURRENT_YOUTUBE_FULL" | cut -d, -f1)
          CURRENT_YOUTUBE_DATE=$(echo "$CURRENT_YOUTUBE_FULL" | cut -d, -f2)
        fi
        
        CURRENT_YOUTUBE_MUSIC_VERSION=""
        CURRENT_YOUTUBE_MUSIC_DATE=""
        if [ "$CURRENT_YOUTUBE_MUSIC_FULL" != "null" ] && [[ "$CURRENT_YOUTUBE_MUSIC_FULL" == *,* ]]; then
          CURRENT_YOUTUBE_MUSIC_VERSION=$(echo "$CURRENT_YOUTUBE_MUSIC_FULL" | cut -d, -f1)
          CURRENT_YOUTUBE_MUSIC_DATE=$(echo "$CURRENT_YOUTUBE_MUSIC_FULL" | cut -d, -f2)
        fi
        
        echo "当前YouTube版本: ${CURRENT_YOUTUBE_VERSION:-无} (日期: ${CURRENT_YOUTUBE_DATE:-无})"
        echo "当前YouTube Music版本: ${CURRENT_YOUTUBE_MUSIC_VERSION:-无} (日期: ${CURRENT_YOUTUBE_MUSIC_DATE:-无})"

        # 检查是否需要更新
        need_update=false
        
        # 检查YouTube版本和文件
        if [ "$SELECTED_VERSION" != "$CURRENT_YOUTUBE_VERSION" ] || [ ! -f "$YOUTUBE_TARGET_PATH" ]; then
          echo "YouTube需要更新: 版本不匹配或文件不存在"
          need_update=true
        fi
        
        # 检查YouTube Music版本和文件
        if [ "$SELECTED_VERSION" != "$CURRENT_YOUTUBE_MUSIC_VERSION" ] || [ ! -f "$YOUTUBE_MUSIC_TARGET_PATH" ]; then
          echo "YouTube Music需要更新: 版本不匹配或文件不存在"
          need_update=true
        fi
        
        if [ "$need_update" = false ]; then
          echo "版本相同且文件存在，无需更新"
          exit 0
        fi

        # 下载新版本文件
        echo "下载新版本文件..."
        
        # 查找YouTube APK文件 - 精确匹配all架构
        youtube_download_url=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.assets[] | select(.name | test("youtube-revanced-v[0-9.]+-all\\.apk$")) | .browser_download_url' | head -1)
        if [ -z "$youtube_download_url" ]; then
          echo "错误: 未找到匹配的YouTube APK文件"
          exit 1
        fi
        
        # 查找YouTube Music APK文件 - 精确匹配arm64-v8a架构
        youtube_music_download_url=$(echo "$LATEST_STABLE_RELEASE" | jq -r '.assets[] | select(.name | test("youtube-music-revanced-v[0-9.]+-arm64-v8a\\.apk$")) | .browser_download_url' | head -1)
        if [ -z "$youtube_music_download_url" ]; then
          echo "错误: 未找到匹配的YouTube Music APK文件"
          exit 1
        fi
        
        # 下载YouTube APK
        youtube_source_name=$(basename "$youtube_download_url")
        echo "下载YouTube APK: $youtube_source_name"
        curl -sL -o "$YOUTUBE_TARGET_PATH" "$youtube_download_url"
        if [ ! -f "$YOUTUBE_TARGET_PATH" ]; then
          echo "错误: YouTube APK下载失败"
          exit 1
        fi
        
        # 下载YouTube Music APK
        youtube_music_source_name=$(basename "$youtube_music_download_url")
        echo "下载YouTube Music APK: $youtube_music_source_name"
        curl -sL -o "$YOUTUBE_MUSIC_TARGET_PATH" "$youtube_music_download_url"
        if [ ! -f "$YOUTUBE_MUSIC_TARGET_PATH" ]; then
          echo "错误: YouTube Music APK下载失败"
          exit 1
        fi
        
        echo "文件已保存到: $YOUTUBE_TARGET_PATH 和 $YOUTUBE_MUSIC_TARGET_PATH"

        # 更新版本文件（保留其他键值，添加日期）
        UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq \
          --arg youtube_key "$YOUTUBE_TARGET_NAME" \
          --arg youtube_value "$SELECTED_VERSION,$RELEASE_DATE" \
          --arg youtube_music_key "$YOUTUBE_MUSIC_TARGET_NAME" \
          --arg youtube_music_value "$SELECTED_VERSION,$RELEASE_DATE" \
          '.[$youtube_key] = $youtube_value | .[$youtube_music_key] = $youtube_music_value')
          
        echo "$UPDATED_VERSION_JSON" > version.txt

        # 添加所有更改
        git add apk/ version.txt .gitattributes
        
        # 检查是否有更改
        if git diff-index --quiet HEAD --; then
          echo "没有需要提交的更改"
          exit 0
        fi

        # 提交更改
        git commit -m "更新YouTube ReVanced版本: $SELECTED_VERSION (日期: $RELEASE_DATE)"
        
        # 推送到远程仓库
        echo "推送到远程仓库..."
        git remote set-url origin https://x-access-token:$TOKEN@github.com/${{ github.repository }}.git
        
        # 使用强制推送以避免冲突
        echo "执行强制推送..."
        git push -f origin HEAD:${{ github.ref }}
        
        if [ $? -eq 0 ]; then
          echo "推送成功"
        else
          echo "错误: 推送失败"
          exit 1
        fi

        echo "同步完成! 状态: 成功"
        echo "YouTube文件: $YOUTUBE_TARGET_PATH ($SELECTED_VERSION, $RELEASE_DATE)"
        echo "YouTube Music文件: $YOUTUBE_MUSIC_TARGET_PATH ($SELECTED_VERSION, $RELEASE_DATE)"
        exit 0

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "YouTube APK Sync from Source Repository"
          repository: ${{ github.repository }}