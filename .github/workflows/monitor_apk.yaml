name: APK Directory Monitor

on:
  push:
    paths:
      - 'apk/**'
    branches: [ main ]

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libgit2-dev
        pip install telethon pygit2

    - name: Run Telethon detection script
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        cat << 'EOF' > apk_monitor.py
        import os
        import re
        import pygit2
        import asyncio
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from urllib.parse import quote
        
        # 调试：检查环境变量
        print("环境变量状态:")
        print(f"  TELEGRAM_API_ID: {'已设置' if os.getenv('TELEGRAM_API_ID') else '未设置'}")
        print(f"  TELEGRAM_API_HASH: {'已设置' if os.getenv('TELEGRAM_API_HASH') else '未设置'}")
        print(f"  TELEGRAM_SESSION: {'已设置' if os.getenv('TELEGRAM_SESSION') else '未设置'}")
        print(f"  TELEGRAM_CHANNEL: {'已设置' if os.getenv('TELEGRAM_CHANNEL') else '未设置'}")
        
        # 增强版版本号提取
        def extract_version(filename):
            patterns = [
                r'[vV]?(\d+\.\d+(?:\.\d+)?)(?:[-_](beta|alpha|rc|preview)\d*)?',  # v1.2.3
                r'_v?(\d+\.\d+(?:\.\d+)?)',  # _1.2.3
                r'[vV](\d+)',                 # v123
                r'_(\d+)',                    # _123
                r'(\d+\.\d+)',                # 1.2
                r'(\d+)'                      # 123
            ]
            
            for pattern in patterns:
                match = re.search(pattern, filename)
                if match:
                    return match.group(1)
            return "unknown"
        
        # 文件大小格式化
        def format_size(size):
            if size > 1024 * 1024:
                return f"{size/(1024*1024):.1f} MB"
            if size > 1024:
                return f"{size/1024:.1f} KB"
            return f"{size} bytes"
        
        async def send_telegram_message(files):
            """使用Telethon发送消息"""
            try:
                api_id = int(os.getenv("TELEGRAM_API_ID"))
                api_hash = os.getenv("TELEGRAM_API_HASH")
                session_str = os.getenv("TELEGRAM_SESSION")
                channel = os.getenv("TELEGRAM_CHANNEL")
                
                if not all([api_id, api_hash, session_str, channel]):
                    print("❌ Telegram配置不完整")
                    return False
                
                async with TelegramClient(
                    StringSession(session_str), 
                    api_id, 
                    api_hash
                ) as client:
                    # 构建消息
                    message = "📱 **APK目录更新通知**\n\n"
                    message += f"🔖 仓库: `{os.getenv('GITHUB_REPOSITORY')}`\n"
                    message += f"🆔 提交: [{os.getenv('GITHUB_SHA')[:7]}](https://github.com/{os.getenv('GITHUB_REPOSITORY')}/commit/{os.getenv('GITHUB_SHA')})\n\n"
                    message += f"📦 检测到 {len(files)} 个文件更新:\n\n"
                    
                    for file in files:
                        message += f"📄 **{file['name']}**\n"
                        message += f"  - 类型: `{file['type']}`\n"
                        message += f"  - 版本: `{file['version']}`\n"
                        message += f"  - 大小: `{file['size']}`\n"
                        message += f"  - [下载文件]({file['url']})\n\n"
                    
                    message += f"🔗 [查看仓库目录](https://github.com/{os.getenv('GITHUB_REPOSITORY')}/tree/main/apk)"
                    
                    await client.send_message(
                        entity=channel,
                        message=message,
                        parse_mode='md',
                        link_preview=False
                    )
                    return True
            except Exception as e:
                print(f"❌ Telethon错误: {str(e)}")
                return False
        
        def main():
            print("🚀 开始监控APK目录变更...")
            repo = pygit2.Repository('.')
            
            # 获取当前提交
            head_commit = repo.head.peel()
            print(f"当前提交: {head_commit.id}")
            
            # 获取父提交
            parent_commit = head_commit.parents[0] if head_commit.parents else None
            
            if not parent_commit:
                print("⚠️ 初始提交 - 无前一版本")
                return
            
            print(f"父提交: {parent_commit.id}")
            
            # 计算差异
            diff = repo.diff(parent_commit, head_commit)
            changed_files = []
            
            # 解析差异
            for delta in diff.deltas:
                file_path = delta.new_file.path or delta.old_file.path
                print(f"检测到变更: {file_path} [状态: {delta.status}]")
                
                # 只处理apk目录下的文件
                if not file_path.startswith('apk/'):
                    continue
                
                # 获取文件名
                filename = os.path.basename(file_path)
                
                # 尝试获取文件大小
                try:
                    entry = head_commit.tree[file_path]
                    blob = repo[entry.id]
                    file_size = format_size(blob.size)
                except:
                    file_size = "未知大小"
                
                # 获取文件扩展名
                file_ext = os.path.splitext(filename)[1][1:].upper() if '.' in filename else "文件"
                
                # 构建下载URL
                encoded_path = quote(file_path)
                raw_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/main/{encoded_path}"
                
                changed_files.append({
                    "name": filename,
                    "version": extract_version(filename),
                    "size": file_size,
                    "type": file_ext,
                    "url": raw_url
                })
            
            if not changed_files:
                print("✅ 未检测到APK文件变更")
                return
            
            print(f"📦 检测到 {len(changed_files)} 个文件变更:")
            for file in changed_files:
                print(f"  - {file['name']} (v{file['version']})")
            
            # 发送到Telegram
            loop = asyncio.get_event_loop()
            success = loop.run_until_complete(send_telegram_message(changed_files))
            
            if success:
                print("✅ Telegram通知发送成功!")
            else:
                print("❌ Telegram通知发送失败")
        
        if __name__ == "__main__":
            main()
        EOF
        
        python apk_monitor.py