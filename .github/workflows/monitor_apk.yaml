name: APK Update Monitor

on:
  push:
    paths:
      - 'apk/**'

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install telethon python-dotenv pygit2

    - name: Run detection script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        mkdir -p .github/scripts
        cat > .github/scripts/detect_apk_changes.py << 'EOF'
        # 下面是完整的Python脚本
        import os
        import re
        import pygit2
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from dotenv import load_dotenv
        
        load_dotenv()
        
        def get_file_history_info(repo, file_path):
            """获取文件的提交历史和版本信息"""
            try:
                # 获取文件的所有提交历史
                walker = repo.walk(repo.head.target)
                walker.set_sorting(pygit2.GIT_SORT_TIME)
                
                commits = []
                for commit in walker:
                    try:
                        # 检查文件在该提交中是否存在
                        if file_path in commit.tree:
                            commits.append({
                                "id": str(commit.id),
                                "short_id": str(commit.id)[:7],
                                "message": commit.message.strip(),
                                "date": datetime.fromtimestamp(commit.commit_time).strftime('%Y-%m-%d'),
                                "author": commit.author.name
                            })
                    except KeyError:
                        continue
                
                # 提取版本号（从最新提交消息中查找）
                latest_commit = commits[0] if commits else None
                version = "unknown"
                if latest_commit:
                    # 尝试从提交消息中提取版本号
                    version_match = re.search(r'v?(\d+\.\d+\.\d+)', latest_commit["message"])
                    if version_match:
                        version = version_match.group(1)
                    else:
                        # 使用短提交ID作为版本标识
                        version = latest_commit["short_id"]
                
                return {
                    "version": version,
                    "update_date": latest_commit["date"] if latest_commit else "",
                    "commit_history": commits
                }
            except Exception as e:
                print(f"Error getting history for {file_path}: {str(e)}")
                return {
                    "version": "unknown",
                    "update_date": "",
                    "commit_history": []
                }
        
        def main():
            repo_path = pygit2.discover_repository(os.getcwd())
            repo = pygit2.Repository(repo_path)
            
            # 获取当前提交
            current_commit = repo[repo.head.target]
            
            # 获取前一个提交
            try:
                last_commit = current_commit.parents[0]
            except IndexError:
                # 初始提交没有父提交
                last_commit = None
            
            # 检测变更的APK文件
            changed_apks = []
            apk_dir = "apk"
            
            if last_commit:
                # 比较差异
                diff = repo.diff(last_commit, current_commit)
            else:
                # 初始提交，与空树比较
                diff = current_commit.tree.diff_to_tree()
            
            for delta in diff.deltas:
                file_path = delta.new_file.path if delta.new_file.path else delta.old_file.path
                
                # 只处理apk目录下的文件
                if file_path.startswith(apk_dir) and delta.status in ('added', 'modified'):
                    # 获取文件历史信息
                    history_info = get_file_history_info(repo, file_path)
                    
                    # 构建下载URL
                    raw_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/{current_commit.id}/{file_path}"
                    
                    changed_apks.append({
                        "name": os.path.basename(file_path),
                        "version": history_info["version"],
                        "update_date": history_info["update_date"],
                        "url": raw_url,
                        "commit_count": len(history_info["commit_history"])
                    })
            
            if not changed_apks:
                print("No APK changes detected.")
                return
            
            # 准备Telegram消息
            message = "📱 APK 更新通知\n\n"
            for apk in changed_apks:
                message += (
                    f"🔹 文件: {apk['name']}\n"
                    f"➜ 版本: {apk['version']} (基于{apk['commit_count']}次提交)\n"
                    f"📅 更新日期: {apk['update_date']}\n"
                    f"⬇️ 下载: [点击这里]({apk['url']})\n\n"
                )
            
            # 发送到Telegram
            client = TelegramClient(
                StringSession(os.getenv("TELEGRAM_SESSION")),
                int(os.getenv("TELEGRAM_API_ID")),
                os.getenv("TELEGRAM_API_HASH")
            )
            
            async def send_message():
                await client.send_message(
                    entity=os.getenv("TELEGRAM_CHANNEL"),
                    message=message,
                    link_preview=False
                )
            
            with client:
                client.loop.run_until_complete(send_message())
            print("Update notification sent to Telegram.")
        
        if __name__ == "__main__":
            main()
        EOF
        python .github/scripts/detect_apk_changes.py