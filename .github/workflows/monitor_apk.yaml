name: APK Update Monitor

on:
  push:
    paths:
      - 'apk/**'
  workflow_dispatch:

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # 关键修复：获取最近2个提交用于差异比较

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libgit2-dev
        pip install telethon pygit2

    - name: Run detection script
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        cat << 'EOF' > detect_apk_changes.py
        import os
        import re
        import pygit2
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        
        def extract_version(filename):
            """直接从APK文件名中提取版本号（更可靠）"""
            patterns = [
                r'(\d+\.\d+\.\d+)',  # v1.2.3
                r'(\d+\.\d+)',       # v1.2
                r'[^\d]*(\d+)'       # v123
            ]
            for pattern in patterns:
                match = re.search(pattern, filename)
                if match:
                    return match.group(1)
            return "unknown"
        
        def main():
            repo = pygit2.Repository('.')
            head = repo.head
            if len(head.peel().parents) < 1:
                print("Initial commit - no previous version")
                return
            
            # 获取当前和上一个提交
            new_commit = head.peel()
            old_commit = new_commit.parents[0]
            
            # 计算差异
            diff = repo.diff(old_commit, new_commit)
            changed_apks = []
            
            for delta in diff.deltas:
                file_path = delta.new_file.path if delta.new_file.path else delta.old_file.path
                
                # 修正路径检测：兼容GitHub工作空间结构
                if not re.match(r'^(apk/|.*/apk/)', file_path):
                    continue
                    
                if delta.status in (pygit2.GIT_DELTA_ADDED, pygit2.GIT_DELTA_MODIFIED):
                    # 直接从文件名提取版本
                    version = extract_version(os.path.basename(file_path))
                    
                    # 获取文件提交时间（使用当前提交时间）
                    commit_time = datetime.fromtimestamp(new_commit.commit_time).strftime('%Y-%m-%d')
                    
                    # 构建下载URL
                    raw_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/{new_commit.id}/{file_path}"
                    
                    changed_apks.append({
                        "name": os.path.basename(file_path),
                        "version": version,
                        "date": commit_time,
                        "url": raw_url
                    })
            
            if not changed_apks:
                print("No APK changes detected.")
                return
            
            # 构建Telegram消息
            message = "📱 *APK 更新通知*\n\n"
            for apk in changed_apks:
                message += f"🔹 [{apk['name']}]({apk['url']})\n"
                message += f"   版本: `{apk['version']}` | 日期: `{apk['date']}`\n\n"
            
            # 发送到Telegram
            client = TelegramClient(
                StringSession(os.getenv("TELEGRAM_SESSION")),
                int(os.getenv("TELEGRAM_API_ID")),
                os.getenv("TELEGRAM_API_HASH")
            )
            
            async def send_message():
                await client.send_message(
                    entity=os.getenv("TELEGRAM_CHANNEL"),
                    message=message,
                    parse_mode='markdown',
                    link_preview=False
                )
            
            with client:
                client.loop.run_until_complete(send_message())
            print("Telegram notification sent successfully.")
        
        if __name__ == "__main__":
            main()
        EOF
        
        python detect_apk_changes.py