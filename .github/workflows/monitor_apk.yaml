name: Real-time Directory Monitor

on:
  push:
    paths:
      - 'apk/**'       # 监控apk目录下的所有文件
      - 'kernels/**'   # 监控kernels目录下的所有文件
      - 'version.txt'  # 新增版本文件监控
    branches: [ main ]

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libgit2-dev
        pip install telethon pygit2

    - name: Run enhanced detection script
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        cat << 'EOF' > directory_monitor.py
        import os
        import re
        import pygit2
        import asyncio
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from urllib.parse import quote
        
        # 增强版版本号提取 - 适用于所有文件类型
        def extract_version(filename):
            patterns = [
                r'[vV]?(\d+\.\d+(?:\.\d+)?)(?:[-_](beta|alpha|rc|preview)\d*)?',  # v1.2.3
                r'_v?(\d+\.\d+(?:\.\d+)?)',  # _1.2.3
                r'[vV](\d+)',                 # v123
                r'_(\d+)',                    # _123
                r'(\d+\.\d+)',                # 1.2
                r'(\d+)'                      # 123
            ]
            
            for pattern in patterns:
                match = re.search(pattern, filename)
                if match:
                    return match.group(1)
            return "unknown"
        
        def generate_proxy_urls(raw_url):
            """生成代理下载链接"""
            return {
                "gh-proxy": f"https://gh-proxy.com/{raw_url}",
                "github-speedup": f"https://github-speedup.com/{raw_url}"
            }
        
        def get_file_type(path):
            """根据路径确定文件类型"""
            if path.startswith('apk/'):
                return "App File"
            elif path.startswith('kernels/'):
                return "Kernel File"
            elif path == 'version.txt':
                return "Version File"
            return "File"
        
        def get_file_icon(path):
            """获取文件类型图标"""
            if path.endswith('.apk'):
                return "📱"
            elif path.endswith('.zip'):
                return "📦"
            elif path.endswith('.txt'):
                return "📝"
            return "📄"
        
        async def send_telegram_message(files):
            """使用Telethon发送消息"""
            try:
                api_id = int(os.getenv("TELEGRAM_API_ID"))
                api_hash = os.getenv("TELEGRAM_API_HASH")
                session_str = os.getenv("TELEGRAM_SESSION")
                channel = os.getenv("TELEGRAM_CHANNEL")
                
                if not all([api_id, api_hash, session_str, channel]):
                    print("❌ Telegram配置不完整")
                    return False
                
                async with TelegramClient(
                    StringSession(session_str), 
                    api_id, 
                    api_hash
                ) as client:
                    # 构建简洁消息
                    message = "🚀 **实时文件更新通知**\n\n"
                    message += f"🔖 仓库: `{os.getenv('GITHUB_REPOSITORY')}`\n"
                    message += f"🆔 提交: [{os.getenv('GITHUB_SHA')[:7]}](https://github.com/{os.getenv('GITHUB_REPOSITORY')}/commit/{os.getenv('GITHUB_SHA')})\n\n"
                    
                    # 添加文件列表
                    for file in files:
                        # 使用反引号包裹文件名，避免被解析为链接
                        icon = get_file_icon(file['path'])
                        file_type = get_file_type(file['path'])
                        message += f"{icon} **{file_type}**: `{file['name']}`\n"
                        message += f"  - 版本: `{file['version']}`\n"
                        message += f"  - 更新: `{file['date']}`\n"
                        message += f"  - [下载文件]({file['url']})\n\n"
                    
                    await client.send_message(
                        entity=channel,
                        message=message,
                        parse_mode='md',
                        link_preview=False
                    )
                    return True
            except Exception as e:
                print(f"❌ Telethon错误: {str(e)}")
                return False
        
        def send_email(files, receiver_email):
            """发送邮件通知"""
            try:
                # 从环境变量获取SMTP配置
                smtp_server = os.getenv("SMTP_SERVER")
                smtp_port = int(os.getenv("SMTP_PORT", 587))
                smtp_user = os.getenv("SMTP_USER")
                smtp_password = os.getenv("SMTP_PASSWORD")
                
                # 验证配置完整性
                if not all([smtp_server, smtp_user, smtp_password]):
                    print("❌ SMTP配置不完整")
                    return False
                
                # 构建邮件主题和内容
                subject = f"实时文件更新通知 - {os.getenv('GITHUB_REPOSITORY')}"
                
                # HTML格式的邮件内容
                html_content = f"""
                <html>
                <body>
                    <h2>🚀 实时文件更新通知</h2>
                    <p><strong>🔖 仓库:</strong> {os.getenv('GITHUB_REPOSITORY')}</p>
                    <p><strong>🆔 提交:</strong> <a href="https://github.com/{os.getenv('GITHUB_REPOSITORY')}/commit/{os.getenv('GITHUB_SHA')}">{os.getenv('GITHUB_SHA')[:7]}</a></p>
                    <p><strong>📦 检测到 {len(files)} 个文件更新:</strong></p>
                    <ul>
                """
                
                for file in files:
                    proxy_urls = generate_proxy_urls(file['url'])
                    icon = get_file_icon(file['path'])
                    file_type = get_file_type(file['path'])
                    html_content += f"""
                    <li>
                        <p><strong>{icon} {file_type}: {file['name']}</strong></p>
                        <ul>
                            <li><strong>版本:</strong> {file['version']}</li>
                            <li><strong>更新:</strong> {file['date']}</li>
                            <li><strong>下载地址:</strong> 
                                <a href="{file['url']}">原始地址</a> | 
                                <a href="{proxy_urls['gh-proxy']}">gh-proxy</a> | 
                                <a href="{proxy_urls['github-speedup']}">github-speedup</a>
                            </li>
                        </ul>
                    </li>
                    """
                
                html_content += """
                    </ul>
                    <p>此邮件由 GitHub Actions 自动发送</p>
                </body>
                </html>
                """
                
                # 创建邮件
                msg = MIMEMultipart()
                msg['From'] = smtp_user
                msg['To'] = receiver_email
                msg['Subject'] = subject
                msg.attach(MIMEText(html_content, 'html'))
                
                # 使用SSL连接SMTP服务器
                server = smtplib.SMTP_SSL(smtp_server, smtp_port)
                server.login(smtp_user, smtp_password)
                server.sendmail(smtp_user, receiver_email, msg.as_string())
                server.quit()
                
                print(f"✅ 邮件已发送至: {receiver_email}")
                return True
            except Exception as e:
                # 打印详细的错误信息
                import traceback
                traceback.print_exc()
                print(f"❌ 邮件发送失败: {str(e)}")
                return False
        
        def main():
            print("🚀 开始实时监控目录变更...")
            repo = pygit2.Repository('.')
            
            # 获取当前提交
            head_commit = repo.head.peel()
            print(f"当前提交: {head_commit.id}")
            
            # 获取父提交
            parent_commits = head_commit.parents
            if not parent_commits:
                print("⚠️ 初始提交 - 无前一版本")
                return
            
            # 使用第一个父提交进行比较
            parent_commit = parent_commits[0]
            print(f"父提交: {parent_commit.id}")
            
            # 计算差异
            diff = repo.diff(parent_commit, head_commit)
            changed_files = []
            
            # 解析差异
            for delta in diff.deltas:
                # 只处理新增和修改的文件，忽略删除的文件
                if delta.status not in (pygit2.GIT_DELTA_ADDED, pygit2.GIT_DELTA_MODIFIED):
                    continue
                
                file_path = delta.new_file.path or delta.old_file.path
                print(f"检测到变更: {file_path} [状态: {delta.status}]")
                
                # 处理所有监控目录和文件
                if (
                    file_path.startswith('apk/') or 
                    file_path.startswith('kernels/') or 
                    file_path == 'version.txt'
                ):
                    # 获取文件名
                    filename = os.path.basename(file_path)
                    
                    # 获取更新时间 (转换为UTC时间)
                    commit_time = datetime.utcfromtimestamp(head_commit.commit_time).strftime('%Y-%m-%d %H:%M UTC')
                    
                    # 构建原始下载URL
                    encoded_path = quote(file_path)
                    raw_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/main/{encoded_path}"
                    
                    changed_files.append({
                        "path": file_path,
                        "name": filename,
                        "version": extract_version(filename),
                        "date": commit_time,
                        "url": raw_url
                    })
            
            if not changed_files:
                print("✅ 未检测到文件变更")
                return
            
            print(f"📦 检测到 {len(changed_files)} 个文件变更:")
            for file in changed_files:
                print(f"  - {file['path']} (v{file['version']}, {file['date']})")
            
            # 发送到Telegram
            loop = asyncio.get_event_loop()
            telegram_success = loop.run_until_complete(send_telegram_message(changed_files))
            
            # 发送到邮箱
            email_receiver = os.getenv("EMAIL_RECEIVER")
            if email_receiver:
                email_success = send_email(changed_files, email_receiver)
            else:
                print("⚠️ 未配置EMAIL_RECEIVER，跳过邮件通知")
                email_success = False
            
            if telegram_success:
                print("✅ Telegram通知发送成功!")
            else:
                print("❌ Telegram通知发送失败")
            
            if email_success:
                print("✅ 邮件通知发送成功!")
            else:
                print("❌ 邮件通知发送失败")
        
        if __name__ == "__main__":
            main()
        EOF
        
        python directory_monitor.py