name: Real-time APK Directory Monitor

on:
  push:
    paths:
      - 'apk/**'  # 监控 apk 目录下的所有文件变化

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libgit2-dev
        pip install telethon pygit2

    - name: Run detection script
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        cat << 'EOF' > detect_file_changes.py
        import os
        import re
        import pygit2
        import asyncio
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        
        def extract_version(filename):
            """从文件名中提取版本号（支持多种格式）"""
            patterns = [
                r'_v?(\d+\.\d+\.\d+)',  # 匹配 v1.2.3 或 _1.2.3
                r'_v?(\d+\.\d+)',        # 匹配 v1.2 或 _1.2
                r'_v?(\d+)',             # 匹配 v123 或 _123
                r'[^\d]*(\d+\.\d+\.\d+)' # 匹配任意位置的 1.2.3
            ]
            for pattern in patterns:
                match = re.search(pattern, filename)
                if match:
                    return match.group(1)
            return "unknown"
        
        def main():
            repo = pygit2.Repository('.')
            
            # 获取当前提交
            try:
                new_commit = repo.revparse_single('HEAD')
            except KeyError:
                print("错误: 无法找到 HEAD 提交")
                return
            
            # 获取上一个提交
            try:
                old_commit = repo.revparse_single('HEAD~1')
            except KeyError:
                print("初始提交 - 无前一版本")
                return
            
            # 计算差异
            diff = repo.diff(old_commit, new_commit)
            changed_files = []
            
            for delta in diff.deltas:
                file_path = delta.new_file.path if delta.new_file.path else delta.old_file.path
                
                # 只处理 apk/ 目录下的文件（任何类型）
                if not file_path.startswith('apk/'):
                    continue
                
                # 检查文件状态
                if delta.status in (pygit2.GIT_DELTA_ADDED, pygit2.GIT_DELTA_MODIFIED):
                    # 从文件名提取版本
                    filename = os.path.basename(file_path)
                    version = extract_version(filename)
                    
                    # 获取文件提交时间
                    commit_time = datetime.utcfromtimestamp(new_commit.commit_time).strftime('%Y-%m-%d %H:%M UTC')
                    
                    # 构建下载URL
                    raw_url = f"https://raw.githubusercontent.com/{os.getenv('GITHUB_REPOSITORY')}/main/{file_path}"
                    
                    # 获取文件扩展名
                    file_ext = os.path.splitext(filename)[1][1:].upper() if '.' in filename else "文件"
                    
                    changed_files.append({
                        "name": filename,
                        "path": file_path,
                        "type": file_ext,
                        "version": version,
                        "date": commit_time,
                        "url": raw_url
                    })
            
            if not changed_files:
                print("未检测到文件变化。")
                return
            
            # 构建Telegram消息
            message = "📁 *目录更新通知*\n\n"
            message += f"检测到 {len(changed_files)} 个文件更新：\n\n"
            
            for file in changed_files:
                message += f"📄 [{file['name']}]({file['url']})\n"
                message += f"   • 类型: `{file['type']}`\n"
                message += f"   • 版本: `{file['version']}`\n"
                message += f"   • 更新时间: `{file['date']}`\n\n"
            
            # 添加仓库链接
            message += f"[查看仓库](https://github.com/{os.getenv('GITHUB_REPOSITORY')})"
            
            # 发送到Telegram
            async def send_to_telegram():
                try:
                    async with TelegramClient(
                        StringSession(os.getenv("TELEGRAM_SESSION")),
                        int(os.getenv("TELEGRAM_API_ID")),
                        os.getenv("TELEGRAM_API_HASH")
                    ) as client:
                        await client.send_message(
                            entity=os.getenv("TELEGRAM_CHANNEL"),
                            message=message,
                            parse_mode='markdown',
                            link_preview=False
                        )
                    print("Telegram通知发送成功！")
                except Exception as e:
                    print(f"发送Telegram通知失败: {str(e)}")
            
            asyncio.run(send_to_telegram())
        
        if __name__ == "__main__":
            main()
        EOF
        
        python detect_file_changes.py