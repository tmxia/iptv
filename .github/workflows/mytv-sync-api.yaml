name: MYTV APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */2 * * *'  # 每2小时运行一次
  workflow_dispatch:

# 使用原生并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 基于文件系统的锁机制
    - name: Acquire Repository Lock
      id: lock
      run: |
        LOCK_DIR="$GITHUB_WORKSPACE/.lock"
        LOCK_FILE="$LOCK_DIR/repo-lock"
        mkdir -p "$LOCK_DIR"
        
        for i in {1..20}; do
          if [ -f "$LOCK_FILE" ]; then
            echo "锁已被占用，等待重试 ($i/20)..."
            sleep 30
          else
            touch "$LOCK_FILE"
            echo "lock-acquired=true" >> $GITHUB_OUTPUT
            echo "成功获取锁"
            exit 0
          fi
        done
        
        echo "::error::无法在10分钟内获取锁"
        exit 1

    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config pull.rebase true
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
    - name: Run APK sync
      env:
        SOURCE_REPO: "mytv-android/mytv-android"
        STABLE_APK_PATTERN: "armeabi-v7a-sdk21-original.apk"
        PRE_RELEASE_APK_PATTERN: "armeabi-v7a-sdk21-original.apk"
        STABLE_KEY_NAME: "mytv-tv.apk"
        PRE_RELEASE_KEY_NAME: "mytv-tv-beta.apk"
      run: |
        set -euo pipefail
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        trap 'rm -rf "$WORK_DIR"' EXIT
        
        # 确保apk目录存在
        mkdir -p apk
        
        # 获取源仓库发布信息
        RELEASES_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/releases")
        if [ -z "$RELEASES_JSON" ]; then
          echo "::error::无法获取源仓库发布信息"
          exit 1
        fi
        
        # 版本规范化函数
        normalize_version() {
          echo "$1" | sed -E 's/^V/v/; s/^([^v])/v\1/'
        }
        
        # 版本信息提取函数
        extract_version_info() {
          local release_json="$1"
          local tag_name=$(jq -r '.tag_name' <<< "$release_json")
          local published_at=$(jq -r '.published_at' <<< "$release_json")
          local date_utc8=$(TZ=UTC date -d "$published_at" +'%Y-%m-%d')
          
          # 规范化版本号
          tag_name=$(normalize_version "$tag_name")
          
          echo "$tag_name $date_utc8"
        }
        
        # 获取并解析版本文件
        if [ -f "version.txt" ]; then
          CURRENT_VERSION_JSON=$(cat version.txt | jq -c . || echo "{}")
          echo "当前仓库版本文件内容:"
          echo "$CURRENT_VERSION_JSON" | jq .
        else
          CURRENT_VERSION_JSON="{}"
          echo "未找到版本文件，将创建新文件"
        fi
        
        # 提取当前仓库版本
        CURRENT_STABLE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$STABLE_KEY_NAME\"? // \"\"" | cut -d, -f1)
        CURRENT_STABLE_DATE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$STABLE_KEY_NAME\"? // \"\"" | cut -d, -f2)
        CURRENT_PRE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$PRE_RELEASE_KEY_NAME\"? // \"\"" | cut -d, -f1)
        CURRENT_PRE_DATE=$(echo "$CURRENT_VERSION_JSON" | jq -r ".\"$PRE_RELEASE_KEY_NAME\"? // \"\"" | cut -d, -f2)
        
        echo "当前仓库稳定版: ${CURRENT_STABLE:-无} (${CURRENT_STABLE_DATE:-无日期})"
        echo "当前仓库预发行版: ${CURRENT_PRE:-无} (${CURRENT_PRE_DATE:-无日期})"
        
        # 检查文件存在性函数
        check_file_exists() {
          local file_path="$1"
          if [ -f "$file_path" ] && [ -s "$file_path" ]; then
            echo "文件存在: $file_path"
            return 0
          else
            echo "文件不存在或为空: $file_path"
            return 1
          fi
        }
        
        # 处理稳定版
        LATEST_STABLE=$(echo "$RELEASES_JSON" | jq -r '[.[] | select(.prerelease == false)] | sort_by(.published_at) | reverse | .[0]')
        STABLE_UPDATED=false
        if [ -n "$LATEST_STABLE" ] && [ "$LATEST_STABLE" != "null" ]; then
          read NEW_STABLE_VERSION NEW_STABLE_DATE <<< $(extract_version_info "$LATEST_STABLE")
          echo "源仓库稳定版: $NEW_STABLE_VERSION ($NEW_STABLE_DATE)"
          
          # 检查是否需要更新：文件不存在或版本不同
          STABLE_FILE_PATH="apk/$STABLE_KEY_NAME"
          if ! check_file_exists "$STABLE_FILE_PATH" || [ "$NEW_STABLE_VERSION" != "$CURRENT_STABLE" ]; then
            echo "需要更新稳定版: $CURRENT_STABLE -> $NEW_STABLE_VERSION"
            
            # 获取下载URL
            STABLE_URL=$(echo "$LATEST_STABLE" | jq -r \
              ".assets[] | select(.name | contains(\"$STABLE_APK_PATTERN\")) | .browser_download_url" | head -1)
            
            if [ -z "$STABLE_URL" ]; then
              echo "::warning::未找到匹配的稳定版APK文件 (模式: $STABLE_APK_PATTERN)"
            else
              echo "下载稳定版APK: $STABLE_URL"
              if curl -fL "$STABLE_URL" -o "$WORK_DIR/$STABLE_KEY_NAME"; then
                # 移动文件到仓库目录
                mv -f "$WORK_DIR/$STABLE_KEY_NAME" "$STABLE_FILE_PATH"
                STABLE_UPDATED=true
                echo "稳定版APK更新成功"
              else
                echo "::error::下载稳定版APK失败"
              fi
            fi
          else
            echo "稳定版已是最新，无需更新"
          fi
        else
          echo "::warning::未找到稳定版发布"
          NEW_STABLE_VERSION="$CURRENT_STABLE"
          NEW_STABLE_DATE="$CURRENT_STABLE_DATE"
        fi
        
        # 处理预发布版
        LATEST_PRE=$(echo "$RELEASES_JSON" | jq -r '[.[] | select(.prerelease == true)] | sort_by(.published_at) | reverse | .[0]')
        PRE_UPDATED=false
        if [ -n "$LATEST_PRE" ] && [ "$LATEST_PRE" != "null" ]; then
          read NEW_PRE_VERSION NEW_PRE_DATE <<< $(extract_version_info "$LATEST_PRE")
          echo "源仓库预发布版: $NEW_PRE_VERSION ($NEW_PRE_DATE)"
          
          # 检查是否需要更新：文件不存在或版本不同
          PRE_FILE_PATH="apk/$PRE_RELEASE_KEY_NAME"
          if ! check_file_exists "$PRE_FILE_PATH" || [ "$NEW_PRE_VERSION" != "$CURRENT_PRE" ]; then
            echo "需要更新预发布版: $CURRENT_PRE -> $NEW_PRE_VERSION"
            
            # 获取下载URL
            PRE_URL=$(echo "$LATEST_PRE" | jq -r \
              ".assets[] | select(.name | contains(\"$PRE_RELEASE_APK_PATTERN\")) | .browser_download_url" | head -1)
            
            if [ -z "$PRE_URL" ]; then
              echo "::warning::未找到匹配的预发布版APK文件 (模式: $PRE_RELEASE_APK_PATTERN)"
            else
              echo "下载预发布版APK: $PRE_URL"
              if curl -fL "$PRE_URL" -o "$WORK_DIR/$PRE_RELEASE_KEY_NAME"; then
                # 移动文件到仓库目录
                mv -f "$WORK_DIR/$PRE_RELEASE_KEY_NAME" "$PRE_FILE_PATH"
                PRE_UPDATED=true
                echo "预发布版APK更新成功"
              else
                echo "::error::下载预发布版APK失败"
              fi
            fi
          else
            echo "预发布版已是最新，无需更新"
          fi
        else
          echo "::warning::未找到预发布版"
          NEW_PRE_VERSION="$CURRENT_PRE"
          NEW_PRE_DATE="$CURRENT_PRE_DATE"
        fi
        
        # 更新版本文件
        UPDATE_VERSION_FILE=false
        UPDATED_VERSION_JSON=$(echo "$CURRENT_VERSION_JSON" | jq -c .)
        
        # 稳定版更新检查
        if [ -n "$NEW_STABLE_VERSION" ] && 
           { [ "$NEW_STABLE_VERSION" != "$CURRENT_STABLE" ] || 
             [ "$NEW_STABLE_DATE" != "$CURRENT_STABLE_DATE" ]; }; then
          UPDATED_VERSION_JSON=$(echo "$UPDATED_VERSION_JSON" | jq --arg k "$STABLE_KEY_NAME" \
            --arg v "$NEW_STABLE_VERSION,$NEW_STABLE_DATE" \
            '.[$k] = $v')
          UPDATE_VERSION_FILE=true
          echo "更新稳定版版本信息: $NEW_STABLE_VERSION ($NEW_STABLE_DATE)"
        fi
        
        # 预发布版更新检查
        if [ -n "$NEW_PRE_VERSION" ] && 
           { [ "$NEW_PRE_VERSION" != "$CURRENT_PRE" ] || 
             [ "$NEW_PRE_DATE" != "$CURRENT_PRE_DATE" ]; }; then
          UPDATED_VERSION_JSON=$(echo "$UPDATED_VERSION_JSON" | jq --arg k "$PRE_RELEASE_KEY_NAME" \
            --arg v "$NEW_PRE_VERSION,$NEW_PRE_DATE" \
            '.[$k] = $v')
          UPDATE_VERSION_FILE=true
          echo "更新预发布版版本信息: $NEW_PRE_VERSION ($NEW_PRE_DATE)"
        fi
        
        # 写入版本文件
        if $UPDATE_VERSION_FILE; then
          echo "$UPDATED_VERSION_JSON" | jq . > version.txt
          echo "版本文件已更新"
        else
          echo "版本文件无需更新"
        fi
        
        # 提交更改
        git add apk/* version.txt
        
        # 检查是否有更改
        if [ -n "$(git status --porcelain)" ]; then
          echo "检测到更改，提交到Git"
          COMMIT_MESSAGE="更新APK: "
          
          if [ "$STABLE_UPDATED" = true ]; then
            COMMIT_MESSAGE+="稳定版=$NEW_STABLE_VERSION"
          fi
          
          if [ "$PRE_UPDATED" = true ]; then
            if [ "$STABLE_UPDATED" = true ]; then
              COMMIT_MESSAGE+=", "
            fi
            COMMIT_MESSAGE+="预发布版=$NEW_PRE_VERSION"
          fi
          
          # 如果没有APK更新但版本文件更新
          if [ "$STABLE_UPDATED" = false ] && [ "$PRE_UPDATED" = false ] && $UPDATE_VERSION_FILE; then
            COMMIT_MESSAGE="更新版本文件"
          fi
          
          git commit -m "$COMMIT_MESSAGE"
          
          # 推送更改
          MAX_RETRIES=5
          RETRY_DELAY=15
          for i in $(seq 1 $MAX_RETRIES); do
            echo "尝试拉取最新更改..."
            git pull --rebase
            
            echo "尝试推送更改 ($i/$MAX_RETRIES)..."
            if git push origin HEAD:${GITHUB_REF#refs/heads/}; then
              echo "推送成功"
              break
            else
              echo "推送失败，等待重试 ($i/$MAX_RETRIES)..."
              sleep $RETRY_DELAY
            fi
          done
          
          if [ $i -eq $MAX_RETRIES ]; then
            echo "::error::推送失败，达到最大重试次数"
            exit 1
          fi
        else
          echo "没有检测到更改，跳过提交"
        fi
        
        # 最终文件存在性验证
        echo "最终文件验证:"
        if [ -n "$NEW_STABLE_VERSION" ]; then
          if check_file_exists "apk/$STABLE_KEY_NAME"; then
            echo "稳定版APK验证成功"
          else
            echo "::error::稳定版APK缺失"
            exit 1
          fi
        fi
        
        if [ -n "$NEW_PRE_VERSION" ]; then
          if check_file_exists "apk/$PRE_RELEASE_KEY_NAME"; then
            echo "预发布版APK验证成功"
          else
            echo "::error::预发布版APK缺失"
            exit 1
          fi
        fi
        
        echo "同步完成!"
        echo "稳定版: ${NEW_STABLE_VERSION:-无} (${NEW_STABLE_DATE:-无日期})"
        echo "预发布版: ${NEW_PRE_VERSION:-无} (${NEW_PRE_DATE:-无日期})"
        exit 0

    - name: Release Repository Lock
      if: always()
      run: |
        # 释放锁
        LOCK_FILE="$GITHUB_WORKSPACE/.lock/repo-lock"
        if [ -f "$LOCK_FILE" ]; then
          rm -f "$LOCK_FILE"
          echo "锁已释放"
        else
          echo "锁文件不存在，无需释放"
        fi

  cleanup_self:
    name: Cleanup Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old runs
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "MYTV APK Sync from Source Repository"
          repository: ${{ github.repository }}