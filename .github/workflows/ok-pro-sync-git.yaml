name: OK PRO APK Sync from TELEGRAM

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 1200
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Android SDK
      uses: actions/cache@v4
      with:
        path: |
          ~/.android/cache
          $ANDROID_HOME/build-tools
        key: ${{ runner.os }}-android-${{ hashFiles('**/version.txt') }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Create requirements file
      run: |
        echo "telethon>=1.28.5" > requirements.txt
        echo "requests>=2.31.0" >> requirements.txt
        echo "pytz>=2023.3" >> requirements.txt

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt

    - name: Run APK Sync
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - << "EOF"
        import os
        import json
        import sys
        import subprocess
        import shutil
        import time
        import re
        import logging
        import asyncio
        import socket
        from datetime import datetime, timedelta
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        APK_FILES = ["leanback-pro.apk", "mobile-pro.apk"]
        APK_DIR = "apk"
        WORK_DIR = "temp_apks"
        VERSION_FILE = "version.txt"
        
        # 硬编码的Telegram频道
        TELEGRAM_CHANNELS = ["tvb_ys", "tvboxjk"]
        
        # 设置简化的日志
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(message)s',
            datefmt='%H:%M:%S'
        )
        logger = logging.getLogger()
        
        # DNS优化 - 优先使用IPv4
        original_getaddrinfo = socket.getaddrinfo
        def getaddrinfo_prefer_ipv4(host, port, family=0, type=0, proto=0, flags=0):
            try:
                return original_getaddrinfo(host, port, socket.AF_INET, type, proto, flags)
            except socket.gaierror:
                return original_getaddrinfo(host, port, family, type, proto, flags)
        socket.getaddrinfo = getaddrinfo_prefer_ipv4
        
        def format_size(size):
            """将字节数转换为易读的格式"""
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f}{unit}"
                size /= 1024.0
            return f"{size:.1f}GB"
        
        def git_setup():
            """配置Git用户信息"""
            actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
            email = f"{actor}@users.noreply.github.com"
            
            subprocess.run(["git", "config", "user.name", actor], check=True)
            subprocess.run(["git", "config", "user.email", email], check=True)
            
            # 拉取最新更改
            subprocess.run(["git", "pull", "origin", "main", "--rebase"], check=True)
            return True
        
        def git_commit_push(message):
            """提交并推送更改"""
            try:
                # 只添加apk目录和版本文件
                subprocess.run(["git", "add", APK_DIR, VERSION_FILE], check=True)
                
                # 检查是否有更改
                status = subprocess.run(
                    ["git", "status", "--porcelain", "--untracked-files=no"],
                    capture_output=True, text=True, check=True
                )
                if not status.stdout.strip():
                    logger.info("没有更改需要提交")
                    return True
                
                # 提交更改
                subprocess.run(["git", "commit", "-m", message], check=True)
                
                # 使用Token推送
                token = os.environ['GITHUB_TOKEN']
                repo_url = f"https://x-access-token:{token}@github.com/{os.environ['GITHUB_REPOSITORY']}.git"
                subprocess.run(["git", "push", repo_url, "HEAD:main"], check=True)
                logger.info("推送成功")
                return True
            except Exception as e:
                logger.error(f"Git操作失败: {str(e)}")
                return False
        
        def get_versions():
            """获取当前版本信息"""
            if not os.path.exists(VERSION_FILE):
                return {}
            
            try:
                with open(VERSION_FILE, "r") as f:
                    versions = json.load(f)
                    if not isinstance(versions, dict):
                        logger.warning("版本文件格式无效，重置为空字典")
                        return {}
                    return versions
            except Exception as e:
                logger.error(f"版本文件读取失败: {str(e)}")
                return {}
        
        def update_versions(new_versions):
            """更新版本文件"""
            versions = get_versions()
            versions.update(new_versions)
            
            with open(VERSION_FILE, "w") as f:
                json.dump(versions, f, indent=2)
                
            for apk, ver in new_versions.items():
                logger.info(f"更新: {apk} => {ver}")
        
        def extract_apk_version(apk_path):
            """使用aapt2从APK提取版本号"""
            try:
                aapt2 = os.path.join(
                    os.environ['ANDROID_HOME'],
                    "build-tools/34.0.0/aapt2"
                )
                
                result = subprocess.run(
                    [aapt2, "dump", "badging", apk_path],
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                # 查找versionName
                match = re.search(r"versionName='([^']*)'", result.stdout)
                if match:
                    version = match.group(1)
                    return f"v{version}" if not version.startswith('v') else version
                return None
            except Exception as e:
                logger.error(f"提取版本号失败: {str(e)}")
                return None
        
        async def download_with_retry(client, message, target_filename, original_filename, channel_name, max_retries=2):
            """带重试的下载函数"""
            for attempt in range(1, max_retries + 1):
                try:
                    return await download_apk(client, message, target_filename, original_filename, channel_name)
                except Exception as e:
                    logger.warning(f"下载尝试 {attempt}/{max_retries} 失败: {str(e)}")
                    if attempt == max_retries:
                        raise e
                    await asyncio.sleep(3 * attempt)
        
        async def download_apk(client, message, target_filename, original_filename, channel_name):
            """下载APK文件并提取元数据"""
            download_path = os.path.join(WORK_DIR, target_filename)
            total_size = message.document.size
            
            logger.info(f"下载: {original_filename} ({format_size(total_size)})")
            
            start_time = time.time()
            await client.download_media(
                message, 
                file=download_path,
                progress_callback=None
            )
            
            elapsed = time.time() - start_time
            download_speed = total_size / elapsed / 1024 / 1024
            logger.info(f"下载完成: {elapsed:.1f}秒 ({download_speed:.1f}MB/s)")
            
            if not os.path.exists(download_path):
                raise FileNotFoundError(f"文件下载失败: {download_path}")
            
            # 针对tvboxjk频道优先使用文件名中的版本号
            if channel_name == "tvboxjk":
                # 精确匹配版本号格式
                ver_match = re.search(r'([\d.]+)\.apk$', original_filename)
                if ver_match:
                    version = f"v{ver_match.group(1)}"
                    return {
                        "path": download_path,
                        "version": version,
                        "date": message.date.strftime("%Y-%m-%d")
                    }
            
            # 其他情况使用aapt2提取版本号
            version = extract_apk_version(download_path)
            if not version:
                ver_match = re.search(r'([\d.]+)\.apk$', original_filename)
                if ver_match:
                    version = f"v{ver_match.group(1)}"
                else:
                    version = f"v{target_filename.split('.')[0]}-{message.date.strftime('%Y%m%d')}"
            
            return {
                "path": download_path,
                "version": version,
                "date": message.date.strftime("%Y-%m-%d")
            }
        
        def map_filename(original_name, channel_name):
            """将原始文件名映射到标准文件名 - 精确匹配版本"""
            # 精确排除模拟器专版
            if "模拟器" in original_name or "模拟器专版" in original_name:
                return None
            
            # 第一个频道的直接匹配
            if channel_name == "tvb_ys" and original_name in APK_FILES:
                return original_name
            
            # 第二个频道的精确文件名匹配
            if channel_name == "tvboxjk":
                # 精确匹配OK影视Pro系列文件名
                # 匹配格式: OK影视Pro﹣手机版﹣-3.5.3.apk 或 OK影视Pro﹣电视版﹣3.5.3.apk
                if "OK影视Pro" in original_name:
                    if "手机版" in original_name:
                        logger.info(f"精确匹配手机版: {original_name}")
                        return "mobile-pro.apk"
                    elif "电视版" in original_name:
                        logger.info(f"精确匹配电视版: {original_name}")
                        return "leanback-pro.apk"
                
                # 同时支持可能的变体格式
                # 例如: OK影视Pro-手机版-3.5.3.apk (使用半角减号)
                if "OK影视Pro" in original_name:
                    if "手机版" in original_name or "mobile" in original_name.lower():
                        logger.info(f"变体匹配手机版: {original_name}")
                        return "mobile-pro.apk"
                    elif "电视版" in original_name or "tv" in original_name.lower() or "leanback" in original_name.lower():
                        logger.info(f"变体匹配电视版: {original_name}")
                        return "leanback-pro.apk"
            
            return None
        
        async def check_channel(client, channel_name, current_versions):
            """检查单个Telegram频道中的新APK"""
            logger.info(f"检查频道: {channel_name}")
            
            try:
                entity = await client.get_entity(channel_name)
            except Exception as e:
                logger.error(f"连接频道失败: {str(e)}")
                return {}
            
            updates = {}
            processed_targets = set()
            
            message_count = 0
            async for msg in client.iter_messages(entity, limit=15):
                if message_count >= 10:
                    break
                    
                if not (msg.media and hasattr(msg.media, "document")):
                    continue
                    
                for attr in msg.media.document.attributes:
                    if not isinstance(attr, DocumentAttributeFilename):
                        continue
                        
                    original_name = attr.file_name
                    if not original_name.lower().endswith('.apk'):
                        continue
                        
                    target_name = map_filename(original_name, channel_name)
                    if not target_name or target_name in processed_targets:
                        continue
                    
                    processed_targets.add(target_name)
                    message_count += 1
                    
                    current = current_versions.get(target_name, "")
                    msg_date = msg.date.astimezone(pytz.timezone('Asia/Shanghai')).strftime("%Y-%m-%d")
                    
                    skip_download = False
                    if current:
                        try:
                            stored_version, stored_date = current.split(',')
                            # 对于tvboxjk频道，使用文件名中的版本号进行精确比较
                            if channel_name == "tvboxjk":
                                ver_match = re.search(r'([\d.]+)\.apk$', original_name)
                                if ver_match:
                                    file_version = f"v{ver_match.group(1)}"
                                    if stored_version.strip() == file_version and msg_date <= stored_date.strip():
                                        logger.info(f"跳过相同版本: {target_name} ({file_version})")
                                        skip_download = True
                            else:
                                if msg_date <= stored_date.strip():
                                    skip_download = True
                        except (IndexError, ValueError):
                            pass
                    
                    if not skip_download:
                        try:
                            apk_data = await download_with_retry(client, msg, target_name, original_name, channel_name)
                            new_value = f"{apk_data['version']},{apk_data['date']}"
                            
                            if current != new_value:
                                updates[target_name] = new_value
                                logger.info(f"发现新版本: {target_name} ({new_value})")
                            else:
                                logger.info(f"版本未变化: {target_name}")
                                os.remove(apk_data['path'])
                        except Exception as e:
                            logger.error(f"下载失败: {original_name}, 错误: {str(e)}")
                    
                    if len(processed_targets) >= 2:
                        break
            
            return updates
        
        async def main_async():
            """异步主函数"""
            logger.info("APK同步开始")
            
            required = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION']
            if missing := [var for var in required if not os.environ.get(var)]:
                raise ValueError(f"缺少环境变量: {', '.join(missing)}")
            
            start_time = time.time()
            git_setup()
            
            shutil.rmtree(WORK_DIR, ignore_errors=True)
            os.makedirs(WORK_DIR, exist_ok=True)
            os.makedirs(APK_DIR, exist_ok=True)
            
            current_versions = get_versions()
            logger.info(f"当前版本: {current_versions}")
            
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH'],
                connection_retries=3,
                retry_delay=2,
                auto_reconnect=True,
                timeout=120
            )
            
            all_updates = {}
            
            async with client:
                for channel in TELEGRAM_CHANNELS:
                    try:
                        updates = await check_channel(client, channel, current_versions)
                        if updates:
                            all_updates.update(updates)
                            current_versions.update(updates)
                            logger.info(f"频道 {channel} 发现 {len(updates)} 个更新")
                        else:
                            logger.info(f"频道 {channel} 无更新")
                    except Exception as e:
                        logger.error(f"处理频道 {channel} 时出错: {str(e)}")
            
            if all_updates:
                logger.info(f"总共发现 {len(all_updates)} 个更新")
                
                for apk in all_updates.keys():
                    src = os.path.join(WORK_DIR, apk)
                    if os.path.exists(src):
                        dst = os.path.join(APK_DIR, apk)
                        shutil.copy2(src, dst)
                        logger.info(f"已复制: {apk}")
                
                update_versions(all_updates)
                
                commit_msg = f"更新APK: {', '.join(all_updates.keys())}"
                if git_commit_push(commit_msg):
                    logger.info("所有更新已成功提交")
                else:
                    logger.error("提交失败")
            else:
                logger.info("没有需要更新的APK文件")
            
            shutil.rmtree(WORK_DIR, ignore_errors=True)
            
            total_time = time.time() - start_time
            logger.info(f"同步任务完成，总耗时: {total_time:.1f}秒")
            return 0
        
        if __name__ == "__main__":
            try:
                asyncio.run(main_async())
            except Exception as e:
                logging.error(f"严重错误: {str(e)}")
                sys.exit(1)
        EOF

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 5
          retain_days: 3
          delete_workflow_pattern: "OK PRO APK Sync from TELEGRAM"
          repository: ${{ github.repository }}