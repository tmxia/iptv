name: OpenWrt Kernel Sync from TELEGRAM

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时运行一次
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 1200  # 20分钟超时
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip zip
        pip install telethon requests pytz

    - name: Run Kernel Sync
      env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
        TELEGRAM_CHANNEL: "openwrt_flippy"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TARGET_REPO: ${{ github.repository }}
      run: |
        python - << "EOF"
        import os
        import json
        import sys
        import subprocess
        import shutil
        import time
        import re
        import logging
        import zipfile
        from datetime import datetime
        from telethon import TelegramClient
        from telethon.sessions import StringSession
        from telethon.tl.types import DocumentAttributeFilename
        import pytz
        
        # 配置参数
        KERNEL_GROUPS = {
            "openwrt_flippy6.1": [
                "dtb-rockchip-6.1.*-flippy-93+*.tar.gz",
                "dtb-amlogic-6.1.*-flippy-93+*.tar.gz",
                "boot-6.1.*-flippy-93+*.tar.gz",
                "modules-6.1.*-flippy-93+*.tar.gz",
                "header-6.1.*-flippy-93+*.tar.gz",
                "dtb-allwinner-6.1.*-flippy-93+*.tar.gz"
            ],
            "openwrt_flippy6.12": [
                "dtb-amlogic-6.12.*-flippy-93+*.tar.gz",
                "dtb-rockchip-6.12.*-flippy-93+*.tar.gz",
                "boot-6.12.*-flippy-93+*.tar.gz",
                "dtb-allwinner-6.12.*-flippy-93+*.tar.gz",
                "header-6.12.*-flippy-93+*.tar.gz",
                "modules-6.12.*-flippy-93+*.tar.gz"
            ]
        }
        KERNEL_DIR = "kernels"
        
        # 环境变量
        WORK_DIR = os.path.join(os.getcwd(), "temp_kernels")
        GIT_DIR = os.getcwd()
        os.makedirs(WORK_DIR, exist_ok=True)
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        log = logging.getLogger()
        
        def format_size(size):
            """将字节数转换为易读的格式"""
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f}{unit}"
                size /= 1024.0
            return f"{size:.1f}GB"
        
        def setup_git():
            try:
                actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
                email = os.environ.get('GITHUB_EMAIL', f'{actor}@users.noreply.github.com')
                
                subprocess.run(["git", "config", "user.name", actor], cwd=GIT_DIR, check=True)
                subprocess.run(["git", "config", "user.email", email], cwd=GIT_DIR, check=True)
                
                # 拉取最新更改
                log.info("拉取远程最新更改...")
                subprocess.run(["git", "pull", "origin", "main", "--rebase"], cwd=GIT_DIR, check=True)
                
                log.info("Git配置完成")
                return True
            except Exception as e:
                log.error(f"Git设置失败: {str(e)}")
                return False
        
        def commit_and_push(message):
            try:
                # 添加内核目录和版本文件
                subprocess.run(["git", "add", KERNEL_DIR, "version.txt"], cwd=GIT_DIR, check=True)
                
                # 检查是否有更改
                status = subprocess.run(["git", "status", "--porcelain"], cwd=GIT_DIR, capture_output=True, text=True)
                if not status.stdout.strip():
                    log.info("没有更改需要提交")
                    return True
                
                # 提交更改
                subprocess.run(["git", "commit", "-m", message], cwd=GIT_DIR, check=True)
                
                token = os.environ['GITHUB_TOKEN']
                actor = os.environ.get('GITHUB_ACTOR', 'github-actions')
                repo = os.environ['TARGET_REPO']
                repo_url = f"https://{actor}:{token}@github.com/{repo}.git"
                
                # 重试机制
                max_attempts = 3
                for attempt in range(1, max_attempts + 1):
                    try:
                        log.info(f"尝试 {attempt}/{max_attempts}: 拉取远程最新更改并变基...")
                        subprocess.run(["git", "pull", "--rebase", "origin", "main"], cwd=GIT_DIR, check=True)
                        
                        log.info(f"尝试 {attempt}/{max_attempts}: 推送更改...")
                        subprocess.run(
                            ["git", "push", repo_url, "HEAD:main"],
                            cwd=GIT_DIR,
                            check=True
                        )
                        log.info("推送成功")
                        return True
                    except subprocess.CalledProcessError as e:
                        log.warning(f"尝试 {attempt} 失败: {str(e)}")
                        if attempt < max_attempts:
                            log.info("等待10秒后重试...")
                            time.sleep(10)
                        else:
                            log.error(f"经过{max_attempts}次尝试后仍无法推送更改")
                            return False
            except Exception as e:
                log.error(f"Git操作失败: {str(e)}")
                return False
        
        def get_current_versions():
            """获取当前版本信息"""
            version_path = os.path.join(GIT_DIR, "version.txt")
            if os.path.exists(version_path):
                try:
                    with open(version_path, "r") as f:
                        return json.load(f), True
                except json.JSONDecodeError:
                    log.warning("版本文件格式错误，重新初始化")
                    return {}, True
                except Exception as e:
                    log.warning(f"读取版本文件失败: {str(e)}，重新初始化")
                    return {}, True
            return {}, False
        
        def update_versions(versions):
            version_path = os.path.join(GIT_DIR, "version.txt")
            with open(version_path, "w") as f:
                json.dump(versions, f, indent=2)
        
        def pattern_match(filename, pattern):
            """使用正则表达式检查文件名是否匹配模式"""
            pattern_regex = pattern.replace('.', r'\.').replace('*', r'.*')
            return re.fullmatch(pattern_regex, filename) is not None
        
        def find_matching_group(filename):
            """查找文件名匹配的内核组"""
            for group, patterns in KERNEL_GROUPS.items():
                for pattern in patterns:
                    if pattern_match(filename, pattern):
                        return group
            return None
        
        def extract_version_from_filename(filename):
            """从文件名中提取完整版本标识"""
            # 提取完整的版本字符串 (e.g. 6.1.141-flippy-93+o)
            match = re.search(r'(\d+\.\d+\.\d+-flippy-\d+\+[a-z]*)', filename)
            return match.group(1) if match else None
        
        async def download_file(client, message, filename, download_path):
            total_size = message.document.size
            await client.download_media(message, file=download_path)
            return True
        
        def get_latest_date(messages):
            """获取一组消息中的最新日期"""
            latest_date = None
            for msg in messages:
                if latest_date is None or msg.date > latest_date:
                    latest_date = msg.date
            return latest_date
        
        async def process_group(client, group_name, version, files_to_download, group_dir):
            """处理完整的内核组"""
            # 获取组内所有消息的最新日期
            all_messages = [msg for _, msg in files_to_download]
            latest_date = get_latest_date(all_messages)
            
            # 转换为UTC+8时区
            utc8 = pytz.timezone('Asia/Shanghai')
            date_utc8 = latest_date.astimezone(utc8).strftime("%Y-%m-%d")
            
            log.info(f"开始下载内核组: {group_name} 版本 {version} (共 {len(files_to_download)} 个文件)")
            os.makedirs(group_dir, exist_ok=True)
            
            # 下载组内所有文件
            for filename, msg in files_to_download:
                download_path = os.path.join(group_dir, filename)
                await download_file(client, msg, filename, download_path)
            
            log.info(f"下载完成: {group_name} 版本 {version}")
            
            # 创建ZIP文件
            zip_filename = f"{group_name}_{version}.zip"
            zip_path = os.path.join(WORK_DIR, zip_filename)
            log.info(f"创建ZIP文件: {zip_filename}")
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for root, _, files in os.walk(group_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        zipf.write(file_path, os.path.basename(file_path))
            
            log.info(f"ZIP文件创建完成: {zip_filename}")
            return zip_path, date_utc8
        
        def check_local_kernel_files(current_versions):
            """检查本地内核文件是否存在"""
            for group, version_data in current_versions.items():
                if ',' in version_data:
                    version = version_data.split(',')[0]
                    zip_file = f"{group}_{version}.zip"
                    zip_path = os.path.join(GIT_DIR, KERNEL_DIR, zip_file)
                    
                    if not os.path.exists(zip_path):
                        log.warning(f"本地内核文件缺失: {zip_file}")
                        return False
            return True
        
        async def find_new_kernels(client, current_versions):
            log.info("连接Telegram...")
            await client.connect()
            if not await client.is_user_authorized():
                log.error("错误: Telegram会话无效")
                return None
            
            channel = os.environ.get('TELEGRAM_CHANNEL', 'openwrt_flippy')
            log.info(f"扫描频道: {channel} (最近50条消息)")
            entity = await client.get_entity(channel)
            
            updates = {}
            
            # 存储找到的文件 {group: {version: {filename: message}}}
            found_groups = {group: {} for group in KERNEL_GROUPS.keys()}
            
            # 获取频道中最新的50条消息
            async for msg in client.iter_messages(entity, limit=50):
                if msg.media and hasattr(msg.media, "document"):
                    for attr in msg.media.document.attributes:
                        if isinstance(attr, DocumentAttributeFilename):
                            filename = attr.file_name
                            group = find_matching_group(filename)
                            if group:
                                version = extract_version_from_filename(filename)
                                if not version:
                                    continue
                                
                                if version not in found_groups[group]:
                                    found_groups[group][version] = {}
                                
                                found_groups[group][version][filename] = msg
            
            # 检查每个组的完整性
            for group, versions in found_groups.items():
                # 按版本号排序（从新到旧）
                if not versions:
                    continue
                    
                sorted_versions = sorted(versions.keys(), reverse=True)
                for version in sorted_versions:
                    files = versions[version]
                    # 检查是否包含所有必需的文件
                    required_files = set(KERNEL_GROUPS[group])
                    existing_files = set(files.keys())
                    
                    # 检查每个必需文件模式是否至少有一个匹配的文件
                    group_complete = True
                    for pattern in required_files:
                        if not any(pattern_match(f, pattern) for f in existing_files):
                            group_complete = False
                            break
                    
                    if group_complete:
                        log.info(f"发现完整内核组: {group} 版本 {version}")
                        
                        # 检查当前版本信息
                        current_value = current_versions.get(group, "")
                        current_version = current_value.split(",")[0] if current_value else ""
                        current_date = current_value.split(",")[1] if "," in current_value else ""
                        
                        # 获取组内所有消息的最新日期
                        all_messages = list(files.values())
                        latest_date = get_latest_date(all_messages)
                        
                        # 转换为日期字符串（YYYY-MM-DD）
                        utc8 = pytz.timezone('Asia/Shanghai')
                        date_utc8 = latest_date.astimezone(utc8).strftime("%Y-%m-%d")
                        
                        # 检查是否需要更新
                        version_updated = False
                        if not current_version:
                            version_updated = True
                            log.info(f"新内核组: {group} (首次添加)")
                        elif version != current_version:
                            version_updated = True
                            log.info(f"发现新版本: {version} (当前: {current_version})")
                        elif date_utc8 > current_date:
                            version_updated = True
                            log.info(f"相同版本但更新日期: {date_utc8} > {current_date}")
                        
                        if version_updated:
                            # 准备下载文件
                            files_to_download = [(f, msg) for f, msg in files.items()]
                            group_dir = os.path.join(WORK_DIR, f"group_{group}_{version}")
                            
                            zip_path, zip_date = await process_group(client, group, version, files_to_download, group_dir)
                            updates[group] = {
                                "version": version,
                                "date_iso": zip_date,
                                "zip_path": zip_path
                            }
                        
                        # 只处理最新版本，跳过旧版本
                        break
            
            return updates if updates else None
        
        def main():
            log.info("="*50)
            log.info("OpenWrt 内核同步工具启动")
            log.info("="*50)
            
            # 验证环境变量
            required = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION', 'GITHUB_TOKEN']
            missing = [var for var in required if not os.environ.get(var)]
            if missing:
                log.error(f"错误: 缺少环境变量: {', '.join(missing)}")
                return 1
            
            if not setup_git():
                return 2
            
            # 1. 获取当前版本信息
            current_versions, version_file_exists = get_current_versions()
            log.info(f"当前版本信息: {json.dumps(current_versions, indent=2)}")
            
            # 2. 检查本地内核文件是否存在
            if version_file_exists and current_versions:
                local_files_ok = check_local_kernel_files(current_versions)
                if not local_files_ok:
                    log.error("错误: 本地内核文件缺失，请手动修复")
                    return 5
            
            client = TelegramClient(
                StringSession(os.environ['TELEGRAM_SESSION']),
                int(os.environ['TELEGRAM_API_ID']),
                os.environ['TELEGRAM_API_HASH']
            )
            
            try:
                with client:
                    # 3. 连接Telegram查找新内核
                    new_kernels = client.loop.run_until_complete(
                        find_new_kernels(client, current_versions)
            except Exception as e:
                log.error(f"Telegram错误: {str(e)}")
                return 3
            
            updated = False
            
            if new_kernels:
                # 4. 处理新内核
                target_dir = os.path.join(GIT_DIR, KERNEL_DIR)
                os.makedirs(target_dir, exist_ok=True)
                
                for group, data in new_kernels.items():
                    # 复制ZIP文件到仓库
                    target_path = os.path.join(target_dir, os.path.basename(data["zip_path"]))
                    shutil.copy2(data["zip_path"], target_path)
                    
                    # 更新版本信息
                    current_versions[group] = f"{data['version']},{data['date_iso']}"
                    log.info(f"已更新: {group} (版本: {data['version']}, 日期: {data['date_iso']})")
                    updated = True
                
                # 更新版本文件
                update_versions(current_versions)
                
                # 生成提交信息
                group_versions = []
                for group, data in new_kernels.items():
                    group_versions.append(f"{group}@{data['version']}")
                
                commit_msg = f"更新OpenWrt内核: {', '.join(group_versions)}"
                if commit_and_push(commit_msg):
                    log.info(f"同步成功! 更新了 {len(new_kernels)} 个内核组")
                else:
                    log.error("提交失败")
                    return 4
            else:
                log.info("没有需要更新的内核文件")
            
            # 清理临时目录
            if os.path.exists(WORK_DIR):
                shutil.rmtree(WORK_DIR)
                log.info("临时目录已清理")
            
            log.info("="*50)
            log.info("同步任务完成")
            log.info("="*50)
            return 0
        
        if __name__ == "__main__":
            sys.exit(main())
        EOF

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const issue_number = context.issue.number;
            if (issue_number) {
              const message = `🚨 OpenWrt内核同步失败！工作流运行: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              await github.rest.issues.createComment({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              // 当没有issue上下文时，创建新issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `工作流失败通知 - ${{ github.workflow }} #${{ github.run_number }}`,
                body: `🚨 OpenWrt内核同步失败！工作流运行: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
              console.log(`创建了新issue: ${issue.data.html_url}`);
            }
          } catch (error) {
            console.error('通知失败:', error);
            core.error(`🚨 OpenWrt内核同步失败！详情请查看运行: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`);
          }

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "OpenWrt Kernel Sync from TELEGRAM"
          repository: ${{ github.repository }}