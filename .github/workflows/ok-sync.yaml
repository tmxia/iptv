name: OK APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */24 * * *'  # 每24小时运行一次
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Run APK sync script
      env:
        SOURCE_REPO: "FongMi/Release"
        SOURCE_BRANCH: "okjack"
        APK_DIR: "apk/release"  # APK文件所在目录
        TARGET_REPO: "${{ github.repository }}"
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        STABLE_APK_NAME: "leanback-armeabi_v7a.apk"
        PRE_RELEASE_APK_NAME: "mobile-arm64_v8a.apk"
        STABLE_TARGET_NAME: "leanback.apk"
        PRE_RELEASE_TARGET_NAME: "mobile.apk"
      run: |
        # 设置目标路径
        STABLE_TARGET_PATH="apk/$STABLE_TARGET_NAME"
        PRE_RELEASE_TARGET_PATH="apk/$PRE_RELEASE_TARGET_NAME"
        
        # 创建临时工作目录
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 验证令牌访问权限
        echo "验证GitHub令牌权限..."
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $TOKEN" \
                  "https://api.github.com/repos/$TARGET_REPO")
        if [ "$RESPONSE" != "200" ]; then
          echo "错误: 令牌无效 (HTTP $RESPONSE)"
          exit 1
        fi

        # 函数：获取文件提交历史
        get_file_commit_info() {
          local file_name="$1"
          echo "获取文件提交历史: $APK_DIR/$file_name..."
          
          # 获取文件提交历史（只取最新的一条）
          COMMIT_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/commits?path=$APK_DIR/$file_name&sha=$SOURCE_BRANCH&per_page=1")
          if [ $? -ne 0 ]; then
            echo "错误: 无法获取文件提交历史"
            exit 1
          fi
          
          # 提取提交信息
          COMMIT_SHA=$(echo "$COMMIT_JSON" | jq -r '.[0].sha')
          COMMIT_DATE=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.committer.date')
          SHORT_SHA=${COMMIT_SHA:0:7}
          COMMIT_DATE_UTC8=$(TZ=Asia/Shanghai date -d "$COMMIT_DATE" +'%Y-%m-%d %H:%M')
          
          echo "文件提交信息: $SHORT_SHA (时间: $COMMIT_DATE_UTC8)"
          
          # 返回短SHA和日期
          echo "$SHORT_SHA,$COMMIT_DATE_UTC8"
        }

        # 获取稳定版APK提交信息
        echo "===== 获取稳定版提交信息 ====="
        STABLE_COMMIT_INFO=$(get_file_commit_info "$STABLE_APK_NAME")
        STABLE_SHORT_SHA=$(echo "$STABLE_COMMIT_INFO" | cut -d, -f1)
        STABLE_COMMIT_DATE=$(echo "$STABLE_COMMIT_INFO" | cut -d, -f2)
        
        # 获取预发行版APK提交信息
        echo "===== 获取预发行版提交信息 ====="
        PRE_RELEASE_COMMIT_INFO=$(get_file_commit_info "$PRE_RELEASE_APK_NAME")
        PRE_RELEASE_SHORT_SHA=$(echo "$PRE_RELEASE_COMMIT_INFO" | cut -d, -f1)
        PRE_RELEASE_COMMIT_DATE=$(echo "$PRE_RELEASE_COMMIT_INFO" | cut -d, -f2)

        # 获取目标仓库当前版本文件
        echo "获取目标仓库版本文件..."
        TARGET_VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")

        # 初始化当前版本
        CURRENT_STABLE_VERSION=""
        CURRENT_PRE_RELEASE_VERSION=""
        CURRENT_STABLE_DATE=""
        CURRENT_PRE_RELEASE_DATE=""

        # 检查版本文件是否存在
        if [ "$(echo "$TARGET_VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          # 提取内容并解码
          VERSION_CONTENT=$(echo "$TARGET_VERSION_JSON" | jq -r '.content' | base64 -d)
          echo "版本文件内容:"
          echo "$VERSION_CONTENT"
          
          # 尝试解析JSON
          if echo "$VERSION_CONTENT" | jq -e . >/dev/null 2>&1; then
            # 获取当前稳定版版本
            CURRENT_STABLE_VERSION=$(echo "$VERSION_CONTENT" | jq -r ".$STABLE_TARGET_NAME" | cut -d, -f1)
            CURRENT_STABLE_DATE=$(echo "$VERSION_CONTENT" | jq -r ".$STABLE_TARGET_NAME" | cut -d, -f2)
            echo "目标仓库当前稳定版版本: $CURRENT_STABLE_VERSION (日期: $CURRENT_STABLE_DATE)"
            
            # 获取当前预发行版版本
            CURRENT_PRE_RELEASE_VERSION=$(echo "$VERSION_CONTENT" | jq -r ".$PRE_RELEASE_TARGET_NAME" | cut -d, -f1)
            CURRENT_PRE_RELEASE_DATE=$(echo "$VERSION_CONTENT" | jq -r ".$PRE_RELEASE_TARGET_NAME" | cut -d, -f2)
            echo "目标仓库当前预发行版版本: $CURRENT_PRE_RELEASE_VERSION (日期: $CURRENT_PRE_RELEASE_DATE)"
          else
            echo "警告: 版本文件格式无效，将重置"
          fi
        else
          echo "目标仓库无版本文件，将创建新版本文件"
        fi

        # 函数：下载文件
        download_file() {
          local file_name="$1"
          local target_name="$2"
          
          # 构建下载URL
          DOWNLOAD_URL="https://raw.githubusercontent.com/$SOURCE_REPO/$SOURCE_BRANCH/$APK_DIR/$file_name"
          echo "下载文件: $DOWNLOAD_URL"
          
          # 下载文件
          curl -sL "$DOWNLOAD_URL" -o "$WORK_DIR/$file_name"
          if [ ! -f "$WORK_DIR/$file_name" ]; then
            echo "错误: 文件下载失败"
            return 1
          fi
          
          # 重命名文件
          mv "$WORK_DIR/$file_name" "$WORK_DIR/$target_name"
          echo "文件已重命名为: $target_name"
          return 0
        }

        # 函数：上传文件
        upload_file() {
          local target_path="$1"
          local file_name="$2"
          local commit_sha="$3"
          
          echo "上传文件: $target_path..."
          
          # 获取仓库当前内容
          CONTENT_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                          "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          # 检查文件是否存在
          local sha=""
          if [ "$(echo "$CONTENT_JSON" | jq -r '.message')" != "Not Found" ]; then
            sha=$(echo "$CONTENT_JSON" | jq -r '.sha')
          fi
          
          # 创建提交信息
          local commit_msg="更新文件: $target_path (提交: $commit_sha)"
          
          # 创建JSON请求文件
          local json_file="$WORK_DIR/request_$file_name.json"
          
          # 手动构建JSON文件
          {
            echo '{'
            echo "  \"message\": \"$commit_msg\","
            echo -n '  "content": "'
            base64 -w0 "$WORK_DIR/$file_name" | tr -d '\n'
            echo '",'
            echo "  \"sha\": \"$sha\""
            echo '}'
          } > "$json_file"
          
          # 上传文件
          RESPONSE_JSON=$(curl -s \
                -X PUT \
                -H "Authorization: token $TOKEN" \
                -H "Content-Type: application/json" \
                --data-binary "@$json_file" \
                "https://api.github.com/repos/$TARGET_REPO/contents/$target_path")
          
          # 检查错误
          local error_message=$(echo "$RESPONSE_JSON" | jq -r '.message')
          if [ "$error_message" != "null" ] && [ ! -z "$error_message" ]; then
            echo "错误: 文件上传失败 - $error_message"
            echo "完整响应:"
            echo "$RESPONSE_JSON"
            return 1
          else
            echo "上传成功: $target_path ($commit_sha)"
            return 0
          fi
        }

        # 处理稳定版文件
        STABLE_NEED_UPDATE=false
        if [ "$STABLE_SHORT_SHA" != "$CURRENT_STABLE_VERSION" ]; then
          echo "===== 更新稳定版文件 ====="
          echo "发现新版本: $STABLE_SHORT_SHA (当前: $CURRENT_STABLE_VERSION)"
          
          # 下载文件
          download_file "$STABLE_APK_NAME" "$STABLE_TARGET_NAME"
          if [ $? -eq 0 ]; then
            STABLE_NEED_UPDATE=true
          else
            echo "错误: 稳定版文件下载失败"
            exit 1
          fi
        else
          echo "稳定版无需更新 (当前版本: $CURRENT_STABLE_VERSION)"
        fi

        # 处理预发行版文件
        PRE_RELEASE_NEED_UPDATE=false
        if [ "$PRE_RELEASE_SHORT_SHA" != "$CURRENT_PRE_RELEASE_VERSION" ]; then
          echo "===== 更新预发行版文件 ====="
          echo "发现新版本: $PRE_RELEASE_SHORT_SHA (当前: $CURRENT_PRE_RELEASE_VERSION)"
          
          # 下载文件
          download_file "$PRE_RELEASE_APK_NAME" "$PRE_RELEASE_TARGET_NAME"
          if [ $? -eq 0 ]; then
            PRE_RELEASE_NEED_UPDATE=true
          else
            echo "错误: 预发行版文件下载失败"
            exit 1
          fi
        else
          echo "预发行版无需更新 (当前版本: $CURRENT_PRE_RELEASE_VERSION)"
        fi

        # 更新版本数据
        NEW_VERSION_DATA=$(jq -n \
            --arg stable_key "$STABLE_TARGET_NAME" \
            --arg stable_value "$STABLE_SHORT_SHA,$STABLE_COMMIT_DATE" \
            --arg pre_key "$PRE_RELEASE_TARGET_NAME" \
            --arg pre_value "$PRE_RELEASE_SHORT_SHA,$PRE_RELEASE_COMMIT_DATE" \
            '{
              ($stable_key): $stable_value,
              ($pre_key): $pre_value
            }')
            
        NEW_VERSION_CONTENT=$(echo "$NEW_VERSION_DATA" | jq -r .)

        echo "更新后的版本文件内容:"
        echo "$NEW_VERSION_CONTENT"

        # 上传版本文件
        echo "更新版本文件..."
        VERSION_JSON=$(curl -s -H "Authorization: token $TOKEN" \
                        "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")

        # 检查文件是否存在
        SHA_VERSION=""
        if [ "$(echo "$VERSION_JSON" | jq -r '.message')" != "Not Found" ]; then
          SHA_VERSION=$(echo "$VERSION_JSON" | jq -r '.sha')
        fi

        # Base64编码版本文件
        VERSION_BASE64=$(echo -n "$NEW_VERSION_CONTENT" | base64 -w0)

        # 创建JSON数据
        JSON_VERSION=$(jq -n \
            --arg msg "更新版本: 稳定版=$STABLE_SHORT_SHA, 预发行版=$PRE_RELEASE_SHORT_SHA" \
            --arg content "$VERSION_BASE64" \
            --arg sha "$SHA_VERSION" \
            '{message: $msg, content: $content, sha: $sha}')

        # 上传版本文件
        echo "上传版本文件..."
        VERSION_RESPONSE=$(curl -s \
                  -X PUT \
                  -H "Authorization: token $TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_VERSION" \
                  "https://api.github.com/repos/$TARGET_REPO/contents/version.txt")

        # 检查错误
        ERROR_MESSAGE_VERSION=$(echo "$VERSION_RESPONSE" | jq -r '.message')
        if [ "$ERROR_MESSAGE_VERSION" != "null" ]; then
          echo "错误: 版本文件上传失败 - $ERROR_MESSAGE_VERSION"
          exit 1
        else
          echo "版本文件更新成功"
        fi

        # 上传稳定版文件（如果需要）
        if [ "$STABLE_NEED_UPDATE" = true ]; then
          upload_file "$STABLE_TARGET_PATH" "$STABLE_TARGET_NAME" "$STABLE_SHORT_SHA"
          if [ $? -ne 0 ]; then
            echo "错误: 稳定版文件上传失败"
            exit 1
          fi
        fi

        # 上传预发行版文件（如果需要）
        if [ "$PRE_RELEASE_NEED_UPDATE" = true ]; then
          upload_file "$PRE_RELEASE_TARGET_PATH" "$PRE_RELEASE_TARGET_NAME" "$PRE_RELEASE_SHORT_SHA"
          if [ $? -ne 0 ]; then
            echo "错误: 预发行版文件上传失败"
            exit 1
          fi
        fi

        echo "同步完成! 状态: 成功"
        echo "稳定版: $STABLE_TARGET_NAME ($STABLE_SHORT_SHA, $STABLE_COMMIT_DATE)"
        echo "预发行版: $PRE_RELEASE_TARGET_NAME ($PRE_RELEASE_SHORT_SHA, $PRE_RELEASE_COMMIT_DATE)"
        
        exit 0

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0   # 保留最近5次运行记录
          retain_days: 0         # 保留7天内的运行记录
          delete_workflow_pattern: "OK APK Sync from Source Repository"
          repository: ${{ github.repository }}