name: OK APK Sync from Source Repository

on:
  schedule:
    - cron: '0 */2 * * *'  # 每2小时运行一次
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Acquire Repository Lock 🔒
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: true
        poll-interval-seconds: 30
        abort-after-seconds: 600
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout target repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: target-repo
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip
        
    - name: Install Android SDK for aapt2
      run: |
        SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip"
        curl -sL "$SDK_TOOLS_URL" -o sdk-tools.zip
        unzip -q sdk-tools.zip -d android-sdk
        
        echo "ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
        echo "$GITHUB_WORKSPACE/android-sdk/cmdline-tools/bin" >> $GITHUB_PATH
        
        yes | android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$GITHUB_WORKSPACE/android-sdk "build-tools;34.0.0"
        echo "aapt2路径: $GITHUB_WORKSPACE/android-sdk/build-tools/34.0.0/aapt2"
        
    - name: Run APK sync script
      env:
        SOURCE_REPO: "FongMi/Release"
        SOURCE_BRANCH: "okjack"
        APK_DIR: "apk/release"
        TARGET_REPO: "${{ github.repository }}"
        STABLE_APK_NAME: "leanback-armeabi_v7a.apk"
        PRE_RELEASE_APK_NAME: "mobile-arm64_v8a.apk"
        STABLE_TARGET_NAME: "leanback.apk"
        PRE_RELEASE_TARGET_NAME: "mobile.apk"
      run: |
        STABLE_TARGET_PATH="apk/$STABLE_TARGET_NAME"
        PRE_RELEASE_TARGET_PATH="apk/$PRE_RELEASE_TARGET_NAME"
        
        WORK_DIR=$(mktemp -d)
        echo "创建临时目录: $WORK_DIR"
        trap 'rm -rf "$WORK_DIR"; echo "清理临时目录..."' EXIT

        # 下载稳定版APK
        echo "下载稳定版APK..."
        STABLE_DOWNLOAD_URL="https://raw.githubusercontent.com/$SOURCE_REPO/$SOURCE_BRANCH/$APK_DIR/$STABLE_APK_NAME"
        curl -sL "$STABLE_DOWNLOAD_URL" -o "$WORK_DIR/$STABLE_APK_NAME"
        if [ ! -f "$WORK_DIR/$STABLE_APK_NAME" ]; then
          echo "错误: 稳定版APK下载失败"
          exit 1
        fi
        
        # 下载预发行版APK
        echo "下载预发行版APK..."
        PRE_RELEASE_DOWNLOAD_URL="https://raw.githubusercontent.com/$SOURCE_REPO/$SOURCE_BRANCH/$APK_DIR/$PRE_RELEASE_APK_NAME"
        curl -sL "$PRE_RELEASE_DOWNLOAD_URL" -o "$WORK_DIR/$PRE_RELEASE_APK_NAME"
        if [ ! -f "$WORK_DIR/$PRE_RELEASE_APK_NAME" ]; then
          echo "错误: 预发行版APK下载失败"
          exit 1
        fi

        # 提取版本号并添加"v"前缀
        extract_apk_version() {
          local apk_path="$1"
          echo "从APK提取版本号: $apk_path" >&2
          
          VERSION_INFO=$("$GITHUB_WORKSPACE/android-sdk/build-tools/34.0.0/aapt2" dump badging "$apk_path" | grep "versionName")
          VERSION=$(echo "$VERSION_INFO" | sed -n "s/.*versionName='\([^']*\)'.*/\1/p")
          
          if [ -z "$VERSION" ]; then
            echo "警告: 无法提取版本号, 使用提交哈希" >&2
            COMMIT_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/commits?path=$APK_DIR/$STABLE_APK_NAME&sha=$SOURCE_BRANCH&per_page=1")
            VERSION=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.message' | grep -oP 'v\d+\.\d+\.\d+' | head -1)
            if [ -z "$VERSION" ]; then
              VERSION="unknown"
            fi
          fi
          
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "提取的版本号: $VERSION" >&2
          echo "$VERSION"
        }

        # 获取文件提交日期
        get_file_commit_date() {
          local file_name="$1"
          
          COMMIT_JSON=$(curl -sL "https://api.github.com/repos/$SOURCE_REPO/commits?path=$APK_DIR/$file_name&sha=$SOURCE_BRANCH&per_page=1")
          if [ $? -ne 0 ] || [ -z "$COMMIT_JSON" ]; then
            echo "错误: 无法获取文件提交历史" >&2
            exit 1
          fi
          
          COMMIT_DATE=$(echo "$COMMIT_JSON" | jq -r '.[0].commit.committer.date')
          COMMIT_DATE_UTC8=$(TZ=Asia/Shanghai date -d "$COMMIT_DATE" +'%Y-%m-%d')
          
          echo "文件提交日期: $COMMIT_DATE_UTC8" >&2
          echo "$COMMIT_DATE_UTC8"
        }

        STABLE_VERSION=$(extract_apk_version "$WORK_DIR/$STABLE_APK_NAME")
        PRE_RELEASE_VERSION=$(extract_apk_version "$WORK_DIR/$PRE_RELEASE_APK_NAME")
        STABLE_COMMIT_DATE=$(get_file_commit_date "$STABLE_APK_NAME")
        PRE_RELEASE_COMMIT_DATE=$(get_file_commit_date "$PRE_RELEASE_APK_NAME")
        
        echo "稳定版版本: $STABLE_VERSION, 日期: $STABLE_COMMIT_DATE"
        echo "预发行版版本: $PRE_RELEASE_VERSION, 日期: $PRE_RELEASE_COMMIT_DATE"

        TARGET_DIR="$GITHUB_WORKSPACE/target-repo"
        VERSION_FILE="$TARGET_DIR/version.txt"
        
        if [ ! -f "$VERSION_FILE" ]; then
          echo "{}" > "$VERSION_FILE"
        fi
        
        CURRENT_VERSION_DATA=$(cat "$VERSION_FILE")
        NEW_VERSION_DATA=$(echo "$CURRENT_VERSION_DATA" | jq \
            --arg stable_key "$STABLE_TARGET_NAME" \
            --arg stable_value "$STABLE_VERSION,$STABLE_COMMIT_DATE" \
            --arg pre_key "$PRE_RELEASE_TARGET_NAME" \
            --arg pre_value "$PRE_RELEASE_VERSION,$PRE_RELEASE_COMMIT_DATE" \
            '.[$stable_key] = $stable_value | .[$pre_key] = $pre_value')
            
        echo "$NEW_VERSION_DATA" | jq -r . > "$VERSION_FILE"
        echo "版本文件已更新"

        mkdir -p "$TARGET_DIR/apk"
        cp "$WORK_DIR/$STABLE_APK_NAME" "$TARGET_DIR/$STABLE_TARGET_PATH"
        cp "$WORK_DIR/$PRE_RELEASE_APK_NAME" "$TARGET_DIR/$PRE_RELEASE_TARGET_PATH"
        echo "APK文件已复制到目标仓库"

        cd "$TARGET_DIR"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        # 添加所有更改
        git add .
        
        # 检查是否有更改
        if git diff-index --quiet HEAD --; then
          echo "没有更改需要提交"
          exit 0
        fi

        COMMIT_MESSAGE="更新APK: $STABLE_TARGET_NAME ($STABLE_VERSION) 和 $PRE_RELEASE_TARGET_NAME ($PRE_RELEASE_VERSION)"
        git commit -m "$COMMIT_MESSAGE"
        
        # 推送重试机制 (最多3次)
        for i in {1..3}; do
          echo "尝试 $i/3: 拉取远程最新更改..."
          git pull origin main --rebase || {
            echo "拉取失败，等待10秒后重试..."
            sleep 10
            continue
          }
          
          echo "尝试 $i/3: 推送更改..."
          if git push origin main; then
            echo "推送成功!"
            break
          else
            echo "推送失败，等待10秒后重试..."
            sleep 10
          fi
        done
        
        if [ $i -eq 3 ]; then
          echo "错误: 经过3次尝试后仍无法推送更改"
          exit 1
        fi

        echo "同步完成! 状态: 成功"

    - name: Release Repository Lock 🔓
      if: always()
      uses: softprops/turnstyle@v1
      with:
        continue-on-error: true
        action: unlock
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const message = `🚨 APK同步失败！工作流运行: [${{ github.workflow }} #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          })

  cleanup_self:
    name: Cleanup Self Workflow History
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ always() }}
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep_minimum_runs: 0
          retain_days: 0
          delete_workflow_pattern: "OK APK Sync from Source Repository"
          repository: ${{ github.repository }}